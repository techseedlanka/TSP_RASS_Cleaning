/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import static Frames.MAIN.lbl_current_date;
import com.mxrck.autocompleter.TextAutoCompleter;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sapu
 */
public class Decsiplinary_Details extends javax.swing.JFrame {

    /**
     * Creates new form Decsiplinary_Details
     */
    private ImageIcon format = null;

    static ArrayList al;

    public Decsiplinary_Details() {
        initComponents();
        al = new ArrayList();
        auto_completer();
        ReportedBy_auto_completer();
        jComboBox1.setVisible(false);

//       txt_enteredby.setText(MAIN.lbl_logged_user.getText());
        Date d = new Date();
        SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
        txt_enteredDate.setText("" + ft.format(d));

    }

    private void auto_completer() {

        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("select * from employee_reg where IsResigned=0 ");

            TextAutoCompleter ta = new TextAutoCompleter(txt_search);

            while (rs.next()) {
                String code = rs.getString("EPFno");
                String nic = rs.getString("NIC");
                String NameWithInitials = rs.getString("NameWithInitials");
                String surname = rs.getString("Surname");

                ta.addItem(code);
                ta.addItem(NameWithInitials);
                ta.addItem(nic);
                ta.addItem(surname);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    private void ReportedBy_auto_completer() {

        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("select * from employee_reg where IsResigned=0 ");

            TextAutoCompleter ta = new TextAutoCompleter(txt_reportByID);

            while (rs.next()) {
                String code = rs.getString("EPFno");
                String nic = rs.getString("NIC");
                String NameWithInitials = rs.getString("NameWithInitials");

                ta.addItem(code);
                ta.addItem(NameWithInitials);
                ta.addItem(nic);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txt_search = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        txt_empid = new javax.swing.JTextField();
        txt_empNic = new javax.swing.JTextField();
        jSeparator9 = new javax.swing.JSeparator();
        txt_rank = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        txt_enteredDate = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        txt_ref = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        txt_reportByName = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txt_enteredby = new javax.swing.JTextField();
        JRB_Negative = new javax.swing.JRadioButton();
        JRB_Positive = new javax.swing.JRadioButton();
        lbl_ref = new javax.swing.JLabel();
        txt_reportByID = new javax.swing.JTextField();
        jSeparator10 = new javax.swing.JSeparator();
        btn_clear = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_save = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        jLabel1.setText("Employee Disciplinary Records");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 340, 40));

        txt_search.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txt_search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_searchFocusGained(evt);
            }
        });
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_searchKeyPressed(evt);
            }
        });
        getContentPane().add(txt_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 75, 280, 30));

        jLabel34.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel34.setText("Entered Date :-");
        getContentPane().add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, 90, 20));

        jLabel6.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel6.setText("Employee EPF No.  :-");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, -1, -1));
        getContentPane().add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 920, 10));

        txt_empid.setEditable(false);
        txt_empid.setFont(new java.awt.Font("Georgia", 0, 13)); // NOI18N
        getContentPane().add(txt_empid, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 130, 21));

        txt_empNic.setEditable(false);
        txt_empNic.setFont(new java.awt.Font("Georgia", 0, 13)); // NOI18N
        getContentPane().add(txt_empNic, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 100, 130, 21));
        getContentPane().add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 530, 920, 10));

        txt_rank.setEditable(false);
        txt_rank.setFont(new java.awt.Font("Georgia", 0, 13)); // NOI18N
        getContentPane().add(txt_rank, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 100, 90, 21));

        jLabel8.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel8.setText("Rank :-");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 100, -1, 20));

        jLabel7.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel7.setText("Name :-");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 60, -1, 20));

        txt_name.setEditable(false);
        txt_name.setFont(new java.awt.Font("Georgia", 0, 13)); // NOI18N
        getContentPane().add(txt_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 60, 200, 21));

        jButton2.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jButton2.setText("View Photo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 100, 100, 20));

        jLabel35.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel35.setText("Employee NIC No.  :-");
        getContentPane().add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, -1, -1));

        jLabel36.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel36.setText("Incident Date  :-");
        getContentPane().add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, 20));

        jLabel37.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel37.setText("Report by  :-");
        getContentPane().add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, -1, 20));

        jLabel38.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel38.setText("Incident  :-");
        getContentPane().add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, 20));

        txt_enteredDate.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        getContentPane().add(txt_enteredDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 500, 160, 25));

        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        getContentPane().add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 130, 25));

        txt_ref.setEditable(false);
        txt_ref.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txt_ref.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_refKeyPressed(evt);
            }
        });
        getContentPane().add(txt_ref, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 150, 90, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea1.setForeground(java.awt.Color.gray);
        jTextArea1.setRows(5);
        jTextArea1.setText("English:");
        jTextArea1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextArea1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextArea1FocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 190, 620, 130));

        txt_reportByName.setEditable(false);
        txt_reportByName.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txt_reportByName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_reportByNameKeyPressed(evt);
            }
        });
        getContentPane().add(txt_reportByName, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 150, 220, 25));

        jLabel39.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel39.setText("Entered by  :-");
        getContentPane().add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 500, -1, 20));

        txt_enteredby.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        getContentPane().add(txt_enteredby, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 500, 270, 25));

        buttonGroup1.add(JRB_Negative);
        JRB_Negative.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        JRB_Negative.setText("Negative");
        getContentPane().add(JRB_Negative, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        buttonGroup1.add(JRB_Positive);
        JRB_Positive.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        JRB_Positive.setText("Positive");
        getContentPane().add(JRB_Positive, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, -1, -1));

        lbl_ref.setText("Reference ID");
        getContentPane().add(lbl_ref, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 150, 70, 20));

        txt_reportByID.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        txt_reportByID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_reportByIDKeyPressed(evt);
            }
        });
        getContentPane().add(txt_reportByID, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 150, 100, 25));
        getContentPane().add(jSeparator10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 920, 10));

        btn_clear.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btn_clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Available Updates.png"))); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });
        getContentPane().add(btn_clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 290, 120, 40));

        btn_delete.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btn_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Eraser.png"))); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });
        getContentPane().add(btn_delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 440, 120, 40));

        btn_update.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btn_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Save as.png"))); // NOI18N
        btn_update.setText("Update");
        btn_update.setPreferredSize(new java.awt.Dimension(100, 23));
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        getContentPane().add(btn_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 380, 120, 40));

        btn_save.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/save 1.png"))); // NOI18N
        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });
        getContentPane().add(btn_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 230, 120, 40));

        jLabel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Employee Search (Name/ID) ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Georgia", 0, 12))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 330, 70));

        jLabel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Authorised Users Only", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Georgia", 0, 12))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 350, 180, 140));

        jLabel15.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(204, 0, 0));
        jLabel15.setText("*");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, 30, -1));

        jCheckBox1.setText("Find");
        jCheckBox1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox1StateChanged(evt);
            }
        });
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jCheckBox1MousePressed(evt);
            }
        });
        getContentPane().add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 143, 50, 30));

        jButton1.setText("jButton1");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 500, 20, -1));

        jButton3.setText("jButton3");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 500, 20, -1));

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Iskoola Pota", 0, 16)); // NOI18N
        jTextArea2.setForeground(java.awt.Color.gray);
        jTextArea2.setRows(5);
        jTextArea2.setText("සිංහල ");
        jTextArea2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextArea2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextArea2FocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 720, 160));

        jComboBox1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 180, 140, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_searchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_searchFocusGained

    }//GEN-LAST:event_txt_searchFocusGained

    private void txt_searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {

                Statement st = DbConnection.getconnection().createStatement();
                ResultSet rs = st.executeQuery("select * from employee_reg");
                while (rs.next()) {
                    String code = rs.getString("EPFno");
                    String nic = rs.getString("NIC");
                    String name = rs.getString("NameWithInitials");
                    String surname = rs.getString("Surname");

                    String rank = rs.getString("Designation");

                    byte[] imagedata = rs.getBytes("EMPImage");

                    if (txt_search.getText().equals(code) || txt_search.getText().equals(name) || txt_search.getText().equals(nic) || txt_search.getText().equals(surname)) {

                        if (imagedata == null) {

                            format = new ImageIcon("imagedata");

                        } else {

                            format = new ImageIcon(imagedata);

                        }

                        txt_empid.setText(code);
                        txt_name.setText(name);
                        txt_empNic.setText(nic);

                        txt_rank.setText(rank);

                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_txt_searchKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        photo_test pt = new photo_test();
        pt.lbl_test.setIcon(format);
        pt.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextArea1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea1FocusGained
        find_reference();

        if (jTextArea1.getForeground() == Color.GRAY) {
            jTextArea1.setForeground(Color.BLACK);
            jTextArea1.setText("");
        }

    }//GEN-LAST:event_jTextArea1FocusGained

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        clear();
    }//GEN-LAST:event_btn_clearActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        String userNameValue;
        String passwordValue;

        JLabel jUserName = new JLabel("User Name");
        JTextField userName = new JTextField();
        JLabel jPassword = new JLabel("Password");
        JTextField password = new JPasswordField();
        Object[] ob = {jUserName, userName, jPassword, password};

        int result = JOptionPane.showConfirmDialog(null, ob, "Please Enter User Name & Password to Proceed", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            userNameValue = userName.getText();
            passwordValue = password.getText();

            String uname = null;

            try {
                Statement st1 = DbConnection.getconnection().createStatement();
                ResultSet rs1 = st1.executeQuery("select * from user");
                while (rs1.next()) {
                    uname = rs1.getString("UserName");
                }

                if (uname.equals(userNameValue)) {

                    Statement st2 = DbConnection.getconnection().createStatement();
                    ResultSet rs2 = st2.executeQuery("select * from user where UserName = '" + userName.getText() + "'");

                    while (rs2.next()) {

                        String UN = rs2.getString("UserName");
                        String pass = rs2.getString("Password");
                        String cat = rs2.getString("UserCat");

                        if (UN.equals(userNameValue) & pass.equals(passwordValue)) {

                            if (cat.equals("admin") | cat.equals("system_admin")) {

//update query begins*************************************************************************************************
                                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                String date = sdf.format(jDateChooser1.getDate());

                                Statement st = DbConnection.getconnection().createStatement();
                                st.executeUpdate("delete from emp_discipline  where ReferenceID = '" + txt_ref.getText() + "' ");

                                JOptionPane.showMessageDialog(rootPane, "  Employee Disciplinary Record Successfully Deleted...");
                                clear();
//update query ends ****************************************************************************************************
                            } else {
                                JOptionPane.showMessageDialog(rootPane, " You are NOT ALLOWED for this Operation");
                            }

                        } else {
                            JOptionPane.showMessageDialog(rootPane, " User Name & Password NOT matched");
                        }
                    }
                } else {

                    JOptionPane.showMessageDialog(rootPane, " User Name NOT exist");
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }

    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed

        String userNameValue;
        String passwordValue;

        JLabel jUserName = new JLabel("User Name");
        JTextField userName = new JTextField();
        JLabel jPassword = new JLabel("Password");
        JTextField password = new JPasswordField();
        Object[] ob = {jUserName, userName, jPassword, password};

        int result = JOptionPane.showConfirmDialog(null, ob, "Enter User Name & Password to Proceed", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            userNameValue = userName.getText();
            passwordValue = password.getText();

            String uname = null;

            try {

                Statement st2 = DbConnection.getconnection().createStatement();
                ResultSet rs2 = st2.executeQuery("select * from user where UserName = '" + userName.getText() + "'");

                while (rs2.next()) {

                    String UN = rs2.getString("UserName");
                    String pass = rs2.getString("Password");
                    String cat = rs2.getString("UserCat");

                    if (UN.equals(userNameValue) & pass.equals(passwordValue)) {

                        if (cat.equals("admin") | cat.equals("system_admin")) {

//update query begins*************************************************************************************************
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            String date = sdf.format(jDateChooser1.getDate());

                            String IncidentType;

                            if (JRB_Positive.isSelected()) {
                                IncidentType = "Positive";
                            } else if (JRB_Negative.isSelected()) {
                                IncidentType = "Negative";
                            } else {
                                IncidentType = "Neutral";
                            }

                            Statement st = DbConnection.getconnection().createStatement();
                            st.executeUpdate("update emp_discipline_temp set IncidentDate = '" + date + "', Incident = '" + jTextArea1.getText() + "', ReportedBy = '" + txt_reportByID.getText() + "',IncidentType = '" + IncidentType + "',IncidentSin= where ReferenceID = '" + txt_ref.getText() + "' ");

                            JOptionPane.showMessageDialog(rootPane, "  Employee Disciplinary Record Successfully Updated...");
                            clear();
//update query ends ****************************************************************************************************
                        } else {
                            JOptionPane.showMessageDialog(rootPane, " You are NOT ALLOWED for this Operation");
                        }

                    } else {
                        JOptionPane.showMessageDialog(rootPane, " User Name & Password NOT matched");
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }


    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed

        if (jDateChooser1.getDate() == null | txt_empid.getText().isEmpty() | jTextArea1.getText().isEmpty()) {

            JOptionPane.showMessageDialog(rootPane, "Incident Date / Employee ID & Incident Fields can not be Empty...");

        } else {
            //****************SAVE QUERY***************************
            find_reference();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

            String IncidentType;

            if (JRB_Positive.isSelected()) {
                IncidentType = "Positive";
            } else if (JRB_Negative.isSelected()) {
                IncidentType = "Negative";
            } else {
                IncidentType = "Neutral";
            }

            try {

                Statement st = DbConnection.getconnection().createStatement();
                st.executeUpdate("insert into emp_discipline_temp values ('" + txt_empid.getText() + "','" + date + "','" + jTextArea1.getText() + "','" + txt_reportByID.getText() + "','" + txt_enteredby.getText() + "','" + txt_enteredDate.getText() + "','" + IncidentType + "','" + txt_ref.getText() + "','" + jTextArea2.getText() + "')");

                JOptionPane.showMessageDialog(rootPane, " Employee Disciplinary Record Successfully Saved... ");
                clear();

            } catch (Exception e) {
                e.printStackTrace();
            }

            //****************SAVE QUERY ENDS**********************
        }


    }//GEN-LAST:event_btn_saveActionPerformed

    private void txt_reportByNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_reportByNameKeyPressed

    }//GEN-LAST:event_txt_reportByNameKeyPressed

    private void jCheckBox1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox1StateChanged

//        if (jCheckBox1.isSelected()) {
//            btn_save.setEnabled(false);
//            txt_search.setEditable(false);
//            txt_ref.setEditable(true);
//
//            try {
//
//                Statement st = DbConnection.getconnection().createStatement();
//                ResultSet rs = st.executeQuery("select * from emp_discipline_temp  ");
//
//                TextAutoCompleter ta = new TextAutoCompleter(txt_ref);
//
//                while (rs.next()) {
//                    String code = rs.getString("ReferenceID");
//
//                    ta.addItem(code);
//
//                }
//
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//
//        } else {
//            btn_save.setEnabled(true);
//            txt_search.setEditable(true);
//            txt_ref.setEditable(false);
//            jTextArea1.grabFocus();
//
//        }

    }//GEN-LAST:event_jCheckBox1StateChanged

    private void txt_refKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_refKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            try {
//
//                Statement st = DbConnection.getconnection().createStatement();
//                ResultSet rs = st.executeQuery("select * from emp_discipline_temp where ReferenceID = '" + txt_ref.getText() + "' ");
//                while (rs.next()) {
//                    String code = rs.getString("EPFno");
//                    Date IncidentDate = rs.getDate("IncidentDate");
//                    String Incident = rs.getString("Incident");
//                    String ReportedBy = rs.getString("ReportedBy");
//                    String EnteredBy = rs.getString("EnteredBy");
//                    String EnteredDate = rs.getString("EnteredDate");
//                    String IncidentType = rs.getString("IncidentType");
//
//                    if (IncidentType.equals("Positive")) {
//                        JRB_Positive.setSelected(true);
//                    }
//                    if (IncidentType.equals("Negative")) {
//                        JRB_Negative.setSelected(true);
//                    }
//
//                    txt_empid.setText(code);
//                    jDateChooser1.setDate(IncidentDate);
//                    jTextArea1.setText(Incident);
//                    txt_reportByID.setText(ReportedBy);
//                    txt_enteredby.setText(EnteredBy);
//                    txt_enteredDate.setText(EnteredDate);
//
//                }
//
//                ResultSet rs1 = st.executeQuery("select * from employee_reg where EPFno = '" + txt_empid.getText() + "' ");
//                while (rs1.next()) {
//
//                    String nic = rs1.getString("NIC");
//                    String name = rs1.getString("NameWithInitials");
//                    String rank = rs1.getString("Designation");
//
//                    txt_name.setText(name);
//                    txt_empNic.setText(nic);
//                    txt_rank.setText(rank);
//
//                }
//
//            } catch (Exception e) {
//                e.printStackTrace();
//            }

        }
    }//GEN-LAST:event_txt_refKeyPressed

    private void txt_reportByIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_reportByIDKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {

                Statement st = DbConnection.getconnection().createStatement();
                ResultSet rs = st.executeQuery("select * from employee_reg");
                while (rs.next()) {
                    String code = rs.getString("EPFno");
                    String nic = rs.getString("NIC");
                    String name = rs.getString("NameWithInitials");

                    if (txt_reportByID.getText().equals(code) || txt_reportByID.getText().equals(name) || txt_reportByID.getText().equals(nic)) {

                        txt_reportByID.setText(code);
                        txt_reportByName.setText(name);

                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_txt_reportByIDKeyPressed

    void print() {
        try {
            JRBeanCollectionDataSource bcds = new JRBeanCollectionDataSource(al);
            String path = "Reports\\bean.jrxml";
            JasperReport jr = JasperCompileManager.compileReport(path);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, bcds);
            JasperViewer.viewReport(jp, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// try {
//
//            Connection conn = (Connection) DbConnection.getconnection();
//
//            JasperDesign jd = JRXmlLoader.load("Reports\\DisciplinaryRPT.jrxml");
//            String sql = "SELECT * FROM emp_discipline where ReferenceIDOriginal='" + txt_ref.getText() + "'";
//            JRDesignQuery newQuery = new JRDesignQuery();
//            newQuery.setText(sql);
//            jd.setQuery(newQuery);
//
//            
//            
//            
//            JasperReport jr = JasperCompileManager.compileReport(jd);
//            JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
//            JasperViewer.viewReport(jp, false);
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }  

        String epf = null;
        String Name = null;
        String incident = null;
        String date = null;

        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM emp_discipline ");

            while (rs.next()) {

                epf = rs.getString("EPFno");
                incident = rs.getString("Incident");
                date = rs.getString("IncidentDate");
            }

            ResultSet rs1 = st.executeQuery("SELECT NameWithInitials FROM employee_reg where EPFno='" + epf + "'");
            while (rs1.next()) {

                Name = rs1.getString("NameWithInitials");
            }

            bean_data bd = new bean_data();

            bd.setBean_epf(epf);
            bd.setBean_date(date);
            bd.setBean_incident(incident);
            bd.setBean_Name(Name);

            al.add(bd);

            print();

        } catch (Exception e) {
            e.printStackTrace();
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        String epf = null;
        String Name = null;
        String incident = null;
        String date = null;

        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM emp_discipline ");

            while (rs.next()) {

                epf = rs.getString("EPFno");
                incident = rs.getString("Incident");
                date = rs.getString("IncidentDate");

                Statement st1 = DbConnection.getconnection().createStatement();
                ResultSet rs1 = st1.executeQuery("SELECT NameWithInitials FROM employee_reg where EPFno='" + epf + "'");
                while (rs1.next()) {

                    Name = rs1.getString("NameWithInitials");
                }
                bean_data bd = new bean_data();

                bd.setBean_epf(epf);
                bd.setBean_date(date);
                bd.setBean_incident(incident);
                bd.setBean_Name(Name);
                al.add(bd);
            }

            print();

        } catch (Exception e) {
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextArea2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea2FocusGained
        find_reference();

        if (jTextArea2.getForeground() == Color.GRAY) {
            jTextArea2.setForeground(Color.BLACK);
            jTextArea2.setText("");
        }


    }//GEN-LAST:event_jTextArea2FocusGained

    private void jTextArea2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea2FocusLost
        if (jTextArea2.getText().isEmpty()) {
            jTextArea2.setForeground(Color.GRAY);
            jTextArea2.setText("Sinhala");
        }                   // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea2FocusLost

    private void jTextArea1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea1FocusLost
        if (jTextArea1.getText().isEmpty()) {
            jTextArea1.setForeground(Color.GRAY);
            jTextArea1.setText("English");
        }         // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea1FocusLost

    private void jCheckBox1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MousePressed


    }//GEN-LAST:event_jCheckBox1MousePressed

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        if (jCheckBox1.isSelected()) {
            btn_save.setEnabled(false);
            txt_search.setEditable(false);
            //txt_ref.setEditable(true);
            jComboBox1.setVisible(true);

            try {

                Statement st = DbConnection.getconnection().createStatement();
                ResultSet rs = st.executeQuery("select * from emp_discipline_temp  ");

                // TextAutoCompleter ta = new TextAutoCompleter(txt_ref);
                while (rs.next()) {
                    String code = rs.getString("ReferenceID");

                    jComboBox1.addItem(code);

                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            btn_save.setEnabled(true);
            txt_search.setEditable(true);
            //txt_ref.setEditable(false);
            jTextArea1.grabFocus();
            jComboBox1.setVisible(false);

            clear();

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void jComboBox1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox1PopupMenuWillBecomeInvisible
        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("select * from emp_discipline_temp where ReferenceID = '" + jComboBox1.getSelectedItem().toString() + "' ");
            while (rs.next()) {
                String code = rs.getString("EPFno");
                Date IncidentDate = rs.getDate("IncidentDate");
                String Incident = rs.getString("Incident");
                String ReportedBy = rs.getString("ReportedBy");
                String EnteredBy = rs.getString("EnteredBy");
                String EnteredDate = rs.getString("EnteredDate");
                String IncidentType = rs.getString("IncidentType");
                String IncidentSin = rs.getString("IncidentSin");

                if (IncidentType.equals("Positive")) {
                    JRB_Positive.setSelected(true);
                }
                if (IncidentType.equals("Negative")) {
                    JRB_Negative.setSelected(true);
                }

                txt_empid.setText(code);
                jDateChooser1.setDate(IncidentDate);
                jTextArea1.setText(Incident);
                txt_reportByID.setText(ReportedBy);
                txt_enteredby.setText(EnteredBy);
                txt_enteredDate.setText(EnteredDate);
                jTextArea2.setText(IncidentSin);

                jTextArea2.setForeground(Color.BLACK);
                jTextArea1.setForeground(Color.BLACK);

            }

            ResultSet rs1 = st.executeQuery("select * from employee_reg where EPFno = '" + txt_empid.getText() + "' ");
            while (rs1.next()) {

                String nic = rs1.getString("NIC");
                String name = rs1.getString("NameWithInitials");
                String rank = rs1.getString("Designation");

                txt_name.setText(name);
                txt_empNic.setText(nic);
                txt_rank.setText(rank);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jComboBox1PopupMenuWillBecomeInvisible

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Decsiplinary_Details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Decsiplinary_Details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Decsiplinary_Details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Decsiplinary_Details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Decsiplinary_Details().setVisible(true);
            }
        });
    }

    private void find_reference() {

        if (!jCheckBox1.isSelected()) {
            String empID = txt_empid.getText();
            String refID;

            try {

                Statement st = DbConnection.getconnection().createStatement();
                ResultSet rs = st.executeQuery("select count(EPFno) from emp_discipline_temp");
                while (rs.next()) {

                    int count = Integer.parseInt(rs.getString("count(EPFno)"));

                    if (count == 0) {

                        refID = "1";
                    } else {

                        refID = Integer.toString((count + 1));

                    }

                    txt_ref.setText(empID + "/" + refID + "/" + "Temp");

                }

            } catch (Exception e) {
            }

        } else {
        }

    }

    private void clear() {
        txt_empNic.setText("");
        txt_empid.setText("");

        jDateChooser1.setDate(null);
        JRB_Negative.setSelected(false);
        JRB_Positive.setSelected(false);
        txt_name.setText("");
        txt_rank.setText("");
        txt_reportByID.setText("");
        txt_reportByName.setText("");
        jTextArea1.setText("");
        jTextArea2.setText("");
        txt_ref.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton JRB_Negative;
    private javax.swing.JRadioButton JRB_Positive;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_update;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lbl_ref;
    private javax.swing.JTextField txt_empNic;
    private javax.swing.JTextField txt_empid;
    private javax.swing.JTextField txt_enteredDate;
    private javax.swing.JTextField txt_enteredby;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_rank;
    private javax.swing.JTextField txt_ref;
    private javax.swing.JTextField txt_reportByID;
    private javax.swing.JTextField txt_reportByName;
    private javax.swing.JTextField txt_search;
    // End of variables declaration//GEN-END:variables
}
