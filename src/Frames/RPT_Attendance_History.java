/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import java.awt.Color;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;

import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 * TECHSEED SOLUTIONS
 *
 * @author Sapumal Bandara @ TechSeed Solutions
 */
public class RPT_Attendance_History extends javax.swing.JFrame {

    /**
     * Creates new form RPT_Attendance_History
     */
    public RPT_Attendance_History() {
        initComponents();
        get_Location_Details();
        TitleBar();
    }

    private void TitleBar() {

        this.setTitle("Attendance History");
        //this.setResizable(false);

        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("techseed.png")));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void get_Location_Details() {
        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * from location_reg order by LocName");
            while (rs.next()) {

                Object name = rs.getString("LocName");
                //Object code = rs.getString("LocCode");

                //cmb_defLocation.addItem(code);
                cmb_defLocation.addItem(name);
            }

            AutoCompleteDecorator.decorate(cmb_defLocation);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_RemoveRow1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        from_date = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        cmb_defLocation = new javax.swing.JComboBox();
        txt_locName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_atten = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        btn_RemoveRow2 = new javax.swing.JButton();
        btn_RemoveRow3 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        to_date = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_RemoveRow4 = new javax.swing.JButton();

        btn_RemoveRow1.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        btn_RemoveRow1.setText("Attendance History");
        btn_RemoveRow1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RemoveRow1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        jLabel1.setText("Employee Attendence History");

        from_date.setDateFormatString("dd MMM yyyy");
        from_date.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        from_date.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                from_dateFocusLost(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel9.setText("Location:-");

        cmb_defLocation.setEditable(true);
        cmb_defLocation.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmb_defLocation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=Location=" }));
        cmb_defLocation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmb_defLocationFocusGained(evt);
            }
        });
        cmb_defLocation.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_defLocationPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        txt_locName.setEditable(false);
        txt_locName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_locName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_locNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_locNameFocusLost(evt);
            }
        });

        tbl_atten.setAutoCreateRowSorter(true);
        tbl_atten.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tbl_atten.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "EMP no", "Name", "Date", "Day  ", "Night ", "Half Day", "OT Shift", "OT hrs", "D&N Shift", "Line"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_atten.setRowHeight(25);
        tbl_atten.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_attenMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_atten);
        if (tbl_atten.getColumnModel().getColumnCount() > 0) {
            tbl_atten.getColumnModel().getColumn(2).setPreferredWidth(250);
            tbl_atten.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        btn_RemoveRow2.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        btn_RemoveRow2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Search.png"))); // NOI18N
        btn_RemoveRow2.setText("Search");
        btn_RemoveRow2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RemoveRow2ActionPerformed(evt);
            }
        });

        btn_RemoveRow3.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        btn_RemoveRow3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Refresh.png"))); // NOI18N
        btn_RemoveRow3.setText("Clear");
        btn_RemoveRow3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RemoveRow3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel3.setText("Date To     :- ");

        to_date.setDateFormatString("dd MMM yyyy");
        to_date.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        to_date.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                to_dateFocusLost(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel4.setText("Date From:- ");

        jLabel2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Date Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Georgia", 0, 14))); // NOI18N

        btn_RemoveRow4.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        btn_RemoveRow4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Delete.png"))); // NOI18N
        btn_RemoveRow4.setText("Delete");
        btn_RemoveRow4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RemoveRow4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(from_date, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(710, 710, 710)
                .addComponent(txt_locName, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel4))
            .addGroup(layout.createSequentialGroup()
                .addGap(410, 410, 410)
                .addComponent(btn_RemoveRow2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel3))
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(to_date, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(320, 320, 320)
                .addComponent(cmb_defLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(btn_RemoveRow3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(jLabel9))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jSeparator1))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_RemoveRow4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(from_date, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(txt_locName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(btn_RemoveRow2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(to_date, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(cmb_defLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(btn_RemoveRow3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(btn_RemoveRow4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void from_dateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_from_dateFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_from_dateFocusLost

    private void cmb_defLocationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_defLocationFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_defLocationFocusGained

    private void cmb_defLocationPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_defLocationPopupMenuWillBecomeInvisible

        if (cmb_defLocation.getSelectedItem().equals("=Location=")) {

            txt_locName.setText("** Please Select a Location ");
            txt_locName.setForeground(Color.red);

        } else {
            txt_locName.setForeground(Color.black);
            try {

                Statement st = DbConnection.getconnection().createStatement();
                ResultSet rs = st.executeQuery("SELECT * from location_reg where LocCode= '" + cmb_defLocation.getSelectedItem().toString() + "' OR LocName= '" + cmb_defLocation.getSelectedItem().toString() + "' ");
                while (rs.next()) {

                    String code = rs.getString("LocCode");
                    String name = rs.getString("LocName");

                    cmb_defLocation.setSelectedItem(name);
                    txt_locName.setText(code);
                }

                cmb_defLocation.setEditable(false);
//                cmb_defLocation.setEnabled(false);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

    }//GEN-LAST:event_cmb_defLocationPopupMenuWillBecomeInvisible

    private void txt_locNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_locNameFocusGained
        // get_carder_and_enterd_shifts_total();//
        // TODO add your handling code here:


    }//GEN-LAST:event_txt_locNameFocusGained

    private void txt_locNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_locNameFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_locNameFocusLost

    private void tbl_attenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_attenMouseClicked

    }//GEN-LAST:event_tbl_attenMouseClicked

    private void btn_RemoveRow1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RemoveRow1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_RemoveRow1ActionPerformed

    private void btn_RemoveRow2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RemoveRow2ActionPerformed
//
//        Thread hilo = new Thread(new Runnable() {
//
//            @Override
//            public void run() {
//
//                btn_RemoveRow2.setEnabled(false);
//
//                if (from_date == null | to_date == null | txt_locName.getText().isEmpty()) {
//
//                } else {
//
//                    try {
//                        System.out.println("start");
//                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//                        String FromDate = sdf.format(from_date.getDate());
//                        String ToDate = sdf.format(to_date.getDate());
//
//                        Connection con = DbConnection.getconnection();
//                        PreparedStatement pst;
//                        ResultSet rs;
//
//                        String sql = "select * from emp_atten_main att join employee_reg emp on att.EPFno=emp.EmployeeNo where  att.Location = '" + txt_locName.getText() + "' and att.Date between '" + FromDate + "' and '" + ToDate + "' ";
//                        pst = con.prepareStatement(sql);
//                        rs = pst.executeQuery();
//
//                        DefaultTableModel dtm = (DefaultTableModel) tbl_atten.getModel();
//                        dtm.setRowCount(0);
//System.out.println("before while");
//                        while (rs.next()) {
//System.out.println("in while");
//                            Vector v = new Vector();
//
//                            v.add(rs.getString("att.EffectiveRank"));
//                            v.add(rs.getString("att.EPFno"));
//                            v.add(rs.getString("emp.NameWithInitials"));
//                            v.add(rs.getString("att.Date"));
//                            v.add(rs.getString("att.DayShift"));
//                            v.add(rs.getString("att.NightShift"));
//                            v.add(rs.getString("att.HalfDayShift"));
//                            v.add(rs.getString("att.OTShift"));
//                            v.add(rs.getString("att.OTHours"));
//                            v.add(rs.getString("att.DNShift"));
//                            v.add(rs.getString("att.Line"));
//
//                            dtm.addRow(v);
//
//                        }
//                        btn_RemoveRow2.setEnabled(true);
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                        JOptionPane.showMessageDialog(rootPane, e);
//                    }
//
//                }
//
//            }
//        });
//        hilo.start();

        Thread hilo = new Thread(new Runnable() {

            @Override
            public void run() {

                btn_RemoveRow2.setEnabled(false);

                if (from_date == null | to_date == null | txt_locName.getText().isEmpty()) {

                } else {

                    try {
                        System.out.println("start");
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                        String FromDate = sdf.format(from_date.getDate());
                        String ToDate = sdf.format(to_date.getDate());

                        Connection con = DbConnection.getconnection();
                        PreparedStatement pst;
                        ResultSet rs;

                        String sql = "select * from emp_atten_main  where  Location = '" + txt_locName.getText() + "' and Date between '" + FromDate + "' and '" + ToDate + "' ";
                        pst = con.prepareStatement(sql);
                        rs = pst.executeQuery();

                        DefaultTableModel dtm = (DefaultTableModel) tbl_atten.getModel();
                        dtm.setRowCount(0);
                        System.out.println("before while");
                        while (rs.next()) {
                            System.out.println("in while");
                            Vector v = new Vector();
                            String epf = rs.getString("EPFno");

                            v.add(rs.getString("EffectiveRank"));
                            v.add(epf);
                            v.add("");
                            v.add(rs.getString("Date"));
                            v.add(rs.getString("DayShift"));
                            v.add(rs.getString("NightShift"));
                            v.add(rs.getString("HalfDayShift"));
                            v.add(rs.getString("OTShift"));
                            v.add(rs.getString("OTHours"));
                            v.add(rs.getString("DNShift"));
                            v.add(rs.getString("Line"));

                            dtm.addRow(v);

                            

                        }
                        
                        int row_cont = tbl_atten.getRowCount();
                        for (int i = 0; i < row_cont; i++) {
                            
                            String empno = tbl_atten.getValueAt(i, 1).toString();
                            String sql2 = "select NameWithInitials from employee_reg where EmployeeNo='" + empno + "'";
                            PreparedStatement pst2 = con.prepareStatement(sql2);
                            ResultSet rs2 = pst2.executeQuery();
                            while(rs2.next()){
                            tbl_atten.setValueAt(rs2.getString(1), i, 2);
                            }
                            
                        }
                        
                        
                        btn_RemoveRow2.setEnabled(true);
                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(rootPane, e);
                    }

                }

            }
        });
        hilo.start();

    }//GEN-LAST:event_btn_RemoveRow2ActionPerformed

    private void btn_RemoveRow3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RemoveRow3ActionPerformed
        int reply = JOptionPane.showConfirmDialog(rootPane, "Do you want to clear?", "Clear", JOptionPane.YES_NO_OPTION);

        if (reply == JOptionPane.YES_OPTION) {
//         cmb_defLocation.setEditable(true);   

            DefaultTableModel dtm = (DefaultTableModel) tbl_atten.getModel();
            dtm.setRowCount(0);

        }        // TODO add your handling code here:
    }//GEN-LAST:event_btn_RemoveRow3ActionPerformed

    private void to_dateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_to_dateFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_to_dateFocusLost

    private void btn_RemoveRow4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RemoveRow4ActionPerformed

        if (tbl_atten.getRowCount() < 1) {
            JOptionPane.showMessageDialog(rootPane, "No Data to Delete..!");
        } else {

            int result1 = JOptionPane.showConfirmDialog(rootPane, "Do yo want to DELETE this Selected Row?", "DELETE", JOptionPane.YES_NO_OPTION);
            if (result1 == JOptionPane.YES_OPTION) {

                String userNameValue;
                String passwordValue;

                JLabel jUserName = new JLabel("User Name");
                JTextField userName = new JTextField();
                JLabel jPassword = new JLabel("Password");
                JTextField password = new JPasswordField();

                Object[] ob = {jUserName, userName, jPassword, password};

                //   Object[] ob = {jUserName, userName, jPassword, password};
                int result = JOptionPane.showConfirmDialog(null, ob, "Please input password", JOptionPane.OK_CANCEL_OPTION);

                if (result == JOptionPane.OK_OPTION) {
                    userNameValue = userName.getText();
                    passwordValue = password.getText();

                    try {
                        Statement st2 = DbConnection.getconnection().createStatement();
                        ResultSet rs2 = st2.executeQuery("select * from user where UserName = '" + userName.getText() + "'");

                        while (rs2.next()) {

                            String UN = rs2.getString("UserName");
                            String pass = rs2.getString("Password");
                            String cat = rs2.getString("UserCat");

                            if (UN.equals(userNameValue) & pass.equals(passwordValue)) {

                                if (cat.equals("admin") | cat.equals("system_admin")) {

//update query begins*************************************************************************************************
                                    String date = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 3).toString();
                                    String emp = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 1).toString();

                                    String day = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 4).toString();
                                    String night = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 5).toString();
                                    String half = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 6).toString();
                                    String otshift = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 7).toString();
                                    String dn = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 9).toString();
                                    String othrs = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 8).toString();
                                    String line = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 10).toString();

//                                    String otrate = tbl_atten.getValueAt(tbl_atten.getSelectedRow(), 9).toString();
                                    Connection con = DbConnection.getconnection();
                                    PreparedStatement pst = con.prepareStatement("delete from emp_atten_main where Line='" + line + "'");
                                    pst.execute();

//                                    PreparedStatement pst1 = con.prepareStatement("insert into  delete_from_emp_atten_main values('" + emp + "','" + txt_locName.getText() + "',"
//                                            + "'" + date + "','" + day + "','" + night + "','" + half + "','" + rank + "','" + rate + "','" + ot + "','" + otrate + "')");
//                                    pst1.execute();
                                    DefaultTableModel dtm = (DefaultTableModel) tbl_atten.getModel();
                                    dtm.removeRow(tbl_atten.getSelectedRow());

                                    JOptionPane.showMessageDialog(rootPane, "Deleted...!");
//update query ends ****************************************************************************************************
                                } else {
                                    JOptionPane.showMessageDialog(rootPane, " You are NOT ALLOWED for this Operation");
                                }

                            } else {
                                JOptionPane.showMessageDialog(rootPane, " User Name & Password NOT matched");
                            }
                        }

                    } catch (Exception n) {
                        n.printStackTrace();
                    }

                }
            } else {

            }
        }
    }//GEN-LAST:event_btn_RemoveRow4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//*************************Developed By TechSeed Solutions*************************************************
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RPT_Attendance_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RPT_Attendance_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RPT_Attendance_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RPT_Attendance_History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RPT_Attendance_History().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_RemoveRow1;
    private javax.swing.JButton btn_RemoveRow2;
    private javax.swing.JButton btn_RemoveRow3;
    private javax.swing.JButton btn_RemoveRow4;
    private javax.swing.JComboBox cmb_defLocation;
    private com.toedter.calendar.JDateChooser from_date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tbl_atten;
    private com.toedter.calendar.JDateChooser to_date;
    private javax.swing.JTextField txt_locName;
    // End of variables declaration//GEN-END:variables

}
