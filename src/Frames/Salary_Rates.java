/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 * TECHSEED SOLUTIONS
 *
 * @author Sapumal Bandara @ TechSeed Solutions
 */
public class Salary_Rates extends javax.swing.JFrame {

    /**
     * Creates new form Salary_Rates
     */
    public Salary_Rates() {
        initComponents();
        get_Location_Details();
        get_Ranks();

        jTable1.getTableHeader().setDefaultRenderer(new Table_Header.HeaderColor());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void get_Location_Details() {
        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * from location_reg order by LocName");
            while (rs.next()) {

                Object name = rs.getString("LocName");
                //Object code = rs.getString("LocCode");

                //cmb_defLocation.addItem(code);
                cmb_defLocation.addItem(name);
            }

            AutoCompleteDecorator.decorate(cmb_defLocation);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void get_Ranks() {
        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * from rank order by RankName");
            while (rs.next()) {

                Object name = rs.getString("RankName");
                // String code = rs.getString("RankCode");

                //cmb_defLocation.addItem(code);
                cmb_rank.addItem(name);
            }

            //AutoCompleteDecorator.decorate(cmb_defLocation);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmb_defLocation = new javax.swing.JComboBox();
        txt_locCode = new javax.swing.JTextField();
        jSeparator8 = new javax.swing.JSeparator();
        jButton11 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        jButton17 = new javax.swing.JButton();
        cmb_rank = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        txt_rankCode = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        jLabel1.setText("Salary Rates");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 240, 40));

        jLabel9.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel9.setText("Location :-");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 40));

        cmb_defLocation.setEditable(true);
        cmb_defLocation.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmb_defLocation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=Location=" }));
        cmb_defLocation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmb_defLocationFocusGained(evt);
            }
        });
        cmb_defLocation.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                cmb_defLocationPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_defLocationPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_defLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 390, -1));

        txt_locCode.setEditable(false);
        txt_locCode.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_locCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_locCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_locCodeFocusLost(evt);
            }
        });
        getContentPane().add(txt_locCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 60, 90, 23));
        getContentPane().add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, 1290, 10));

        jButton11.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Available Updates.png"))); // NOI18N
        jButton11.setText("Clear");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 380, 170, 50));

        jButton14.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Save.png"))); // NOI18N
        jButton14.setText("Save");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 150, 50));
        getContentPane().add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1290, 10));

        jButton17.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Minus-30.png"))); // NOI18N
        jButton17.setText("Remove");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton17, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 380, 120, 50));

        cmb_rank.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmb_rank.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmb_rankFocusGained(evt);
            }
        });
        cmb_rank.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_rankPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_rank, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 60, 210, -1));

        jLabel10.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jLabel10.setText("Rank :-");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 50, -1, 40));

        txt_rankCode.setEditable(false);
        txt_rankCode.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_rankCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_rankCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_rankCodeFocusLost(evt);
            }
        });
        getContentPane().add(txt_rankCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 60, 70, 23));

        jButton1.setText("Add to Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 60, -1, -1));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Rank Name", "Basic per Day", "Max. Shifts for Basic", "Actual Basic", "BRA Per Day", "Max. Shifts for BRA", "Sunday Rate", "Poya Rate", "OT Rate per Hour", "Advance Amount", "Unit Day Rate", "Unit Night Rate", "Day&Night Rate", "Unit Day Rate 2", "Max Shifts fr AA", "Extra Shift Rate", "Welfare", "Special Shift Rate", "Min Shifts for SSR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setRowHeight(25);
        jTable1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(9).setPreferredWidth(110);
            jTable1.getColumnModel().getColumn(10).setPreferredWidth(110);
            jTable1.getColumnModel().getColumn(11).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(12).setPreferredWidth(110);
            jTable1.getColumnModel().getColumn(13).setPreferredWidth(110);
            jTable1.getColumnModel().getColumn(14).setPreferredWidth(110);
            jTable1.getColumnModel().getColumn(15).setResizable(false);
            jTable1.getColumnModel().getColumn(15).setPreferredWidth(1);
            jTable1.getColumnModel().getColumn(16).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(17).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(18).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(19).setPreferredWidth(100);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 1270, 250));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmb_defLocationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_defLocationFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_defLocationFocusGained

    private void cmb_defLocationPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_defLocationPopupMenuWillBecomeInvisible

        if (cmb_defLocation.getSelectedItem().equals("=Location=")) {

            txt_locCode.setText("** Please Select a Location ");
            txt_locCode.setForeground(Color.red);

        } else {
            txt_locCode.setForeground(Color.black);
            try {

                Statement st = DbConnection.getconnection().createStatement();
                ResultSet rs = st.executeQuery("SELECT * from location_reg where LocCode= '" + cmb_defLocation.getSelectedItem().toString() + "' OR LocName= '" + cmb_defLocation.getSelectedItem().toString() + "' ");
                while (rs.next()) {

                    String code = rs.getString("LocCode");
                    String name = rs.getString("LocName");

                    cmb_defLocation.setSelectedItem(name);
                    txt_locCode.setText(code);
                }

//                ResultSet rs1 = st.executeQuery("select * from location_shift_rates where LocCode= '" + txt_locCode.getText() + "' ");
//
//                while (rs1.next()) {
//
//                    String rank = rs1.getString("Rank");
//
//                }
                cmb_defLocation.setEditable(false);
                cmb_defLocation.setEnabled(false);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        String s = txt_locCode.getText();

        if (s.equals("** Please Select a Location ") | s.isEmpty()) {

        } else {

            get_saved_rates();

        }

    }//GEN-LAST:event_cmb_defLocationPopupMenuWillBecomeInvisible

    private void txt_locCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_locCodeFocusGained
        // get_carder_and_enterd_shifts_total();//
        // TODO add your handling code here:

    }//GEN-LAST:event_txt_locCodeFocusGained

    private void txt_locCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_locCodeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_locCodeFocusLost

    private void get_saved_rates() {

        try {
            Connection con = DbConnection.getconnection();

            String sql = "select *,count(*) from salary_rates where LocCode='" + txt_locCode.getText() + "'";

            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);

            while (rs.next()) {
                int count = rs.getInt("count(*)");

                if (count == 0) {
                    //get empty data
                    String sql1 = "select * from rank";

                    PreparedStatement pst1 = con.prepareStatement(sql1);
                    ResultSet rs1 = pst1.executeQuery();

                    while (rs1.next()) {

                        Vector v = new Vector();
                        v.add(rs1.getString("RankCode"));
                        v.add(rs1.getString("RankName"));
                        v.add("0.00");
                        v.add("0.00");
                        v.add("0.00");
                        v.add("140.00");
                        v.add("25");

                        dtm.addRow(v);

                    }

                    // *****
                } else {

                    String sql2 = "select *  from salary_rates where LocCode='" + txt_locCode.getText() + "'";

                    PreparedStatement pst2 = con.prepareStatement(sql2);
                    ResultSet rs2 = pst2.executeQuery();
                    while (rs2.next()) {

                        Vector v = new Vector();
                        v.add(rs2.getString("RankCode"));
                        v.add(rs2.getString("Rank"));
                        String s = rs2.getString("MinDayRate");
                        v.add(s);

                        v.add(rs2.getString("MaxShiftsPerMonth"));
                        v.add(rs2.getString("ActualBasic"));

                        v.add(rs2.getString("BRAPerDay"));
                        v.add(rs2.getString("MaxShiftsForBRA"));
                        v.add(rs2.getString("Sunday"));
                        v.add(rs2.getString("Poyaday"));
                        v.add(rs2.getString("OTRate"));
                        v.add(rs2.getString("Advance"));

                        v.add(rs2.getString("DayRate"));
                        v.add(rs2.getString("NightRate"));
                        v.add(rs2.getString("DNRate"));
                        v.add(rs2.getString("DayRate_Two"));
                        v.add(rs2.getString("MaxShiftsAA"));
                        v.add(rs2.getString("ExtraShiftRate"));
                        v.add(rs2.getString("Welfare"));
                        v.add(rs2.getString("SpecialShiftRate"));
                        v.add(rs2.getString("minForSPR"));

                        dtm.addRow(v);
                    }

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void calc_basic() {
        int row_count = jTable1.getRowCount();

        if (row_count <= 0) {

        } else {

            for (int row = 0; row < row_count; row++) {

                String Basic = "0.00";
                if (jTable1.getValueAt(row, 2) == null | jTable1.getValueAt(row, 3) == null) {
                    Basic = "0.00";
                    jTable1.setValueAt(Basic, row, 4);
                } else {

                    Double day_rate = Double.parseDouble(jTable1.getValueAt(row, 2).toString());
                    Double max_shifts = Double.parseDouble(jTable1.getValueAt(row, 3).toString());
                    Double basic = day_rate * max_shifts;

                    Basic = String.format("%.2f", (basic));
                    jTable1.setValueAt(Basic, row, 4);
                }

            }
        }
    }

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        cmb_defLocation.setEditable(true);
        cmb_defLocation.setEnabled(true);
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        txt_locCode.setText("");
        cmb_defLocation.setSelectedIndex(0);

    }//GEN-LAST:event_jButton11ActionPerformed

    private void delete_previous_data() {
        try {

            Connection con = DbConnection.getconnection();

            String sql = "delete from salary_rates where LocCode='" + txt_locCode.getText() + "'";

            PreparedStatement pst = con.prepareStatement(sql);
            pst.execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
//        try {
//            delete_previous_data();
//            Connection con = DbConnection.getconnection();
//
//            String sql = "INSERT INTO salary_rates (RankCode,Rank,MinDayRate,MaxShiftsPerMonth,BRAPerDay,MaxShiftsForBRA,Sunday,Poyaday,OTRate,Advance,LocCode,MinNightRate,Basic) values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
//
//            PreparedStatement pst = con.prepareStatement(sql);
//
//            int row_count = jTable1.getRowCount();
//
//            for (int row = 0; row < row_count; row++) {
//
//                String code = jTable1.getValueAt(row, 0).toString();
//                String rank = jTable1.getValueAt(row, 1).toString();
//
////                String MinDayRate = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 2).toString()));
//                String MinDayRate = jTable1.getValueAt(row, 2).toString();
//
//                if (MinDayRate == null) {
//
//                    MinDayRate = "0.00";
//                }
//
//                String MinNightRate = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 3).toString()));
//                String MaxShifts = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 4).toString()));
//                String BRAperDay = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 5).toString()));
//                String MaxforBRA = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 6).toString()));
//                String Sunday = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 7).toString()));
//                String poya = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 8).toString()));
//                String OT = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 9).toString()));
//                String Advance = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 10).toString()));
//                String Basic = String.format("%.2f", Double.parseDouble(jTable1.getValueAt(row, 11).toString()));
//                String loc = txt_locCode.getText();
//
//                // Double DayRate ="%.2f", Double.parseDouble(jTable1.getValueAt(row, 2).toString();
//                pst.setString(1, code);
//                pst.setString(2, rank);
//                pst.setString(3, MinDayRate);
//                pst.setString(4, MaxShifts);
//                pst.setString(5, BRAperDay);
//                pst.setString(6, MaxforBRA);
//                pst.setString(7, Sunday);
//                pst.setString(8, poya);
//                pst.setString(9, OT);
//                pst.setString(10, Advance);
//                pst.setString(11, loc);
//                pst.setString(12, MinNightRate);
//                pst.setString(13, Basic);
//
//                pst.addBatch();
//            }
//
//            pst.executeBatch();
//
//            JOptionPane.showMessageDialog(rootPane, "Salary Rates Saved...!");
//
//            cmb_defLocation.setEditable(true);
//            cmb_defLocation.setEnabled(true);
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(rootPane, "Data Feilds Can not be Empty.Please Re-Check the Table");
//        }

        try {
            delete_previous_data();
            //calc_basic();

            Connection con = DbConnection.getconnection();

            String sql = "INSERT INTO salary_rates  values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            PreparedStatement pst = con.prepareStatement(sql);

            int row_count = jTable1.getRowCount();

            for (int row = 0; row < row_count; row++) {

                String code = jTable1.getValueAt(row, 0).toString();

                String rank = jTable1.getValueAt(row, 1).toString();

                Object dayRate = jTable1.getValueAt(row, 2);
                String MinDayRate = "0.00";
                if (dayRate == null) {
                    MinDayRate = "0.00";
                } else {
                    MinDayRate = String.format("%.2f", Double.parseDouble(dayRate.toString()));
                }

//               
                Object maxShifts = jTable1.getValueAt(row, 3);
                String MaxShifts = "0.00";
                if (maxShifts == null) {
                    MaxShifts = "0.00";
                } else {
                    MaxShifts = String.format("%.2f", Double.parseDouble(maxShifts.toString()));
                }

                Object actualbasic = jTable1.getValueAt(row, 4);
                String ActualBasic = "0.00";
                if (actualbasic == null) {
                    ActualBasic = "0.00";
                } else {
                    ActualBasic = String.format("%.2f", Double.parseDouble(actualbasic.toString()));
                }

                Object bra = jTable1.getValueAt(row, 5);
                String BRAperDay = "0.00";
                if (bra == null) {
                    BRAperDay = "0.00";
                } else {
                    BRAperDay = String.format("%.2f", Double.parseDouble(bra.toString()));
                }

                Object braMaxShifts = jTable1.getValueAt(row, 6);
                String MaxforBRA = "0.00";
                if (braMaxShifts == null) {
                    MaxforBRA = "0.00";
                } else {
                    MaxforBRA = String.format("%.2f", Double.parseDouble(braMaxShifts.toString()));
                }

                Object sun = jTable1.getValueAt(row, 7);
                String Sunday = "0.00";
                if (sun == null) {
                    Sunday = "0.00";
                } else {
                    Sunday = String.format("%.2f", Double.parseDouble(sun.toString()));
                }

                Object poyday = jTable1.getValueAt(row, 8);
                String poya = "0.00";
                if (poyday == null) {
                    poya = "0.00";
                } else {
                    poya = String.format("%.2f", Double.parseDouble(poyday.toString()));
                }

                Object ot = jTable1.getValueAt(row, 9);
                String OT = "0.00";
                if (ot == null) {
                    OT = "0.00";
                } else {
                    OT = String.format("%.2f", Double.parseDouble(ot.toString()));
                }

                Object adv = jTable1.getValueAt(row, 10);
                String Advance = "0.00";
                if (adv == null) {
                    Advance = "0.00";
                } else {
                    Advance = String.format("%.2f", Double.parseDouble(adv.toString()));
                }

                Object day = jTable1.getValueAt(row, 11);
                String Day = "0.00";
                if (day == null) {
                    Day = "0.00";
                } else {
                    Day = String.format("%.2f", Double.parseDouble(day.toString()));
                }

                Object night = jTable1.getValueAt(row, 12);
                String Night = "0.00";
                if (night == null) {
                    Night = "0.00";
                } else {
                    Night = String.format("%.2f", Double.parseDouble(night.toString()));
                }

                Object dn = jTable1.getValueAt(row, 13);
                String DN = "0.00";
                if (dn == null) {
                    DN = "0.00";
                } else {
                    DN = String.format("%.2f", Double.parseDouble(dn.toString()));
                }

                Object aa_amt = jTable1.getValueAt(row, 14);
                String AA_AMT = "0.00";
                if (aa_amt == null) {
                    AA_AMT = "0.00";
                } else {
                    AA_AMT = String.format("%.2f", Double.parseDouble(aa_amt.toString()));
                }

                Object aa_shift = jTable1.getValueAt(row, 15);
                String AA_shift = "0.0";
                if (aa_shift == null) {
                    AA_shift = "0.0";
                } else {
                    AA_shift = String.format("%.2f", Double.parseDouble(aa_shift.toString()));
                }

                Object extra_shift = jTable1.getValueAt(row, 16);
                String EXTRA_shift = "0.0";
                if (extra_shift == null) {
                    EXTRA_shift = "0.0";
                } else {
                    EXTRA_shift = String.format("%.2f", Double.parseDouble(extra_shift.toString()));
                }

                Object wel = jTable1.getValueAt(row, 17);
                String WELFARE = "0.0";
                if (wel == null) {
                    WELFARE = "0.0";
                } else {
                    WELFARE = String.format("%.2f", Double.parseDouble(wel.toString()));
                }

                Object spr = jTable1.getValueAt(row, 18);
                String SPR = "0.0";
                if (spr == null) {
                    SPR = "0.0";
                } else {
                    SPR = String.format("%.2f", Double.parseDouble(spr.toString()));
                }

                Object min_for_spr = jTable1.getValueAt(row, 19);
                String MIN_for_SPR = "0.0";
                if (min_for_spr == null) {
                    MIN_for_SPR = "0.0";
                } else {
                    MIN_for_SPR = String.format("%.2f", Double.parseDouble(min_for_spr.toString()));
                }

                String loc = txt_locCode.getText();

                pst.setString(1, code);
                pst.setString(2, rank);
                pst.setString(3, MinDayRate);
                pst.setString(4, MaxShifts);
                pst.setString(5, BRAperDay);
                pst.setString(6, MaxforBRA);
                pst.setString(7, Sunday);
                pst.setString(8, poya);
                pst.setString(9, OT);
                pst.setString(10, Advance);
                pst.setString(11, loc);
                pst.setString(12, ActualBasic);
                pst.setString(13, Day);
                pst.setString(14, Night);
                pst.setString(15, DN);
                pst.setString(16, AA_AMT);
                pst.setString(17, AA_shift);
                pst.setString(18, EXTRA_shift);
                pst.setString(19, WELFARE);
                pst.setString(20, SPR);
                pst.setString(21, MIN_for_SPR);

                pst.addBatch();
            }

            pst.executeBatch();

            JOptionPane.showMessageDialog(rootPane, "Salary Rates Saved...!");

            cmb_defLocation.setEditable(true);
            cmb_defLocation.setEnabled(true);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Data Feilds Can not be Empty.Please Re-Check the Table");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        try {

            if (jTable1.getSelectedRowCount() < 1) {

            } else {
                int row = jTable1.getSelectedRow();

                int reply = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete selected row?", null, JOptionPane.YES_NO_OPTION);

                if (reply == JOptionPane.YES_OPTION) {

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.removeRow(jTable1.getSelectedRow());

                } else {

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
        calc_basic();      // TODO add your handling code here:
    }//GEN-LAST:event_jTable1FocusGained

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_RIGHT) {
        calc_basic();

//        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyPressed

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
        //calc_basic();        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyTyped

    private void jTable1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable1AncestorAdded
        //calc_basic();        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1AncestorAdded

    private void cmb_rankFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_rankFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_rankFocusGained

    private void cmb_rankPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_rankPopupMenuWillBecomeInvisible
        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * from rank where RankName='" + cmb_rank.getSelectedItem().toString() + "'");
            while (rs.next()) {

                //  Object name = rs.getString("RankName");
                String code = rs.getString("RankCode");

                //cmb_defLocation.addItem(code);
                txt_rankCode.setText(code);
            }

            //AutoCompleteDecorator.decorate(cmb_defLocation);
        } catch (Exception e) {
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_rankPopupMenuWillBecomeInvisible

    private void txt_rankCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_rankCodeFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_rankCodeFocusGained

    private void txt_rankCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_rankCodeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_rankCodeFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (txt_rankCode.getText().isEmpty()) {
        } else {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            Vector v = new Vector();
            v.add(txt_rankCode.getText());
            v.add(cmb_rank.getSelectedItem().toString());
            v.add("0.00");
            v.add("0.00");
            v.add("0.00");
            v.add("140.00");
            v.add("25");
            dtm.addRow(v);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmb_defLocationPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_defLocationPopupMenuCanceled
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_defLocationPopupMenuCanceled

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//*************************Developed By TechSeed Solutions*************************************************
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Salary_Rates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Salary_Rates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Salary_Rates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Salary_Rates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Salary_Rates().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmb_defLocation;
    private javax.swing.JComboBox cmb_rank;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton17;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txt_locCode;
    private javax.swing.JTextField txt_rankCode;
    // End of variables declaration//GEN-END:variables

    private void get_salary_rates() {
        try {
            Connection con = DbConnection.getconnection();

            int rowcount = jTable1.getRowCount();
            for (int i = 0; rowcount > i; i++) {

                String loc = jTable1.getModel().getValueAt(i, 1).toString();
                String rank = jTable1.getModel().getValueAt(i, 14).toString();

                String sql = "select * from salary_rates where LocCode='" + loc + "' and RankCode='" + rank + "'";
                PreparedStatement pst = con.prepareStatement(sql);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {

                    jTable1.getModel().setValueAt(rs.getString(""), rowcount, ICONIFIED);

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

}
