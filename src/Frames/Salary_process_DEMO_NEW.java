/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

//import static Frames.MAIN.lbl_current_date;
//import com.sun.org.glassfish.external.arc.Taxonomy;
import java.awt.Color;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;
import java.util.TimeZone;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sapu
 */
public class Salary_process_DEMO_NEW extends javax.swing.JFrame {

    /**
     * Creates new form Salary_process
     */
    public Salary_process_DEMO_NEW() {
        initComponents();
        Date d = new Date();
        SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
        lbl_current_date.setText("" + ft.format(d));

        lbl_atten.setVisible(false);

        TitleBar();

    }

//    private void get_Location_Details() {
//        try {
//            
//            Statement st = DbConnection.getconnection().createStatement();
//            ResultSet rs = st.executeQuery("SELECT * from location_reg order by LocName");
//            while (rs.next()) {
//                
//                Object name = rs.getString("LocName");
//                //Object code = rs.getString("LocCode");
//
//                //cmb_defLocation.addItem(code);
//                cmb_defLocation.addItem(name);
//            }
//            
//            AutoCompleteDecorator.decorate(cmb_defLocation);
//            
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        
//    }
    private void TitleBar() {
        this.setTitle("Salary Process");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("techseed.png")));

    }

    Double max_days = null;
    Double regular_shift = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void GUARDS_SALARY_OLD_FORMULA_Original() {

        long start = System.currentTimeMillis();

        Date Date = jDateChooser1.getDate();

        if (Date == null) {

            JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");

        } else {

            salary_ReSet();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

//Earnings
            String Final_Basic = "0.00";
            String Final_BR = "0.00";
            String Final_TaxEarn = "0.00";
            String Final_OThrsAmt = "0.00";
            String Final_SiteIntensive = "0.00";
            String ShiftIntensive = "0.00";

            String NoOfSundays = "0.00";
            String AmtperSunday = "0.00";
            String TotalAmtSunday = "0.00";
            String Poyaday = "0.00";
            String MC = "0.00";
            String Other = "0.00";

            String Final_Gross = "0.00";

            //Deductions
            String Final_Loan_Rental = "0.00";
            String Final_Loan02_Rental = "0.00";
            String Final_Advance01_Rental = "0.00";
            String Final_Advance02_Rental = "0.00";
            String Final_FestivalAdvance_Rental = "0.00";
            String Final_Uniform_Rental = "0.00";
            String Final_Shoe_Rental = "0.00";

            String Final_Welfare = "0.00";
            String Final_Meal = "0.00";
            String Final_Fines = "0.00";
            String Final_Rental = "0.00";
            String Final_LessShift = "0.00";
            String Final_OtherDeductions = "0.00";
            String Final_PaidSalary = "0.00";
            String Final_Insuarance = "0.00";
            String Final_Death = "0.00";

            String Final_Total_Deductions = "0.00";

            //Double
            Double Total_Deductions = 0.00;
            Double gross = 0.00;

            //EFP & ETF
            String Final_Employee_EPF = "0.00";
            String Final_Employer_ETF = "0.00";
            String Final_Employer_EPF = "0.00";

            Double etf_employer = 0.00;
            Double epf_employer = 0.00;
            Double epf_employee = 0.00;

            //
            String Final_Net_Salary = "0.00";
            String Final_OT_HOURS = "0.00";
            String Final_GrandTotal = "0.00";
            String Distress_BalanceAmt = "0.00";
            String Distress_BalanceAmt02 = "0.00";

            String TotalShitsWorked = "0.00";
            String EmpName = "";
            String EmpRank = "";
            String EmpLocation = "";
            String EmpCompany = "";
            String ComAddress = "";
            String ComName = "";
            String LocType = "";

//            Double RC__shift_tot = 0.00;
//            Double normal_shift_total = 0.00;
            Double WorkedShiftAmount = 0.00;

            Double Welfare = 0.00;
            String EMP_no = "";
            String EPF_no = "";

            Double MCAllowance = 0.00;
//            String mcAllow = "";

            try {

                Statement st_main = DbConnection.getconnection().createStatement();
                ResultSet rs_main = st_main.executeQuery("Select * from emp_atten_main where Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' and Status= 'processed' and SalaryStatus='salary_pending' and Company='EAGLE' group by EmployeeNo");
                while (rs_main.next()) {
                    EMP_no = rs_main.getString("EmployeeNo");

                    Statement st = DbConnection.getconnection().createStatement();
                    ResultSet rs = st.executeQuery("Select *,COUNT(*),SUM(DayShift+NightShift),SUM(HalfDayShift),SUM(EffectiveRate) from emp_atten_main where Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' and Status= 'processed' and SalaryStatus='salary_pending' and EmployeeNo='" + EMP_no + "'");

                    while (rs.next()) {

                        // String sum = rs.getString("SUM(DayShift+NightShift)");
                        Double full = Double.parseDouble(rs.getString("SUM(DayShift+NightShift)"));
                        Double half = Double.parseDouble(rs.getString("SUM(HalfDayShift)"));

                        //rate changed shift details                 
                        Statement st3 = DbConnection.getconnection().createStatement();
                        ResultSet rs3 = st3.executeQuery("select * , COUNT(*),SUM(TotalAmount) from  emp_atten_rate_change_shift_summery where EPFno='" + EMP_no + "' and Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' ");
                        while (rs3.next()) {
                            int coun = Integer.parseInt(rs3.getString("COUNT(*)"));

                            if (coun == 0) {
                                WorkedShiftAmount = 0.00;

                            } else {
                                WorkedShiftAmount = Double.parseDouble(rs3.getString("SUM(TotalAmount)"));

                            }
                        }
                        Double totalShifts = full + (half / 2);
                        TotalShitsWorked = Double.toString(totalShifts);

                        System.out.println("******************Total Shifts= " + EMP_no + " " + totalShifts);

//                    normal_shift_total = totalShifts - RC__shift_tot;
                        System.out.println("total Shift" + totalShifts);

                        if (totalShifts >= 26) {
//***************** Total Shifts More Than 26*************************                  
                            System.out.println("more than 26");

                            Statement st1 = DbConnection.getconnection().createStatement();
                            ResultSet rs1 = st1.executeQuery("SELECT * FROM employee_reg WHERE EmployeeNo = '" + EMP_no + "' ");

                            while (rs1.next()) {

                                String basic = rs1.getString("BasicSalary");
                                String br = rs1.getString("BRAllowance");
                                String shiftRate = rs1.getString("ShiftRate");
                                //NameWithInitials Designation DefCompany  DefLocation
                                EmpName = rs1.getString("NameWithInitials");
                                EmpRank = rs1.getString("Designation");
                                EmpCompany = rs1.getString("DefCompany");
                                EmpLocation = rs1.getString("DefLocation");
                                String ActiveEPF = rs1.getString("ActiveEPF");

                                Welfare = Double.parseDouble(rs1.getString("Welfare"));
                                Final_Welfare = String.format("%.2f", Welfare);

                                MCAllowance = Double.parseDouble(rs1.getString("MCAllowance"));
                                System.out.println(EMP_no + "EMP's MC ALLo IS =" + rs1.getString(47));

                                //Get Company Address
                                Statement st5 = DbConnection.getconnection().createStatement();
                                ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                                while (rs5.next()) {
                                    ComAddress = rs5.getString("ComAddress");
                                    ComName = rs5.getString("ComName");
                                }
                                //Get Posted Location Details
                                Statement st6 = DbConnection.getconnection().createStatement();
                                ResultSet rs6 = st6.executeQuery("SELECT * FROM location_reg WHERE LocCode = '" + EmpLocation + "' ");
                                while (rs6.next()) {
                                    LocType = rs6.getString("LocType");

                                }

                                System.out.println(basic + "  " + br);

                                Double Bsalary = Double.parseDouble(basic);
                                Double brallo = Double.parseDouble(br);

                                //Basic
                                Final_Basic = String.format("%.2f", Bsalary);

                                //BR Allowance
                                Final_BR = String.format("%.2f", brallo);

                                //TaxEarn
                                Double D_Final_TaxEarn = Double.parseDouble(basic);
                                Final_TaxEarn = basic;
                                System.out.println("TAXEARN" + Final_TaxEarn);

                                if (ActiveEPF.equals("1")) {
                                    //EPF_Employee 8%
                                    epf_employee = ((D_Final_TaxEarn + brallo)) * 0.08;
                                    Final_Employee_EPF = String.format("%.2f", epf_employee);

                                    //ETF_Employer 3%
                                    etf_employer = ((D_Final_TaxEarn + brallo)) * 0.03;
                                    Final_Employer_ETF = String.format("%.2f", etf_employer);

                                    //EPF_Employer 12%
                                    epf_employer = ((D_Final_TaxEarn + brallo)) * 0.12;
                                    Final_Employer_EPF = String.format("%.2f", epf_employer);

                                } else {

                                    Final_Employee_EPF = "0.00";
                                    Final_Employer_ETF = "0.00";
                                    Final_Employer_EPF = "0.00";

                                }

                                //OT Calc
                                Double x = ((((Bsalary + brallo) / 200) * 1.5) * 4) * totalShifts;
                                Final_OThrsAmt = String.format("%.2f", x);

                                //OT HRS
                                Double a = totalShifts * 4;
                                Final_OT_HOURS = Double.toString(a);

                                //Site Intensive
                                //Double Shift = Double.parseDouble(shiftRate);
                                Double u = (WorkedShiftAmount) - (Bsalary + brallo + x);
                                Final_SiteIntensive = String.format("%.2f", u);

                                //Manual Earnings
                                Statement st2 = DbConnection.getconnection().createStatement();
                                ResultSet rs2 = st2.executeQuery("SELECT * FROM salary_manual_earnings WHERE EPFno = '" + EMP_no + "' and Month='" + cmb_month.getSelectedItem().toString() + "'and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                                Double noOfsun = 0.00;
                                Double perSunDay = 0.00;
                                Double TotalSun = 0.00;
                                Double poya = 0.00;
                                Double mc = 0.00;
                                Double other = 0.00;

                                while (rs2.next()) {

                                    noOfsun = Double.parseDouble(rs2.getString(2));
                                    perSunDay = Double.parseDouble(rs2.getString(3));
                                    TotalSun = Double.parseDouble(rs2.getString(4));
                                    poya = Double.parseDouble(rs2.getString(5));
                                    mc = Double.parseDouble(rs2.getString(6));
                                    other = Double.parseDouble(rs2.getString(7));

                                    NoOfSundays = String.format("%.2f", noOfsun);
                                    AmtperSunday = String.format("%.2f", perSunDay);
                                    TotalAmtSunday = String.format("%.2f", TotalSun);
                                    Poyaday = String.format("%.2f", poya);
                                    // MC = String.format("%.2f", (mc+MCAllowance));
                                    Other = String.format("%.2f", other);

                                }

                                MC = String.format("%.2f", MCAllowance);
                                System.out.println("MCALLOWANCE=" + MC);

                                //Gross Salary
                                gross = D_Final_TaxEarn + brallo + x + u + TotalSun + poya + mc + MCAllowance + other;
                                Final_Gross = String.format("%.2f", gross);

                                // System.out.println("gross"+Final_Gross);
                                System.out.println(EMP_no + " Gross is " + gross);

                                System.out.println(EMP_no + "  Basic:-" + basic + "  BR:-" + br + "  OT:-" + Final_OThrsAmt + "  Site Inte:-" + Final_SiteIntensive);
//                        System.out.println(EpfNo + "Manual Earnings = " + "noOfSun " + NoOfSundays + " per SunDay:" + AmtperSunday + " TotalSun:" + TotalAmtSunday + "  Poya:" + Poyaday + "  MC:" + MC + "  Other:" + Other);

                            }

                        } else if (totalShifts < 26) {

//***************** Total Shifts LESS Than 26****************************************************************
                            Statement st1 = DbConnection.getconnection().createStatement();
                            ResultSet rs1 = st1.executeQuery("SELECT * FROM employee_reg WHERE EmployeeNo = '" + EMP_no + "' ");

                            while (rs1.next()) {

                                String basic = rs1.getString("BasicSalary");
                                String br = rs1.getString("BRAllowance");
                                String shiftRate = rs1.getString("ShiftRate");
                                EPF_no = rs1.getString("EPFno");

                                EmpName = rs1.getString("NameWithInitials");
                                EmpRank = rs1.getString("Designation");
                                EmpCompany = rs1.getString("DefCompany");
                                EmpLocation = rs1.getString("DefLocation");
                                String ActiveEPF = rs1.getString("ActiveEPF");

                                Welfare = Double.parseDouble(rs1.getString("Welfare"));
                                Final_Welfare = String.format("%.2f", Welfare);

                                MCAllowance = Double.parseDouble(rs1.getString("MCAllowance"));
                                System.out.println(EMP_no + "EMP's MC ALLo IS =" + rs1.getString(47));

                                //Get Company Address
                                Statement st5 = DbConnection.getconnection().createStatement();
                                ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                                while (rs5.next()) {
                                    ComAddress = rs5.getString("ComAddress");
                                    ComName = rs5.getString("ComName");
                                }
                                //Get Posted Location Details
                                Statement st6 = DbConnection.getconnection().createStatement();
                                ResultSet rs6 = st6.executeQuery("SELECT * FROM location_reg WHERE LocCode = '" + EmpLocation + "' ");
                                while (rs6.next()) {
                                    LocType = rs6.getString("LocType");

                                }

                                System.out.println(basic + "  " + br);
                                Double Bsalary = Double.parseDouble(basic);

                                //Basic
                                Final_Basic = String.format("%.2f", Bsalary);

                                //TAx Earn Calc
                                Double D_Final_TaxEarn = (Bsalary / 26) * totalShifts;
                                Final_TaxEarn = String.format("%.2f", D_Final_TaxEarn);
                                System.out.println("TAXEARN" + Final_TaxEarn);

                                //BR Allowance Calc
                                Double brallo = Double.parseDouble(br);
                                Double D_Final_BR_Allo = (brallo / 26) * totalShifts;
                                Final_BR = String.format("%.2f", D_Final_BR_Allo);
                                System.out.println(Final_BR);

                                if (ActiveEPF.equals("1")) {
                                    //EPF_Employee 8%
                                    epf_employee = ((D_Final_TaxEarn + D_Final_BR_Allo)) * 0.08;
                                    Final_Employee_EPF = String.format("%.2f", epf_employee);
                                    System.out.println("ETF_Employee 8%" + Final_Employee_EPF);

                                    //ETF_Employer 3%
                                    etf_employer = ((D_Final_TaxEarn + D_Final_BR_Allo)) * 0.03;
                                    Final_Employer_ETF = String.format("%.2f", etf_employer);
                                    System.out.println("ETF_Employer 3%" + Final_Employer_ETF);

                                    //EPF_Employer 12%
                                    epf_employer = ((D_Final_TaxEarn + D_Final_BR_Allo)) * 0.12;
                                    Final_Employer_EPF = String.format("%.2f", epf_employer);
                                    System.out.println("EPF_Employer 12%" + Final_Employer_EPF);

                                } else {

                                    Final_Employee_EPF = "0.00";
                                    Final_Employer_ETF = "0.00";
                                    Final_Employer_EPF = "0.00";

                                }

                                //OT Calc
                                Double D_Final_OT = ((((Bsalary + brallo) / 200) * 1.5) * 4) * totalShifts;
                                Final_OThrsAmt = String.format("%.2f", D_Final_OT);

                                //OT HRS
                                Double a = totalShifts * 4;
                                Final_OT_HOURS = Double.toString(a);

                                //Site Insentive
//                                Double Shift = Double.parseDouble(shiftRate);
                                Double D_Final_Site_Intensive = (WorkedShiftAmount) - (D_Final_TaxEarn + D_Final_BR_Allo + D_Final_OT);
                                Final_SiteIntensive = String.format("%.2f", D_Final_Site_Intensive);

                                //Manual Earnings
                                Statement st2 = DbConnection.getconnection().createStatement();
                                ResultSet rs2 = st2.executeQuery("SELECT *,COUNT(EPFno) FROM salary_manual_earnings WHERE EPFno = '" + EMP_no + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                                Double noOfsun = 0.00;
                                Double perSunDay = 0.00;
                                Double TotalSun = 0.00;
                                Double poya = 0.00;
                                Double mc = 0.00;
                                Double other = 0.00;

                                while (rs2.next()) {

                                    int count = Integer.parseInt(rs2.getString("COUNT(EPFno)"));

                                    if (count == 0) {

                                        noOfsun = 0.00;
                                        perSunDay = 0.00;
                                        TotalSun = 0.00;
                                        poya = 0.00;
                                        mc = 0.00;
                                        other = 0.00;

                                    } else {

                                        noOfsun = Double.parseDouble(rs2.getString(2));
                                        perSunDay = Double.parseDouble(rs2.getString(3));
                                        TotalSun = Double.parseDouble(rs2.getString(4));
                                        poya = Double.parseDouble(rs2.getString(5));
                                        mc = Double.parseDouble(rs2.getString(6));
                                        other = Double.parseDouble(rs2.getString(7));

                                        NoOfSundays = String.format("%.2f", noOfsun);
                                        AmtperSunday = String.format("%.2f", perSunDay);
                                        TotalAmtSunday = String.format("%.2f", TotalSun);
                                        Poyaday = String.format("%.2f", poya);
                                        //MC = String.format("%.2f", (mc+MCAllowance));
                                        Other = String.format("%.2f", other);

                                    }
                                }

                                MC = String.format("%.2f", MCAllowance);
                                System.out.println("MCALLOWANCE=" + MC);

                                //Gross Salary
                                gross = D_Final_TaxEarn + D_Final_BR_Allo + D_Final_OT + D_Final_Site_Intensive + TotalSun + poya + mc + other + MCAllowance;
                                Final_Gross = String.format("%.2f", gross);

                                System.out.println(EMP_no + " Gross:" + gross);

                                System.out.println(EMP_no + "  Basic:-" + Final_TaxEarn + "  BR:-" + Final_BR + "  OT:-" + Final_OThrsAmt + "  Site Inte:-" + Final_SiteIntensive);
                                // System.out.println(EpfNo + "Manual Earnings = " + "noOfSun " + NoOfSundays + " per SunDay:" + AmtperSunday + " TotalSun:" + TotalAmtSunday + "  Poya:" + Poyaday + "  MC:" + MC + "  Other:" + Other);

                            }

                        }

                        //Employee Deduction Details**********************************************************************************
                        Double Loan02_Rental = 0.00;
                        Double Loan_Rental = 0.00;
                        Double Advance01_Rental = 0.00;
                        Double Advance02_Rental = 0.00;
                        Double FestivalAdvance_Rental = 0.00;
                        Double Uniform_Rental = 0.00;
                        Double Shoe_Rental = 0.00;

                        //Get details OF Distress_Loan_01
                        Statement Loan_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                        while (Loan_rs.next()) {

                            String Ref = Loan_rs.getString("LoanReference");
                            String Rent = Loan_rs.getString("Rental");

                            Loan_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                            Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                            while (Loan_settle_rs.next()) {

                                int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan_Rental + bal);
                                    Distress_BalanceAmt = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                            //Save data to Loan_01 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Distress_Loan_02
                        Statement Loan02_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                        while (Loan02_rs.next()) {

                            String Ref = Loan02_rs.getString("LoanReference");
                            String Rent = Loan02_rs.getString("Rental");

                            Loan02_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                            Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                            while (Loan02_settle_rs.next()) {

                                int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                    Distress_BalanceAmt02 = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                            //Save data to Loan_02 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Advance01
                        Statement Ad1_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                        while (Ad1_rs.next()) {
                            String Ref = null;
                            String Rent = "0";
                            if (Ad1_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad1_rs.getString("Reference");
                                Rent = Ad1_rs.getString("SUM(Amount)");

                                Advance01_Rental = Double.parseDouble(Rent);
                                Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
                            }

                            //Save data to Advance01 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                        }

                        //Get details OF Advance02
                        Statement Ad2_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                        while (Ad2_rs.next()) {

                            String Ref = null;
                            String Rent = "0";

                            if (Ad2_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad2_rs.getString("Reference");
                                Rent = Ad2_rs.getString("SUM(Amount)");

                                Advance02_Rental = Double.parseDouble(Rent);
                                Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                            }

                            //Save data to Advance02 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get details OF Festival Advance 
                        Statement fes_st = DbConnection.getconnection().createStatement();
                        ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                        while (fes_rs.next()) {

                            String Ref = fes_rs.getString("Reference");
                            String Rent = fes_rs.getString("Rental");

                            FestivalAdvance_Rental = Double.parseDouble(Rent);
                            Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                            //Save data to Festival Advance  Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get details OF Uniform Issue 
                        Statement uni_st = DbConnection.getconnection().createStatement();
                        ResultSet uni_rs = uni_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM uniform_issue WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                        while (uni_rs.next()) {

                            int count = Integer.parseInt(uni_rs.getString("COUNT(*)"));

                            if (count == 0) {

                                Uniform_Rental = 0.00;

                            } else {

                                String epf = uni_rs.getString("EPFno");
                                String issueDate = uni_rs.getString("IssueOn");

                                String Ref = epf + "/" + issueDate;
                                String Rent = uni_rs.getString("SUM(Rental)");

                                Uniform_Rental = Double.parseDouble(Rent);
                                Final_Uniform_Rental = String.format("%.2f", Uniform_Rental);

                                //Save data to Uniform Issue  Settlement Table
                                Statement st1 = DbConnection.getconnection().createStatement();
                                st1.executeUpdate("insert into uniform_issue_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            }

                        }

                        //Get details OF Shoe Issue 
                        Statement shoe_st = DbConnection.getconnection().createStatement();
                        ResultSet shoe_rs = shoe_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM shoes_issue WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                        while (shoe_rs.next()) {

                            int count = Integer.parseInt(shoe_rs.getString("COUNT(*)"));

                            if (count == 0) {
                                Shoe_Rental = 0.00;
                            } else {

                                String epf = shoe_rs.getString("EPFno");
                                String issueDate = shoe_rs.getString("IssueOn");

                                String Ref = epf + "/" + issueDate;

                                String Rent = shoe_rs.getString("SUM(Rental)");

                                Shoe_Rental = Double.parseDouble(Rent);
                                Final_Shoe_Rental = String.format("%.2f", Shoe_Rental);

                                //Save data to Shoe Issue  Settlement Table
                                Statement st1 = DbConnection.getconnection().createStatement();
                                st1.executeUpdate("insert into shoe_issue_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            }

                        }

                        //Manual Deductions
                        String SMeal = "0.00";
                        String SFines = "0.00";
                        String SRental = "0.00";
                        String SLessShift = "0.00";
                        String SOtherDeductions = "0.00";
                        String SPaidSalary = "0.00";
                        String SInsuarance = "0.00";
                        String SDeath = "0.00";

                        Double Meal = 0.00;
                        Double Fines = 0.00;
                        Double Rental = 0.00;
                        Double LessShift = 0.00;
                        Double OtherDeductions = 0.00;
                        Double PaidSalary = 0.00;
                        Double Insuarance = 0.00;
                        Double Death = 0.00;

                        //Get details OF Manual Salary Adjustments- Deductions 
                        Statement manual_st = DbConnection.getconnection().createStatement();
                        ResultSet manual_rs = manual_st.executeQuery("SELECT *,COUNT(*),SUM(Fines),SUM(Meal),SUM(Rental),SUM(OtherDeduc),SUM(LessShift),SUM(DeathDonation),SUM(Insuarance),SUM(PaidSalary10th) FROM salary_manual_deductions WHERE EPFno = '" + EMP_no + "' and Month = '" + cmb_month.getSelectedItem().toString() + "' and year = '" + cmb_year.getSelectedItem().toString() + "' ");
                        while (manual_rs.next()) {

                            int i = Integer.parseInt(manual_rs.getString("COUNT(*)"));

                            if (i == 0) {

                            } else {

                                SMeal = manual_rs.getString("SUM(Meal)");
                                SFines = manual_rs.getString("SUM(Fines)");
                                SRental = manual_rs.getString("SUM(Rental)");
                                SLessShift = manual_rs.getString("SUM(LessShift)");
                                SOtherDeductions = manual_rs.getString("SUM(OtherDeduc)");
                                SPaidSalary = manual_rs.getString("SUM(PaidSalary10th)");
                                SInsuarance = manual_rs.getString("SUM(Insuarance)");
                                SDeath = manual_rs.getString("SUM(DeathDonation)");

                                System.out.println("Meal:" + SMeal);
                                System.out.println("SFines:" + SFines);
                                System.out.println("SRentalal:" + SRental);
                                System.out.println("SLessShift:" + SLessShift);

                                //Meal = Double.parseDouble(SMeal);
                                Meal = Double.parseDouble(SMeal);
                                Fines = Double.parseDouble(SFines);
                                Rental = Double.parseDouble(SRental);
                                LessShift = Double.parseDouble(SLessShift);
                                OtherDeductions = Double.parseDouble(SOtherDeductions);
                                PaidSalary = Double.parseDouble(SPaidSalary);
                                Insuarance = Double.parseDouble(SInsuarance);
                                Death = Double.parseDouble(SDeath);
                                Final_Meal = String.format("%.2f", Meal);
                                Final_Fines = String.format("%.2f", Fines);
                                Final_Rental = String.format("%.2f", Rental);
                                Final_LessShift = String.format("%.2f", LessShift);
                                Final_OtherDeductions = String.format("%.2f", OtherDeductions);
                                Final_PaidSalary = String.format("%.2f", PaidSalary);
                                Final_Insuarance = String.format("%.2f", Insuarance);
                                Final_Death = String.format("%.2f", Death);

                            }
                        }

                        Total_Deductions = (Loan02_Rental + Loan_Rental + Advance01_Rental + Advance02_Rental + FestivalAdvance_Rental + Uniform_Rental + Shoe_Rental + Welfare + Meal + Fines + Rental + LessShift + OtherDeductions + PaidSalary + Insuarance + Death + epf_employee);
                        Final_Total_Deductions = String.format("%.2f", Total_Deductions);

                        Double netSalary = gross - Total_Deductions;
                        Final_Net_Salary = String.format("%.2f", netSalary);

                        Double grandTotal = (gross + etf_employer + epf_employer);
                        Final_GrandTotal = String.format("%.2f", grandTotal);

                        String CalculatedShiftRate = String.format("%.2f", WorkedShiftAmount / totalShifts);

//                        Statement sal_st1 = DbConnection.getconnection().createStatement();
//                        ResultSet sal_rs1 = sal_st1.executeQuery("select  COUNT(EPFno) from salary_final  where EPFno='" + EpfNo + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
//                        while (sal_rs1.next()) {
//
//                            int epf_count = Integer.parseInt(sal_rs1.getString("COUNT(EPFno)"));
                        Statement sal_st = DbConnection.getconnection().createStatement();

//                            if (epf_count == 0) {
                        sal_st.executeUpdate("insert into salary_final values('" + EPF_no + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','" + Final_OT_HOURS + "','" + Final_OThrsAmt + "','" + Final_SiteIntensive + "','" + NoOfSundays + "','" + TotalAmtSunday + "','" + Poyaday + "','" + ShiftIntensive + "','" + MC + "','" + Other + "','" + Final_Gross + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','" + Final_Fines + "','" + Final_LessShift + "','" + Final_Rental + "','" + Final_Death + "','" + Final_OtherDeductions + "','" + Final_Insuarance + "','" + Final_Shoe_Rental + "','" + Final_Uniform_Rental + "','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','" + Final_PaidSalary + "','" + Final_Employee_EPF + "','" + Final_Total_Deductions + "','" + Final_Net_Salary + "','" + Final_Employer_EPF + "','" + Final_Employer_ETF + "','" + Final_GrandTotal + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + EmpName + "','" + EmpRank + "','" + TotalShitsWorked + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "','" + LocType + "','" + CalculatedShiftRate + "' , '" + EMP_no + "')");

                        sal_st.executeUpdate("update emp_atten_main set SalaryStatus='salary_processed' where EmployeeNo='" + EMP_no + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
                        // sal_st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_processed' where EMPID='" + EpfNo + "'  and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                        EPF_no = "null";
                        Final_Basic = "0.00";
                        Final_BR = "0.00";
                        Final_TaxEarn = "0.00";
                        Final_OThrsAmt = "0.00";
                        Final_SiteIntensive = "0.00";
                        ShiftIntensive = "0.00";
                        NoOfSundays = "0.00";
                        AmtperSunday = "0.00";
                        TotalAmtSunday = "0.00";
                        Poyaday = "0.00";
                        MC = "0.00";
                        Other = "0.00";
                        Final_Gross = "0.00";
                        Final_Loan_Rental = "0.00";
                        Final_Loan02_Rental = "0.00";
                        Final_Advance01_Rental = "0.00";
                        Final_Advance02_Rental = "0.00";
                        Final_FestivalAdvance_Rental = "0.00";
                        Final_Uniform_Rental = "0.00";
                        Final_Shoe_Rental = "0.00";
                        Final_Welfare = "0.00";
                        Final_Meal = "0.00";
                        Final_Fines = "0.00";
                        Final_Rental = "0.00";
                        Final_LessShift = "0.00";
                        Final_OtherDeductions = "0.00";
                        Final_PaidSalary = "0.00";
                        Final_Insuarance = "0.00";
                        Final_Death = "0.00";
                        Final_Total_Deductions = "0.00";
                        Total_Deductions = 0.00;
                        gross = 0.00;
                        Final_Employee_EPF = "0.00";
                        Final_Employer_ETF = "0.00";
                        Final_Employer_EPF = "0.00";
                        etf_employer = 0.00;
                        epf_employer = 0.00;
                        Final_Net_Salary = "0.00";
                        Final_OT_HOURS = "0.00";
                        Final_GrandTotal = "0.00";
                        Distress_BalanceAmt = "0.00";
                        Distress_BalanceAmt02 = "0.00";
                        TotalShitsWorked = "0.00";
                        EmpName = "0.00";
                        EmpRank = "0.00";
                        EmpLocation = "0.00";
                        EmpCompany = "0.00";
                        ComAddress = "0.00";
                        ComName = "0.00";
                        LocType = "";
                        WorkedShiftAmount = 0.00;
                        Welfare = 0.00;
                        MCAllowance = 0.00;

                        epf_employee = 0.00;

//                            } else {
//
//                                sal_st.executeUpdate(" update salary_final set Basic='" + Final_Basic + "',BRAllowance='" + Final_BR + "',TaxEarn='" + Final_TaxEarn + "',OThrs='" + Final_OT_HOURS + "',OThrsAmt='" + Final_OThrsAmt + "',AttendanceIntensive='" + Final_SiteIntensive + "',NoOfSundays='" + NoOfSundays + "',TotalAmtSunday='" + TotalAmtSunday + "',Poyaday='" + Poyaday + "',ShiftIntensive='" + ShiftIntensive + "',MCAllowance='" + MC + "',OtherAllowance='" + Other + "',GrossEarning='" + Final_Gross + "',Welfare='" + Final_Welfare + "',Advance01='" + Final_Advance01_Rental + "',Advance02='" + Final_Advance02_Rental + "',FestivalAdvance='" + Final_FestivalAdvance_Rental + "',Meal='" + Final_Meal + "',Fines='" + Final_Fines + "',LessShift='" + Final_LessShift + "',Rental='" + Final_Rental + "',DeathDonations='" + Final_Death + "',OtherDeductions='" + Final_OtherDeductions + "',Insuarance='" + Final_Insuarance + "',ShoeDeductions='" + Final_Shoe_Rental + "',UniformDeductions='" + Final_Uniform_Rental + "',DistressLoan='" + Final_Loan_Rental + "',DistressLoanBalance='" + Distress_BalanceAmt + "',PaidSalary10th='" + Final_PaidSalary + "',Employee_EPF_8='" + Final_Employee_EPF + "',TotalDeductions='" + Final_Total_Deductions + "',NetSalary='" + Final_Net_Salary + "',Employer_EPF_12='" + Final_Employer_EPF + "',Employer_ETF_3='" + Final_Employer_ETF + "',GrandTotal='" + Final_GrandTotal + "',SalaryProcessedDate='" + date + "',Name='" + EmpName + "',Rank='" + EmpRank + "',TotalShifts='" + TotalShitsWorked + "',EmpLocation='" + EmpLocation + "',EmpCompany='" + EmpCompany + "',CompanyAddress='" + ComAddress + "',ComName='" + ComName + "',CurrentDate='" + lbl_current_date.getText() + "',DistressLoan02='" + Final_Loan02_Rental + "',DistressLoan02Balance='" + Distress_BalanceAmt02 + "' where EPFno='" + EpfNo + "' and  Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "',LocationType='" + LocType + "'");
//
//                                sal_st.executeUpdate("update emp_atten_main set SalaryStatus='salary_processed' where EPFno='" + EpfNo + "'");
//                                sal_st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_processed' where EMPID='" + EpfNo + "'");
//                            }
//                        }
//
//                    Statement sal_st = DbConnection.getconnection().createStatement();
//                    sal_st.executeUpdate("insert into salary_final values('" + EpfNo + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','" + Final_OT_HOURS + "','" + Final_OThrsAmt + "','" + Final_SiteIntensive + "','" + NoOfSundays + "','" + TotalAmtSunday + "','" + Poyaday + "','" + ShiftIntensive + "','" + MC + "','" + Other + "','" + Final_Gross + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','" + Final_Fines + "','" + Final_LessShift + "','" + Final_Rental + "','" + Final_Death + "','" + Final_OtherDeductions + "','" + Final_Insuarance + "','" + Final_Shoe_Rental + "','" + Final_Uniform_Rental + "','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','" + Final_PaidSalary + "','" + Final_Employee_EPF + "','" + Final_Total_Deductions + "','" + Final_Net_Salary + "','" + Final_Employer_EPF + "','" + Final_Employer_ETF + "','" + Final_GrandTotal + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + lbl_current_date.getText() + "','" + EmpName + "','" + EmpRank + "','" + TotalShitsWorked + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + date + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "')");
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, e);
            }

            lbl_atten.setText("   Guards' Salary Procssed...!");
            Color cl = new Color(0, 153, 51);
            lbl_atten.setForeground(cl);
            lbl_atten.setVisible(true);

            delete_null_data_in_settelsment_tables();

            long duration = System.currentTimeMillis() - start;

            DateFormat df = new SimpleDateFormat("HH 'Hours', mm 'Min(s),' ss 'Second(s)'");
            df.setTimeZone(TimeZone.getTimeZone("GMT+0"));
            System.out.println(df.format(new Date(duration)));
            JOptionPane.showMessageDialog(rootPane, "Process Completed in " + df.format(new Date(duration)));

//            btn_SSS_salary_process.setEnabled(false);
        }

    }

    private void GUARDS_SALARY_OLD_FORMULA() {

        long start = System.currentTimeMillis();

        Date Date = jDateChooser1.getDate();

        if (Date == null) {

            JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");

        } else {

            salary_ReSet();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

//Earnings
            String Final_Basic = "0.00";
            String Final_BR = "0.00";
            String Final_TaxEarn = "0.00";
            String Final_OThrsAmt = "0.00";
            String Final_SiteIntensive = "0.00";
            String ShiftIntensive = "0.00";

            String NoOfSundays = "0.00";
            String AmtperSunday = "0.00";
            String TotalAmtSunday = "0.00";
            String Poyaday = "0.00";
            String MC = "0.00";
            String Other = "0.00";

            String Final_Gross = "0.00";

            //Deductions
            String Final_Loan_Rental = "0.00";
            String Final_Loan02_Rental = "0.00";
            String Final_Advance01_Rental = "0.00";
            String Final_Advance02_Rental = "0.00";
            String Final_FestivalAdvance_Rental = "0.00";
            String Final_Uniform_Rental = "0.00";
            String Final_Shoe_Rental = "0.00";

            String Final_Welfare = "0.00";
            String Final_Meal = "0.00";
            String Final_Fines = "0.00";
            String Final_Rental = "0.00";
            String Final_LessShift = "0.00";
            String Final_OtherDeductions = "0.00";
            String Final_PaidSalary = "0.00";
            String Final_Insuarance = "0.00";
            String Final_Death = "0.00";

            String Final_Total_Deductions = "0.00";

            //Double
            Double Total_Deductions = 0.00;
            Double gross = 0.00;

            //EFP & ETF
            String Final_Employee_EPF = "0.00";
            String Final_Employer_ETF = "0.00";
            String Final_Employer_EPF = "0.00";

            Double etf_employer = 0.00;
            Double epf_employer = 0.00;
            Double epf_employee = 0.00;

            //
            String Final_Net_Salary = "0.00";
            String Final_OT_HOURS = "0.00";
            String Final_GrandTotal = "0.00";
            String Distress_BalanceAmt = "0.00";
            String Distress_BalanceAmt02 = "0.00";

            String TotalShitsWorked = "0.00";
            String EmpName = "";
            String EmpRank = "";
            String EmpLocation = "";
            String EmpCompany = "";
            String ComAddress = "";
            String ComName = "";
            String LocType = "";

//            Double RC__shift_tot = 0.00;
//            Double normal_shift_total = 0.00;
            Double WorkedShiftAmount = 0.00;

            Double Welfare = 0.00;
            String EMP_no = "";
            String EPF_no = "";

            Double MCAllowance = 0.00;

            Double DayShifts = 0.00;
            Double NightShifts = 0.00;
            String S_DayShifts = "0.00";
            String S_NightShifts = "0.00";

            Double DayRate = 0.00;
            Double NightRate = 0.00;
//            String mcAllow = "";

            try {

                Statement st_main = DbConnection.getconnection().createStatement();
                ResultSet rs_main = st_main.executeQuery("Select *,COUNT(*),SUM(TotalShifts),SUM(DayShifts),SUM(NightShifts) from emp_atten_rate_change_shift_summery where Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' and SalaryStatus='salary_pending' group by EPFno");
                while (rs_main.next()) {
                    EMP_no = rs_main.getString("EPFno");
//begin here
//                    Statement st = DbConnection.getconnection().createStatement();
//                    ResultSet rs = st.executeQuery("Select *,COUNT(*),SUM(TotalShifts) from emp_atten_main where Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' and Status= 'processed' and SalaryStatus='salary_pending' and EmployeeNo='" + EMP_no + "'");
//
//                    while (rs.next()) {

//                        // String sum = rs.getString("SUM(DayShift+NightShift)");
//                        Double full = Double.parseDouble(rs.getString("SUM(DayShift+NightShift)"));
//                        Double half = Double.parseDouble(rs.getString("SUM(HalfDayShift)"));
//
//                        //rate changed shift details                 
//                        Statement st3 = DbConnection.getconnection().createStatement();
//                        ResultSet rs3 = st3.executeQuery("select * , COUNT(*),SUM(TotalAmount) from  emp_atten_rate_change_shift_summery where EPFno='" + EMP_no + "' and Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' ");
//                        while (rs3.next()) {
                    int coun = Integer.parseInt(rs_main.getString("COUNT(*)"));

                    if (coun == 0) {
                        WorkedShiftAmount = 0.00;

                    } else {

                        DayShifts = Double.parseDouble(rs_main.getString("DayShifts"));
                        NightShifts = Double.parseDouble(rs_main.getString("NightShifts"));

                        DayRate = Double.parseDouble(rs_main.getString("DayRate"));
                        NightRate = Double.parseDouble(rs_main.getString("NightRate"));

                        WorkedShiftAmount = (DayShifts * DayRate) + (NightShifts * NightRate);
                    }
                    // }
                    Double totalShifts = Double.parseDouble(rs_main.getString("SUM(TotalShifts)"));
                    TotalShitsWorked = Double.toString(totalShifts);

                    System.out.println("******************Total Shifts= " + EMP_no + " " + totalShifts);

//                    normal_shift_total = totalShifts - RC__shift_tot;
                    System.out.println("total Shift" + totalShifts);

                    //-------------
                    String basic = "";
                    String br = "";
                    String shiftRate = "";
                    String ActiveEPF = "";

                    Statement st1 = DbConnection.getconnection().createStatement();
                    ResultSet rs1 = st1.executeQuery("SELECT * FROM employee_reg WHERE EmployeeNo = '" + EMP_no + "' ");

                    while (rs1.next()) {

                        basic = rs1.getString("BasicSalary");
                        br = rs1.getString("BRAllowance");
                        shiftRate = rs1.getString("ShiftRate");
                        //NameWithInitials Designation DefCompany  DefLocation
                        EmpName = rs1.getString("NameWithInitials");
                        EmpRank = rs1.getString("Designation");
                        EmpCompany = rs1.getString("DefCompany");
                        EmpLocation = rs1.getString("DefLocation");
                        ActiveEPF = rs1.getString("ActiveEPF");

                        Welfare = Double.parseDouble(rs1.getString("Welfare"));
                        Final_Welfare = String.format("%.2f", Welfare);

                        MCAllowance = Double.parseDouble(rs1.getString("MCAllowance"));
                        System.out.println(EMP_no + "EMP's MC ALLo IS =" + rs1.getString(47));

                        //Get Company Address
                        Statement st5 = DbConnection.getconnection().createStatement();
                        ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                        while (rs5.next()) {
                            ComAddress = rs5.getString("ComAddress");
                            ComName = rs5.getString("ComName");
                        }
                        //Get Posted Location Details
                        Statement st6 = DbConnection.getconnection().createStatement();
                        ResultSet rs6 = st6.executeQuery("SELECT * FROM location_reg WHERE LocCode = '" + EmpLocation + "' ");
                        while (rs6.next()) {
                            LocType = rs6.getString("LocType");

                        }

                    }
                    //-------------

                    //Manual Earnings
                    Statement st2 = DbConnection.getconnection().createStatement();
                    ResultSet rs2 = st2.executeQuery("SELECT * FROM salary_manual_earnings WHERE EPFno = '" + EMP_no + "' and Month='" + cmb_month.getSelectedItem().toString() + "'and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                    Double noOfsun = 0.00;
                    Double perSunDay = 0.00;
                    Double TotalSun = 0.00;
                    Double poya = 0.00;
                    Double mc = 0.00;
                    Double other = 0.00;

                    while (rs2.next()) {

                        noOfsun = Double.parseDouble(rs2.getString(2));
                        perSunDay = Double.parseDouble(rs2.getString(3));
                        TotalSun = Double.parseDouble(rs2.getString(4));
                        poya = Double.parseDouble(rs2.getString(5));
                        mc = Double.parseDouble(rs2.getString(6));
                        other = Double.parseDouble(rs2.getString(7));

                        NoOfSundays = String.format("%.2f", noOfsun);
                        AmtperSunday = String.format("%.2f", perSunDay);
                        TotalAmtSunday = String.format("%.2f", TotalSun);
                        Poyaday = String.format("%.2f", poya);
                        // MC = String.format("%.2f", (mc+MCAllowance));
                        Other = String.format("%.2f", other);

                    }

                    if (DayShifts >= 28) {
//***************** Total Shifts More Than 28*************************                  
                        System.out.println("more than 28");
//
//                            Statement st1 = DbConnection.getconnection().createStatement();
//                            ResultSet rs1 = st1.executeQuery("SELECT * FROM employee_reg WHERE EmployeeNo = '" + EMP_no + "' ");
//
//                            while (rs1.next()) {
//
//                                String basic = rs1.getString("BasicSalary");
//                                String br = rs1.getString("BRAllowance");
//                                String shiftRate = rs1.getString("ShiftRate");
//                                //NameWithInitials Designation DefCompany  DefLocation
//                                EmpName = rs1.getString("NameWithInitials");
//                                EmpRank = rs1.getString("Designation");
//                                EmpCompany = rs1.getString("DefCompany");
//                                EmpLocation = rs1.getString("DefLocation");
//                                String ActiveEPF = rs1.getString("ActiveEPF");
//
//                                Welfare = Double.parseDouble(rs1.getString("Welfare"));
//                                Final_Welfare = String.format("%.2f", Welfare);
//
//                                MCAllowance = Double.parseDouble(rs1.getString("MCAllowance"));
//                                System.out.println(EMP_no + "EMP's MC ALLo IS =" + rs1.getString(47));
//
//                                //Get Company Address
//                                Statement st5 = DbConnection.getconnection().createStatement();
//                                ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
//                                while (rs5.next()) {
//                                    ComAddress = rs5.getString("ComAddress");
//                                    ComName = rs5.getString("ComName");
//                                }
//                                //Get Posted Location Details
//                                Statement st6 = DbConnection.getconnection().createStatement();
//                                ResultSet rs6 = st6.executeQuery("SELECT * FROM location_reg WHERE LocCode = '" + EmpLocation + "' ");
//                                while (rs6.next()) {
//                                    LocType = rs6.getString("LocType");
//
//                                }
//***************
                        System.out.println(basic + "  " + br);

                        Double Bsalary = Double.parseDouble(basic);
                        Double brallo = Double.parseDouble(br);

                        //Basic
                        Final_Basic = String.format("%.2f", Bsalary);

                        //BR Allowance
                        Final_BR = String.format("%.2f", brallo);

                        //TaxEarn
                        Double D_Final_TaxEarn = Double.parseDouble(basic);
                        Final_TaxEarn = basic;
                        System.out.println("TAXEARN" + Final_TaxEarn);

                        if (ActiveEPF.equals("1")) {
                            //EPF_Employee 8%
                            epf_employee = ((D_Final_TaxEarn + brallo)) * 0.08;
                            Final_Employee_EPF = String.format("%.2f", epf_employee);

                            //ETF_Employer 3%
                            etf_employer = ((D_Final_TaxEarn + brallo)) * 0.03;
                            Final_Employer_ETF = String.format("%.2f", etf_employer);

                            //EPF_Employer 12%
                            epf_employer = ((D_Final_TaxEarn + brallo)) * 0.12;
                            Final_Employer_EPF = String.format("%.2f", epf_employer);

                        } else {

                            Final_Employee_EPF = "0.00";
                            Final_Employer_ETF = "0.00";
                            Final_Employer_EPF = "0.00";

                        }

                        //OT HRS
                        Double a = totalShifts * 3;
                        Final_OT_HOURS = Double.toString(a);

                        Double Balance_Salary = WorkedShiftAmount - (Bsalary + brallo);

                        //OT Calc
                        Double x = Balance_Salary * 0.60;
                        Final_OThrsAmt = String.format("%.2f", x);
                        //Site Intensive
                        Double u = Balance_Salary * 0.40;
                        Final_SiteIntensive = String.format("%.2f", u);

//                          //OT Calc
//                        Double x = ((((Bsalary + brallo) / 200) * 1.5) * 3) * DayShifts;
//                        Final_OThrsAmt = String.format("%.2f", x);
//                      //Site Intensive
//                        Double u = (WorkedShiftAmount) - (Bsalary + brallo + x);
//                        Final_SiteIntensive = String.format("%.2f", u);
                        System.out.println("WorkedShiftAmount: " + WorkedShiftAmount);
                        System.out.println("Double u: " + u);

//                        //Manual Earnings
//                        Statement st2 = DbConnection.getconnection().createStatement();
//                        ResultSet rs2 = st2.executeQuery("SELECT * FROM salary_manual_earnings WHERE EPFno = '" + EMP_no + "' and Month='" + cmb_month.getSelectedItem().toString() + "'and Year='" + cmb_year.getSelectedItem().toString() + "' ");
//
//                        Double noOfsun = 0.00;
//                        Double perSunDay = 0.00;
//                        Double TotalSun = 0.00;
//                        Double poya = 0.00;
//                        Double mc = 0.00;
//                        Double other = 0.00;
//
//                        while (rs2.next()) {
//
//                            noOfsun = Double.parseDouble(rs2.getString(2));
//                            perSunDay = Double.parseDouble(rs2.getString(3));
//                            TotalSun = Double.parseDouble(rs2.getString(4));
//                            poya = Double.parseDouble(rs2.getString(5));
//                            mc = Double.parseDouble(rs2.getString(6));
//                            other = Double.parseDouble(rs2.getString(7));
//
//                            NoOfSundays = String.format("%.2f", noOfsun);
//                            AmtperSunday = String.format("%.2f", perSunDay);
//                            TotalAmtSunday = String.format("%.2f", TotalSun);
//                            Poyaday = String.format("%.2f", poya);
//                            // MC = String.format("%.2f", (mc+MCAllowance));
//                            Other = String.format("%.2f", other);
//
//                        }
                        MC = String.format("%.2f", MCAllowance);
                        System.out.println("MCALLOWANCE=" + MC);

                        //Gross Salary
                        gross = D_Final_TaxEarn + brallo + x + u + TotalSun + poya + mc + MCAllowance + other;
                        Final_Gross = String.format("%.2f", gross);

                        // System.out.println("gross"+Final_Gross);
                        System.out.println(EMP_no + " Gross is " + gross);

                        System.out.println(EMP_no + "  Basic:-" + basic + "  BR:-" + br + "  OT:-" + Final_OThrsAmt + "  Site Inte:-" + Final_SiteIntensive);
//                        System.out.println(EpfNo + "Manual Earnings = " + "noOfSun " + NoOfSundays + " per SunDay:" + AmtperSunday + " TotalSun:" + TotalAmtSunday + "  Poya:" + Poyaday + "  MC:" + MC + "  Other:" + Other);

                        // }
                    } else if (DayShifts < 26) {

//***************** Total Shifts LESS Than 26****************************************************************
//                        Statement st1 = DbConnection.getconnection().createStatement();
//                        ResultSet rs1 = st1.executeQuery("SELECT * FROM employee_reg WHERE EmployeeNo = '" + EMP_no + "' ");
//
//                        while (rs1.next()) {
//
//                            String basic = rs1.getString("BasicSalary");
//                            String br = rs1.getString("BRAllowance");
//                            String shiftRate = rs1.getString("ShiftRate");
//                            EPF_no = rs1.getString("EPFno");
//
//                            EmpName = rs1.getString("NameWithInitials");
//                            EmpRank = rs1.getString("Designation");
//                            EmpCompany = rs1.getString("DefCompany");
//                            EmpLocation = rs1.getString("DefLocation");
//                            String ActiveEPF = rs1.getString("ActiveEPF");
//
//                            Welfare = Double.parseDouble(rs1.getString("Welfare"));
//                            Final_Welfare = String.format("%.2f", Welfare);
//
//                            MCAllowance = Double.parseDouble(rs1.getString("MCAllowance"));
//                            System.out.println(EMP_no + "EMP's MC ALLo IS =" + rs1.getString(47));
//
//                            //Get Company Address
//                            Statement st5 = DbConnection.getconnection().createStatement();
//                            ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
//                            while (rs5.next()) {
//                                ComAddress = rs5.getString("ComAddress");
//                                ComName = rs5.getString("ComName");
//                            }
//                            //Get Posted Location Details
//                            Statement st6 = DbConnection.getconnection().createStatement();
//                            ResultSet rs6 = st6.executeQuery("SELECT * FROM location_reg WHERE LocCode = '" + EmpLocation + "' ");
//                            while (rs6.next()) {
//                                LocType = rs6.getString("LocType");
//
//                            }
                        System.out.println(basic + "  " + br);
                        Double Bsalary = Double.parseDouble(basic);

                        //Basic
                        Final_Basic = String.format("%.2f", Bsalary);

                        //TAx Earn Calc
                        Double D_Final_TaxEarn = (Bsalary / 26) * totalShifts;
                        Final_TaxEarn = String.format("%.2f", D_Final_TaxEarn);
                        System.out.println("TAXEARN" + Final_TaxEarn);

                        //BR Allowance Calc
                        Double brallo = Double.parseDouble(br);
                        Double D_Final_BR_Allo = (brallo / 26) * totalShifts;
                        Final_BR = String.format("%.2f", D_Final_BR_Allo);
                        System.out.println(Final_BR);

                        if (ActiveEPF.equals("1")) {
                            //EPF_Employee 8%
                            epf_employee = ((D_Final_TaxEarn + D_Final_BR_Allo)) * 0.08;
                            Final_Employee_EPF = String.format("%.2f", epf_employee);
                            System.out.println("ETF_Employee 8%" + Final_Employee_EPF);

                            //ETF_Employer 3%
                            etf_employer = ((D_Final_TaxEarn + D_Final_BR_Allo)) * 0.03;
                            Final_Employer_ETF = String.format("%.2f", etf_employer);
                            System.out.println("ETF_Employer 3%" + Final_Employer_ETF);

                            //EPF_Employer 12%
                            epf_employer = ((D_Final_TaxEarn + D_Final_BR_Allo)) * 0.12;
                            Final_Employer_EPF = String.format("%.2f", epf_employer);
                            System.out.println("EPF_Employer 12%" + Final_Employer_EPF);

                        } else {

                            Final_Employee_EPF = "0.00";
                            Final_Employer_ETF = "0.00";
                            Final_Employer_EPF = "0.00";

                        }

                        //OT Calc
                        Double D_Final_OT = ((((Bsalary + brallo) / 200) * 1.5) * 4) * totalShifts;
                        Final_OThrsAmt = String.format("%.2f", D_Final_OT);

                        //OT HRS
                        Double a = totalShifts * 4;
                        Final_OT_HOURS = Double.toString(a);

                        //Site Insentive
//                                Double Shift = Double.parseDouble(shiftRate);
                        Double D_Final_Site_Intensive = (WorkedShiftAmount) - (D_Final_TaxEarn + D_Final_BR_Allo + D_Final_OT);
                        Final_SiteIntensive = String.format("%.2f", D_Final_Site_Intensive);

//                            //Manual Earnings
//                            Statement st2 = DbConnection.getconnection().createStatement();
//                            ResultSet rs2 = st2.executeQuery("SELECT *,COUNT(EPFno) FROM salary_manual_earnings WHERE EPFno = '" + EMP_no + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
//
//                            Double noOfsun = 0.00;
//                            Double perSunDay = 0.00;
//                            Double TotalSun = 0.00;
//                            Double poya = 0.00;
//                            Double mc = 0.00;
//                            Double other = 0.00;
//
//                            while (rs2.next()) {
//
//                                int count = Integer.parseInt(rs2.getString("COUNT(EPFno)"));
//
//                                if (count == 0) {
//
//                                    noOfsun = 0.00;
//                                    perSunDay = 0.00;
//                                    TotalSun = 0.00;
//                                    poya = 0.00;
//                                    mc = 0.00;
//                                    other = 0.00;
//
//                                } else {
//
//                                    noOfsun = Double.parseDouble(rs2.getString(2));
//                                    perSunDay = Double.parseDouble(rs2.getString(3));
//                                    TotalSun = Double.parseDouble(rs2.getString(4));
//                                    poya = Double.parseDouble(rs2.getString(5));
//                                    mc = Double.parseDouble(rs2.getString(6));
//                                    other = Double.parseDouble(rs2.getString(7));
//
//                                    NoOfSundays = String.format("%.2f", noOfsun);
//                                    AmtperSunday = String.format("%.2f", perSunDay);
//                                    TotalAmtSunday = String.format("%.2f", TotalSun);
//                                    Poyaday = String.format("%.2f", poya);
//                                    //MC = String.format("%.2f", (mc+MCAllowance));
//                                    Other = String.format("%.2f", other);
//
//                                }
//                            }
                        MC = String.format("%.2f", MCAllowance);
                        System.out.println("MCALLOWANCE=" + MC);

                        //Gross Salary
                        gross = D_Final_TaxEarn + D_Final_BR_Allo + D_Final_OT + D_Final_Site_Intensive + TotalSun + poya + mc + other + MCAllowance;
                        Final_Gross = String.format("%.2f", gross);

                        System.out.println(EMP_no + " Gross:" + gross);

                        System.out.println(EMP_no + "  Basic:-" + Final_TaxEarn + "  BR:-" + Final_BR + "  OT:-" + Final_OThrsAmt + "  Site Inte:-" + Final_SiteIntensive);
                        // System.out.println(EpfNo + "Manual Earnings = " + "noOfSun " + NoOfSundays + " per SunDay:" + AmtperSunday + " TotalSun:" + TotalAmtSunday + "  Poya:" + Poyaday + "  MC:" + MC + "  Other:" + Other);

                        // }
                    }

                    //Employee Deduction Details**********************************************************************************
                    Double Loan02_Rental = 0.00;
                    Double Loan_Rental = 0.00;
                    Double Advance01_Rental = 0.00;
                    Double Advance02_Rental = 0.00;
                    Double FestivalAdvance_Rental = 0.00;
                    Double Uniform_Rental = 0.00;
                    Double Shoe_Rental = 0.00;

                    //Get details OF Distress_Loan_01
                    Statement Loan_st = DbConnection.getconnection().createStatement();
                    ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                    while (Loan_rs.next()) {

                        String Ref = Loan_rs.getString("LoanReference");
                        String Rent = Loan_rs.getString("Rental");

                        Loan_Rental = Double.parseDouble(Rent);

                        Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                        Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                        while (Loan_settle_rs.next()) {

                            int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                            Double bal = 0.00;
                            if (count == 0) {
                                bal = 0.00;
                            } else {

                                bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                Double bal1 = LoanAmount - (Loan_Rental + bal);
                                Distress_BalanceAmt = String.format("%.2f", bal1);
                            }

                        }

                        Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                        //Save data to Loan_01 Settlement Table
                        Statement Loan01_settle_st = DbConnection.getconnection().createStatement();
                        Loan01_settle_st.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                    }

                    //Get details OF Distress_Loan_02
                    Statement Loan02_st = DbConnection.getconnection().createStatement();
                    ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                    while (Loan02_rs.next()) {

                        String Ref = Loan02_rs.getString("LoanReference");
                        String Rent = Loan02_rs.getString("Rental");

                        Loan02_Rental = Double.parseDouble(Rent);

                        Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                        Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                        while (Loan02_settle_rs.next()) {

                            int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                            Double bal = 0.00;
                            if (count == 0) {
                                bal = 0.00;
                            } else {

                                bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                Distress_BalanceAmt02 = String.format("%.2f", bal1);
                            }

                        }

                        Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                        //Save data to Loan_02 Settlement Table
                        Statement st100 = DbConnection.getconnection().createStatement();
                        st100.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                    }

                    //Get details OF Advance01
                    Statement Ad1_st = DbConnection.getconnection().createStatement();
                    ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                    while (Ad1_rs.next()) {
                        String Ref = null;
                        String Rent = "0";
                        if (Ad1_rs.getString("EPFno") == null) {

                        } else {

                            Ref = Ad1_rs.getString("Reference");
                            Rent = Ad1_rs.getString("SUM(Amount)");

                            Advance01_Rental = Double.parseDouble(Rent);
                            Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
                        }

                        //Save data to Advance01 Settlement Table
                        Statement st101 = DbConnection.getconnection().createStatement();
                        st101.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                        st101.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                    }

                    //Get details OF Advance02
                    Statement Ad2_st = DbConnection.getconnection().createStatement();
                    ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                    while (Ad2_rs.next()) {

                        String Ref = null;
                        String Rent = "0";

                        if (Ad2_rs.getString("EPFno") == null) {

                        } else {

                            Ref = Ad2_rs.getString("Reference");
                            Rent = Ad2_rs.getString("SUM(Amount)");

                            Advance02_Rental = Double.parseDouble(Rent);
                            Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                        }

                        //Save data to Advance02 Settlement Table
                        Statement st103 = DbConnection.getconnection().createStatement();
                        st103.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                        st103.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
                    }

                    //Get details OF Festival Advance 
                    Statement fes_st = DbConnection.getconnection().createStatement();
                    ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                    while (fes_rs.next()) {

                        String Ref = fes_rs.getString("Reference");
                        String Rent = fes_rs.getString("Rental");

                        FestivalAdvance_Rental = Double.parseDouble(Rent);
                        Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                        //Save data to Festival Advance  Settlement Table
                        Statement st102 = DbConnection.getconnection().createStatement();
                        st102.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                        st102.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                    }

                    //Get details OF Uniform Issue 
                    Statement uni_st = DbConnection.getconnection().createStatement();
                    ResultSet uni_rs = uni_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM uniform_issue WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                    while (uni_rs.next()) {

                        int count = Integer.parseInt(uni_rs.getString("COUNT(*)"));

                        if (count == 0) {

                            Uniform_Rental = 0.00;

                        } else {

                            String epf = uni_rs.getString("EPFno");
                            String issueDate = uni_rs.getString("IssueOn");

                            String Ref = epf + "/" + issueDate;
                            String Rent = uni_rs.getString("SUM(Rental)");

                            Uniform_Rental = Double.parseDouble(Rent);
                            Final_Uniform_Rental = String.format("%.2f", Uniform_Rental);

                            //Save data to Uniform Issue  Settlement Table
                            Statement st111 = DbConnection.getconnection().createStatement();
                            st111.executeUpdate("insert into uniform_issue_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                        }

                    }

                    //Get details OF Shoe Issue 
                    Statement shoe_st = DbConnection.getconnection().createStatement();
                    ResultSet shoe_rs = shoe_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM shoes_issue WHERE EPFno = '" + EMP_no + "' and Status = 'on-going' ");
                    while (shoe_rs.next()) {

                        int count = Integer.parseInt(shoe_rs.getString("COUNT(*)"));

                        if (count == 0) {
                            Shoe_Rental = 0.00;
                        } else {

                            String epf = shoe_rs.getString("EPFno");
                            String issueDate = shoe_rs.getString("IssueOn");

                            String Ref = epf + "/" + issueDate;

                            String Rent = shoe_rs.getString("SUM(Rental)");

                            Shoe_Rental = Double.parseDouble(Rent);
                            Final_Shoe_Rental = String.format("%.2f", Shoe_Rental);

                            //Save data to Shoe Issue  Settlement Table
                            Statement st105 = DbConnection.getconnection().createStatement();
                            st105.executeUpdate("insert into shoe_issue_settlement values('" + Ref + "','" + EMP_no + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                        }

                    }

                    //Manual Deductions
                    String SMeal = "0.00";
                    String SFines = "0.00";
                    String SRental = "0.00";
                    String SLessShift = "0.00";
                    String SOtherDeductions = "0.00";
                    String SPaidSalary = "0.00";
                    String SInsuarance = "0.00";
                    String SDeath = "0.00";

                    Double Meal = 0.00;
                    Double Fines = 0.00;
                    Double Rental = 0.00;
                    Double LessShift = 0.00;
                    Double OtherDeductions = 0.00;
                    Double PaidSalary = 0.00;
                    Double Insuarance = 0.00;
                    Double Death = 0.00;

                    //Get details OF Manual Salary Adjustments- Deductions 
                    Statement manual_st = DbConnection.getconnection().createStatement();
                    ResultSet manual_rs = manual_st.executeQuery("SELECT *,COUNT(*),SUM(Fines),SUM(Meal),SUM(Rental),SUM(OtherDeduc),SUM(LessShift),SUM(DeathDonation),SUM(Insuarance),SUM(PaidSalary10th) FROM salary_manual_deductions WHERE EPFno = '" + EMP_no + "' and Month = '" + cmb_month.getSelectedItem().toString() + "' and year = '" + cmb_year.getSelectedItem().toString() + "' ");
                    while (manual_rs.next()) {

                        int i = Integer.parseInt(manual_rs.getString("COUNT(*)"));

                        if (i == 0) {

                        } else {

                            SMeal = manual_rs.getString("SUM(Meal)");
                            SFines = manual_rs.getString("SUM(Fines)");
                            SRental = manual_rs.getString("SUM(Rental)");
                            SLessShift = manual_rs.getString("SUM(LessShift)");
                            SOtherDeductions = manual_rs.getString("SUM(OtherDeduc)");
                            SPaidSalary = manual_rs.getString("SUM(PaidSalary10th)");
                            SInsuarance = manual_rs.getString("SUM(Insuarance)");
                            SDeath = manual_rs.getString("SUM(DeathDonation)");

                            System.out.println("Meal:" + SMeal);
                            System.out.println("SFines:" + SFines);
                            System.out.println("SRentalal:" + SRental);
                            System.out.println("SLessShift:" + SLessShift);

                            //Meal = Double.parseDouble(SMeal);
                            Meal = Double.parseDouble(SMeal);
                            Fines = Double.parseDouble(SFines);
                            Rental = Double.parseDouble(SRental);
                            LessShift = Double.parseDouble(SLessShift);
                            OtherDeductions = Double.parseDouble(SOtherDeductions);
                            PaidSalary = Double.parseDouble(SPaidSalary);
                            Insuarance = Double.parseDouble(SInsuarance);
                            Death = Double.parseDouble(SDeath);
                            Final_Meal = String.format("%.2f", Meal);
                            Final_Fines = String.format("%.2f", Fines);
                            Final_Rental = String.format("%.2f", Rental);
                            Final_LessShift = String.format("%.2f", LessShift);
                            Final_OtherDeductions = String.format("%.2f", OtherDeductions);
                            Final_PaidSalary = String.format("%.2f", PaidSalary);
                            Final_Insuarance = String.format("%.2f", Insuarance);
                            Final_Death = String.format("%.2f", Death);

                        }
                    }

                    Total_Deductions = (Loan02_Rental + Loan_Rental + Advance01_Rental + Advance02_Rental + FestivalAdvance_Rental + Uniform_Rental + Shoe_Rental + Welfare + Meal + Fines + Rental + LessShift + OtherDeductions + PaidSalary + Insuarance + Death + epf_employee);
                    Final_Total_Deductions = String.format("%.2f", Total_Deductions);

                    Double netSalary = gross - Total_Deductions;
                    Final_Net_Salary = String.format("%.2f", netSalary);

                    Double grandTotal = (gross + etf_employer + epf_employer);
                    Final_GrandTotal = String.format("%.2f", grandTotal);

                    String CalculatedShiftRate = String.format("%.2f", WorkedShiftAmount / totalShifts);

//                        Statement sal_st1 = DbConnection.getconnection().createStatement();
//                        ResultSet sal_rs1 = sal_st1.executeQuery("select  COUNT(EPFno) from salary_final  where EPFno='" + EpfNo + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
//                        while (sal_rs1.next()) {
//
//                            int epf_count = Integer.parseInt(sal_rs1.getString("COUNT(EPFno)"));
                    Statement sal_st = DbConnection.getconnection().createStatement();

//                            if (epf_count == 0) {
                    sal_st.executeUpdate("insert into salary_final values('" + EMP_no + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','" + Final_OT_HOURS + "','" + Final_OThrsAmt + "','" + Final_SiteIntensive + "','" + NoOfSundays + "','" + TotalAmtSunday + "','" + Poyaday + "','" + ShiftIntensive + "','" + MC + "','" + Other + "','" + Final_Gross + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','" + Final_Fines + "','" + Final_LessShift + "','" + Final_Rental + "','" + Final_Death + "','" + Final_OtherDeductions + "','" + Final_Insuarance + "','" + Final_Shoe_Rental + "','" + Final_Uniform_Rental + "','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','" + Final_PaidSalary + "','" + Final_Employee_EPF + "','" + Final_Total_Deductions + "','" + Final_Net_Salary + "','" + Final_Employer_EPF + "','" + Final_Employer_ETF + "','" + Final_GrandTotal + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + EmpName + "','" + EmpRank + "','" + TotalShitsWorked + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "','" + LocType + "','" + CalculatedShiftRate + "' , '" + EMP_no + "')");

                    sal_st.executeUpdate("update emp_atten_main set SalaryStatus='salary_processed' where EmployeeNo='" + EMP_no + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
                    // sal_st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_processed' where EMPID='" + EpfNo + "'  and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                    EPF_no = "null";
                    Final_Basic = "0.00";
                    Final_BR = "0.00";
                    Final_TaxEarn = "0.00";
                    Final_OThrsAmt = "0.00";
                    Final_SiteIntensive = "0.00";
                    ShiftIntensive = "0.00";
                    NoOfSundays = "0.00";
                    AmtperSunday = "0.00";
                    TotalAmtSunday = "0.00";
                    Poyaday = "0.00";
                    MC = "0.00";
                    Other = "0.00";
                    Final_Gross = "0.00";
                    Final_Loan_Rental = "0.00";
                    Final_Loan02_Rental = "0.00";
                    Final_Advance01_Rental = "0.00";
                    Final_Advance02_Rental = "0.00";
                    Final_FestivalAdvance_Rental = "0.00";
                    Final_Uniform_Rental = "0.00";
                    Final_Shoe_Rental = "0.00";
                    Final_Welfare = "0.00";
                    Final_Meal = "0.00";
                    Final_Fines = "0.00";
                    Final_Rental = "0.00";
                    Final_LessShift = "0.00";
                    Final_OtherDeductions = "0.00";
                    Final_PaidSalary = "0.00";
                    Final_Insuarance = "0.00";
                    Final_Death = "0.00";
                    Final_Total_Deductions = "0.00";
                    Total_Deductions = 0.00;
                    gross = 0.00;
                    Final_Employee_EPF = "0.00";
                    Final_Employer_ETF = "0.00";
                    Final_Employer_EPF = "0.00";
                    etf_employer = 0.00;
                    epf_employer = 0.00;
                    Final_Net_Salary = "0.00";
                    Final_OT_HOURS = "0.00";
                    Final_GrandTotal = "0.00";
                    Distress_BalanceAmt = "0.00";
                    Distress_BalanceAmt02 = "0.00";
                    TotalShitsWorked = "0.00";
                    EmpName = "0.00";
                    EmpRank = "0.00";
                    EmpLocation = "0.00";
                    EmpCompany = "0.00";
                    ComAddress = "0.00";
                    ComName = "0.00";
                    LocType = "";
                    WorkedShiftAmount = 0.00;
                    Welfare = 0.00;
                    MCAllowance = 0.00;

                    epf_employee = 0.00;
                    DayShifts = 0.00;
                    NightShifts = 0.00;
                    S_DayShifts = "0.00";
                    S_NightShifts = "0.00";

//                            } else {
//
//                                sal_st.executeUpdate(" update salary_final set Basic='" + Final_Basic + "',BRAllowance='" + Final_BR + "',TaxEarn='" + Final_TaxEarn + "',OThrs='" + Final_OT_HOURS + "',OThrsAmt='" + Final_OThrsAmt + "',AttendanceIntensive='" + Final_SiteIntensive + "',NoOfSundays='" + NoOfSundays + "',TotalAmtSunday='" + TotalAmtSunday + "',Poyaday='" + Poyaday + "',ShiftIntensive='" + ShiftIntensive + "',MCAllowance='" + MC + "',OtherAllowance='" + Other + "',GrossEarning='" + Final_Gross + "',Welfare='" + Final_Welfare + "',Advance01='" + Final_Advance01_Rental + "',Advance02='" + Final_Advance02_Rental + "',FestivalAdvance='" + Final_FestivalAdvance_Rental + "',Meal='" + Final_Meal + "',Fines='" + Final_Fines + "',LessShift='" + Final_LessShift + "',Rental='" + Final_Rental + "',DeathDonations='" + Final_Death + "',OtherDeductions='" + Final_OtherDeductions + "',Insuarance='" + Final_Insuarance + "',ShoeDeductions='" + Final_Shoe_Rental + "',UniformDeductions='" + Final_Uniform_Rental + "',DistressLoan='" + Final_Loan_Rental + "',DistressLoanBalance='" + Distress_BalanceAmt + "',PaidSalary10th='" + Final_PaidSalary + "',Employee_EPF_8='" + Final_Employee_EPF + "',TotalDeductions='" + Final_Total_Deductions + "',NetSalary='" + Final_Net_Salary + "',Employer_EPF_12='" + Final_Employer_EPF + "',Employer_ETF_3='" + Final_Employer_ETF + "',GrandTotal='" + Final_GrandTotal + "',SalaryProcessedDate='" + date + "',Name='" + EmpName + "',Rank='" + EmpRank + "',TotalShifts='" + TotalShitsWorked + "',EmpLocation='" + EmpLocation + "',EmpCompany='" + EmpCompany + "',CompanyAddress='" + ComAddress + "',ComName='" + ComName + "',CurrentDate='" + lbl_current_date.getText() + "',DistressLoan02='" + Final_Loan02_Rental + "',DistressLoan02Balance='" + Distress_BalanceAmt02 + "' where EPFno='" + EpfNo + "' and  Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "',LocationType='" + LocType + "'");
//
//                                sal_st.executeUpdate("update emp_atten_main set SalaryStatus='salary_processed' where EPFno='" + EpfNo + "'");
//                                sal_st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_processed' where EMPID='" + EpfNo + "'");
//                            }
//                        }
//
//                    Statement sal_st = DbConnection.getconnection().createStatement();
//                    sal_st.executeUpdate("insert into salary_final values('" + EpfNo + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','" + Final_OT_HOURS + "','" + Final_OThrsAmt + "','" + Final_SiteIntensive + "','" + NoOfSundays + "','" + TotalAmtSunday + "','" + Poyaday + "','" + ShiftIntensive + "','" + MC + "','" + Other + "','" + Final_Gross + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','" + Final_Fines + "','" + Final_LessShift + "','" + Final_Rental + "','" + Final_Death + "','" + Final_OtherDeductions + "','" + Final_Insuarance + "','" + Final_Shoe_Rental + "','" + Final_Uniform_Rental + "','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','" + Final_PaidSalary + "','" + Final_Employee_EPF + "','" + Final_Total_Deductions + "','" + Final_Net_Salary + "','" + Final_Employer_EPF + "','" + Final_Employer_ETF + "','" + Final_GrandTotal + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + lbl_current_date.getText() + "','" + EmpName + "','" + EmpRank + "','" + TotalShitsWorked + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + date + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "')");
                    // }
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, e);
            }

            lbl_atten.setText("   Guards' Salary Procssed...!");
            Color cl = new Color(0, 153, 51);
            lbl_atten.setForeground(cl);
            lbl_atten.setVisible(true);

            delete_null_data_in_settelsment_tables();

            long duration = System.currentTimeMillis() - start;

            DateFormat df = new SimpleDateFormat("HH 'Hours', mm 'Min(s),' ss 'Second(s)'");
            df.setTimeZone(TimeZone.getTimeZone("GMT+0"));
            System.out.println(df.format(new Date(duration)));
            JOptionPane.showMessageDialog(rootPane, "Process Completed in " + df.format(new Date(duration)));

//            btn_SSS_salary_process.setEnabled(false);
        }

    }

    private void SSS_EMP_SALARY_NEW_FORMULA() {

        long start = System.currentTimeMillis();

        Date Date = jDateChooser1.getDate();

        if (Date == null) {

            JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");

        } else {

            salary_ReSet();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

//Earnings
            String Final_Basic = "0.00";
            String Final_BR = "0.00";
            String Final_TaxEarn = "0.00";
            String Final_OThrsAmt = "0.00";
            String Final_SiteIntensive = "0.00";
            String ShiftIntensive = "0.00";

            String NoOfSundays = "0.00";
            String AmtperSunday = "0.00";
            String TotalAmtSunday = "0.00";
            String Poyaday = "0.00";
            String MC = "0.00";
            String Other = "0.00";

            String Final_Gross = "0.00";

            //Deductions
            String Final_Loan_Rental = "0.00";
            String Final_Loan02_Rental = "0.00";
            String Final_Advance01_Rental = "0.00";
            String Final_Advance02_Rental = "0.00";
            String Final_FestivalAdvance_Rental = "0.00";
            String Final_Uniform_Rental = "0.00";
            String Final_Shoe_Rental = "0.00";

            String Final_Welfare = "0.00";
            String Final_Meal = "0.00";
            String Final_Fines = "0.00";
            String Final_Rental = "0.00";
            String Final_LessShift = "0.00";
            String Final_OtherDeductions = "0.00";
            String Final_PaidSalary = "0.00";
            String Final_Insuarance = "0.00";
            String Final_Death = "0.00";

            String Final_Total_Deductions = "0.00";

            //Double
            Double Total_Deductions = 0.00;
            Double gross = 0.00;

            //EFP & ETF
            String Final_Employee_EPF = "0.00";
            String Final_Employer_ETF = "0.00";
            String Final_Employer_EPF = "0.00";

            Double etf_employer = 0.00;
            Double epf_employer = 0.00;
            Double epf_employee = 0.00;

            //
            String Final_Net_Salary = "0.00";
            String Final_OT_HOURS = "0.00";
            String Final_GrandTotal = "0.00";
            String Distress_BalanceAmt = "0.00";
            String Distress_BalanceAmt02 = "0.00";

            String TotalShitsWorked = "0.00";
            String EmpName = "";
            String EmpRank = "";
            String EmpLocation = "";
            String EmpCompany = "";
            String ComAddress = "";
            String ComName = "";
            String LocType = "";

//            Double RC__shift_tot = 0.00;
//            Double normal_shift_total = 0.00;
            Double WorkedShiftAmount = 0.00;

            Double Welfare = 0.00;
            String EpfNo = "";

            Double MCAllowance = 0.00;
//            String mcAllow = "";

            Double D_OT1 = 0.00;
            Double D_OT2 = 0.00;
            Double D_ESOT = 0.00;

            try {

                Statement st_main = DbConnection.getconnection().createStatement();
                ResultSet rs_main = st_main.executeQuery("Select * from emp_atten_main where Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' and Status= 'processed' and SalaryStatus='salary_pending' and Company='SSS' group by EPFno");
                while (rs_main.next()) {
                    EpfNo = rs_main.getString("EPFno");

                    Statement st = DbConnection.getconnection().createStatement();
                    ResultSet rs = st.executeQuery("Select *,COUNT(*),SUM(DayShift+NightShift),SUM(HalfDayShift),SUM(EffectiveRate) from emp_atten_main where Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' and Status= 'processed' and SalaryStatus='salary_pending' and EPFno='" + EpfNo + "'");

                    while (rs.next()) {

                        // String sum = rs.getString("SUM(DayShift+NightShift)");
                        Double full = Double.parseDouble(rs.getString("SUM(DayShift+NightShift)"));
                        Double half = Double.parseDouble(rs.getString("SUM(HalfDayShift)"));

                        //rate changed shift details                 
//                        Statement st3 = DbConnection.getconnection().createStatement();
//                        ResultSet rs3 = st3.executeQuery("select * , COUNT(*) ,SUM(EffectiveRate) from emp_atten_main where EPFno='" + EpfNo + "' and Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' ");
//                        while (rs3.next()) {
                        int coun = Integer.parseInt(rs.getString("COUNT(*)"));

                        if (coun == 0) {
                            WorkedShiftAmount = 0.00;

                        } else {
                            WorkedShiftAmount = Double.parseDouble(rs.getString("SUM(EffectiveRate)"));

                        }
//                        }
                        Double totalShifts = full + (half / 2);
                        TotalShitsWorked = Double.toString(totalShifts);

                        System.out.println("******************Total Shifts= " + EpfNo + " " + totalShifts);

//                    normal_shift_total = totalShifts - RC__shift_tot;
                        System.out.println("total Shift" + totalShifts);

                        Statement st11 = DbConnection.getconnection().createStatement();
                        ResultSet rs1 = st11.executeQuery("SELECT * FROM employee_reg WHERE EPFno = '" + EpfNo + "' ");

                        while (rs1.next()) {

                            String basic = rs1.getString("BasicSalary");
                            String br = rs1.getString("BRAllowance");
                            String shiftRate = rs1.getString("ShiftRate");
                            EmpName = rs1.getString("NameWithInitials");
                            EmpRank = rs1.getString("Designation");
                            EmpCompany = rs1.getString("DefCompany");
                            EmpLocation = rs1.getString("DefLocation");
                            String ActiveEPF = rs1.getString("ActiveEPF");

                            Welfare = Double.parseDouble(rs1.getString("Welfare"));
                            Final_Welfare = String.format("%.2f", Welfare);

                            MCAllowance = Double.parseDouble(rs1.getString("MCAllowance"));
                            System.out.println(EpfNo + "EMP's MC ALLo IS =" + rs1.getString(47));

                            //Get Company Address
                            Statement st5 = DbConnection.getconnection().createStatement();
                            ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                            while (rs5.next()) {
                                ComAddress = rs5.getString("ComAddress");
                                ComName = rs5.getString("ComName");
                            }
                            //Get Posted Location Details
                            Statement st6 = DbConnection.getconnection().createStatement();
                            ResultSet rs6 = st6.executeQuery("SELECT * FROM location_reg WHERE LocCode = '" + EmpLocation + "' ");
                            while (rs6.next()) {
                                LocType = rs6.getString("LocType");

                            }

                            System.out.println(basic + "  " + br);

                            Double Bsalary = Double.parseDouble(basic);
                            Double brallo = Double.parseDouble(br);

                            Double D_Final_TaxEarn = 0.00;

                            if (totalShifts >= 26) {
//***************** Total Shifts MORE Than 26****************************************************************
                                //Basic
                                Final_Basic = String.format("%.2f", Bsalary);

                                //BR Allowance
                                Final_BR = String.format("%.2f", brallo);

                                //TaxEarn
                                D_Final_TaxEarn = Bsalary + brallo;
                                Final_TaxEarn = String.format("%.2f", D_Final_TaxEarn);

                                //OT1  >>>> Final_OThrsAmt
                                D_OT1 = (D_Final_TaxEarn / 200) * 1.5 * 3 * regular_shift;
                                Final_OThrsAmt = String.format("%.2f", D_OT1);

                                //Extra OT Shifts
                                Double D_ExtraOTHr = totalShifts - regular_shift;

                                //OT HRS
                                Double a = (totalShifts * 3) + (D_ExtraOTHr * 12);
                                Final_OT_HOURS = Double.toString(a);

                                //OT2 >>>> Final_SiteIntensive
                                D_OT2 = (D_Final_TaxEarn / 200) * 1.5 * D_ExtraOTHr * 12;
                                Final_SiteIntensive = String.format("%.2f", D_OT2);

                                //ESOT >>> ShiftIntensive
                                D_ESOT = WorkedShiftAmount - (D_Final_TaxEarn + D_OT1 + D_OT2);
                                ShiftIntensive = String.format("%.2f", D_ESOT);

                                //Salary Check
                                Double D_check = D_Final_TaxEarn + D_OT1 + D_OT2 + D_ESOT;

                                System.out.println("============Worked Shift Amount===" + WorkedShiftAmount);
                                System.out.println("============D_check Amount===" + D_check);

//                                int x = (int) WorkedShiftAmount ;
                                if (WorkedShiftAmount > D_check) {
                                    System.out.println("========================LOKUIIIIII===============");
                                }
                                if (WorkedShiftAmount < D_check) {
                                    System.out.println("========================PODiiIIIIII===============");
                                }
                                if (WorkedShiftAmount == D_check) {
                                    System.out.println("========================ELA KOLLEK NEH!!!!!!===============");
                                }

                            } else {
//***************** Total Shifts LESS Than 26****************************************************************

                                //Basic
                                Double D_Final_Basic = (Bsalary / 26) * totalShifts;
                                Final_Basic = String.format("%.2f", D_Final_Basic);

                                //BR Allowance Calc
                                Double D_Final_BR_Allo = (brallo / 26) * totalShifts;
                                Final_BR = String.format("%.2f", D_Final_BR_Allo);

                                //TAx Earn Calc
                                D_Final_TaxEarn = D_Final_Basic + D_Final_BR_Allo;
                                Final_TaxEarn = String.format("%.2f", D_Final_TaxEarn);

                                //OT1  >>>> Final_OThrsAmt
                                D_OT1 = (D_Final_TaxEarn / 200) * 1.5 * 3 * regular_shift;
                                Final_OThrsAmt = String.format("%.2f", D_OT1);

                                //Extra OT Shifts
                                Double D_ExtraOTHr = totalShifts - regular_shift;

                                //OT HRS
                                Double a = (totalShifts * 3) + (D_ExtraOTHr * 12);
                                Final_OT_HOURS = Double.toString(a);

                                //OT2 >>>> Final_SiteIntensive
                                D_OT2 = (D_Final_TaxEarn / 200) * 1.5 * D_ExtraOTHr * 12;
                                Final_SiteIntensive = String.format("%.2f", D_OT2);

                                //ESOT >>> ShiftIntensive
                                D_ESOT = WorkedShiftAmount - (D_Final_TaxEarn + D_OT1 + D_OT2);
                                ShiftIntensive = String.format("%.2f", D_ESOT);

                                //Salary Check
                                Double D_check = D_Final_TaxEarn + D_OT1 + D_OT2 + D_ESOT;

                                System.out.println("============Worked Shift Amount===" + WorkedShiftAmount);
                                System.out.println("============D_check===" + D_check);

                                if (WorkedShiftAmount > D_check) {
                                    System.out.println("========================LOKUIIIIII===============");
                                }
                                if (WorkedShiftAmount < D_check) {
                                    System.out.println("========================PODiiIIIIII===============");
                                }
                                if (WorkedShiftAmount == D_check) {
                                    System.out.println("========================ELA KOLLEK NEH!!!!!!===============");
                                }

                            }

                            if (ActiveEPF.equals("1")) {
                                //EPF_Employee 8%
                                epf_employee = ((D_Final_TaxEarn)) * 0.08;
                                Final_Employee_EPF = String.format("%.2f", epf_employee);

                                //ETF_Employer 3%
                                etf_employer = ((D_Final_TaxEarn)) * 0.03;
                                Final_Employer_ETF = String.format("%.2f", etf_employer);

                                //EPF_Employer 12%
                                epf_employer = ((D_Final_TaxEarn)) * 0.12;
                                Final_Employer_EPF = String.format("%.2f", epf_employer);

                            } else {

                                Final_Employee_EPF = "0.00";
                                Final_Employer_ETF = "0.00";
                                Final_Employer_EPF = "0.00";

                            }

                            //Manual Earnings
                            Statement st2 = DbConnection.getconnection().createStatement();
                            ResultSet rs2 = st2.executeQuery("SELECT * FROM salary_manual_earnings WHERE EPFno = '" + EpfNo + "' and Month='" + cmb_month.getSelectedItem().toString() + "'and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                            Double noOfsun = 0.00;
                            Double perSunDay = 0.00;
                            Double TotalSun = 0.00;
                            Double poya = 0.00;
                            Double mc = 0.00;
                            Double other = 0.00;

                            while (rs2.next()) {

                                noOfsun = Double.parseDouble(rs2.getString(2));
                                perSunDay = Double.parseDouble(rs2.getString(3));
                                TotalSun = Double.parseDouble(rs2.getString(4));
                                poya = Double.parseDouble(rs2.getString(5));
                                mc = Double.parseDouble(rs2.getString(6));
                                other = Double.parseDouble(rs2.getString(7));

                                NoOfSundays = String.format("%.2f", noOfsun);
                                AmtperSunday = String.format("%.2f", perSunDay);
                                TotalAmtSunday = String.format("%.2f", TotalSun);
                                Poyaday = String.format("%.2f", poya);
                                // MC = String.format("%.2f", (mc+MCAllowance));
                                Other = String.format("%.2f", other);

                            }

                            MC = String.format("%.2f", MCAllowance);
                            System.out.println("MCALLOWANCE=" + MC);

                            //Gross Salary
                            gross = D_Final_TaxEarn + D_OT1 + D_OT2 + D_ESOT + TotalSun + poya + mc + MCAllowance + other;
                            Final_Gross = String.format("%.2f", gross);

                            // System.out.println("gross"+Final_Gross);
                            System.out.println(EpfNo + " Gross is " + gross);

                            System.out.println(EpfNo + "  Basic:-" + basic + "  BR:-" + br + "  OT:-" + Final_OThrsAmt + "  Site Inte:-" + Final_SiteIntensive);
//                        System.out.println(EpfNo + "Manual Earnings = " + "noOfSun " + NoOfSundays + " per SunDay:" + AmtperSunday + " TotalSun:" + TotalAmtSunday + "  Poya:" + Poyaday + "  MC:" + MC + "  Other:" + Other);

                        }

                        //Employee Deduction Details**********************************************************************************
                        Double Loan02_Rental = 0.00;
                        Double Loan_Rental = 0.00;
                        Double Advance01_Rental = 0.00;
                        Double Advance02_Rental = 0.00;
                        Double FestivalAdvance_Rental = 0.00;
                        Double Uniform_Rental = 0.00;
                        Double Shoe_Rental = 0.00;

                        //Get details OF Distress_Loan_01
                        Statement Loan_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (Loan_rs.next()) {

                            String Ref = Loan_rs.getString("LoanReference");
                            String Rent = Loan_rs.getString("Rental");

                            Loan_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                            Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                            while (Loan_settle_rs.next()) {

                                int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan_Rental + bal);
                                    Distress_BalanceAmt = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                            //Save data to Loan_01 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Distress_Loan_02
                        Statement Loan02_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (Loan02_rs.next()) {

                            String Ref = Loan02_rs.getString("LoanReference");
                            String Rent = Loan02_rs.getString("Rental");

                            Loan02_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                            Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                            while (Loan02_settle_rs.next()) {

                                int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                    Distress_BalanceAmt02 = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                            //Save data to Loan_02 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Advance01
                        Statement Ad1_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (Ad1_rs.next()) {
                            String Ref = null;
                            String Rent = "0";
                            if (Ad1_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad1_rs.getString("Reference");
                                Rent = Ad1_rs.getString("SUM(Amount)");

                                Advance01_Rental = Double.parseDouble(Rent);
                                Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
                            }

                            //Save data to Advance01 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                        }

                        //Get details OF Advance02
                        Statement Ad2_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (Ad2_rs.next()) {

                            String Ref = null;
                            String Rent = "0";

                            if (Ad2_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad2_rs.getString("Reference");
                                Rent = Ad2_rs.getString("SUM(Amount)");

                                Advance02_Rental = Double.parseDouble(Rent);
                                Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                            }

                            //Save data to Advance02 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get details OF Festival Advance 
                        Statement fes_st = DbConnection.getconnection().createStatement();
                        ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (fes_rs.next()) {

                            String Ref = fes_rs.getString("Reference");
                            String Rent = fes_rs.getString("Rental");

                            FestivalAdvance_Rental = Double.parseDouble(Rent);
                            Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                            //Save data to Festival Advance  Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get details OF Uniform Issue 
                        Statement uni_st = DbConnection.getconnection().createStatement();
                        ResultSet uni_rs = uni_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM uniform_issue WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (uni_rs.next()) {

                            int count = Integer.parseInt(uni_rs.getString("COUNT(*)"));

                            if (count == 0) {

                                Uniform_Rental = 0.00;

                            } else {

                                String epf = uni_rs.getString("EPFno");
                                String issueDate = uni_rs.getString("IssueOn");

                                String Ref = epf + "/" + issueDate;
                                String Rent = uni_rs.getString("SUM(Rental)");

                                Uniform_Rental = Double.parseDouble(Rent);
                                Final_Uniform_Rental = String.format("%.2f", Uniform_Rental);

                                //Save data to Uniform Issue  Settlement Table
                                Statement st1 = DbConnection.getconnection().createStatement();
                                st1.executeUpdate("insert into uniform_issue_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            }

                        }

                        //Get details OF Shoe Issue 
                        Statement shoe_st = DbConnection.getconnection().createStatement();
                        ResultSet shoe_rs = shoe_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM shoes_issue WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (shoe_rs.next()) {

                            int count = Integer.parseInt(shoe_rs.getString("COUNT(*)"));

                            if (count == 0) {
                                Shoe_Rental = 0.00;
                            } else {

                                String epf = shoe_rs.getString("EPFno");
                                String issueDate = shoe_rs.getString("IssueOn");

                                String Ref = epf + "/" + issueDate;

                                String Rent = shoe_rs.getString("SUM(Rental)");

                                Shoe_Rental = Double.parseDouble(Rent);
                                Final_Shoe_Rental = String.format("%.2f", Shoe_Rental);

                                //Save data to Shoe Issue  Settlement Table
                                Statement st1 = DbConnection.getconnection().createStatement();
                                st1.executeUpdate("insert into shoe_issue_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            }

                        }

                        //Manual Deductions
                        String SMeal = "0.00";
                        String SFines = "0.00";
                        String SRental = "0.00";
                        String SLessShift = "0.00";
                        String SOtherDeductions = "0.00";
                        String SPaidSalary = "0.00";
                        String SInsuarance = "0.00";
                        String SDeath = "0.00";

                        Double Meal = 0.00;
                        Double Fines = 0.00;
                        Double Rental = 0.00;
                        Double LessShift = 0.00;
                        Double OtherDeductions = 0.00;
                        Double PaidSalary = 0.00;
                        Double Insuarance = 0.00;
                        Double Death = 0.00;

                        //Get details OF Manual Salary Adjustments- Deductions 
                        Statement manual_st = DbConnection.getconnection().createStatement();
                        ResultSet manual_rs = manual_st.executeQuery("SELECT *,COUNT(*),SUM(Fines),SUM(Meal),SUM(Rental),SUM(OtherDeduc),SUM(LessShift),SUM(DeathDonation),SUM(Insuarance),SUM(PaidSalary10th) FROM salary_manual_deductions WHERE EPFno = '" + EpfNo + "' and Month = '" + cmb_month.getSelectedItem().toString() + "' and year = '" + cmb_year.getSelectedItem().toString() + "' ");
                        while (manual_rs.next()) {

                            int i = Integer.parseInt(manual_rs.getString("COUNT(*)"));

                            if (i == 0) {

                            } else {

                                SMeal = manual_rs.getString("SUM(Meal)");
                                SFines = manual_rs.getString("SUM(Fines)");
                                SRental = manual_rs.getString("SUM(Rental)");
                                SLessShift = manual_rs.getString("SUM(LessShift)");
                                SOtherDeductions = manual_rs.getString("SUM(OtherDeduc)");
                                SPaidSalary = manual_rs.getString("SUM(PaidSalary10th)");
                                SInsuarance = manual_rs.getString("SUM(Insuarance)");
                                SDeath = manual_rs.getString("SUM(DeathDonation)");

                                System.out.println("Meal:" + SMeal);
                                System.out.println("SFines:" + SFines);
                                System.out.println("SRentalal:" + SRental);
                                System.out.println("SLessShift:" + SLessShift);

                                //Meal = Double.parseDouble(SMeal);
                                Meal = Double.parseDouble(SMeal);
                                Fines = Double.parseDouble(SFines);
                                Rental = Double.parseDouble(SRental);
                                LessShift = Double.parseDouble(SLessShift);
                                OtherDeductions = Double.parseDouble(SOtherDeductions);
                                PaidSalary = Double.parseDouble(SPaidSalary);
                                Insuarance = Double.parseDouble(SInsuarance);
                                Death = Double.parseDouble(SDeath);
                                Final_Meal = String.format("%.2f", Meal);
                                Final_Fines = String.format("%.2f", Fines);
                                Final_Rental = String.format("%.2f", Rental);
                                Final_LessShift = String.format("%.2f", LessShift);
                                Final_OtherDeductions = String.format("%.2f", OtherDeductions);
                                Final_PaidSalary = String.format("%.2f", PaidSalary);
                                Final_Insuarance = String.format("%.2f", Insuarance);
                                Final_Death = String.format("%.2f", Death);

                            }
                        }

                        Total_Deductions = (Loan02_Rental + Loan_Rental + Advance01_Rental + Advance02_Rental + FestivalAdvance_Rental + Uniform_Rental + Shoe_Rental + Welfare + Meal + Fines + Rental + LessShift + OtherDeductions + PaidSalary + Insuarance + Death + epf_employee);
                        Final_Total_Deductions = String.format("%.2f", Total_Deductions);

                        Double netSalary = gross - Total_Deductions;
                        Final_Net_Salary = String.format("%.2f", netSalary);

                        Double grandTotal = (gross + etf_employer + epf_employer);
                        Final_GrandTotal = String.format("%.2f", grandTotal);

                        String CalculatedShiftRate = String.format("%.2f", WorkedShiftAmount / totalShifts);

//                        Statement sal_st1 = DbConnection.getconnection().createStatement();
//                        ResultSet sal_rs1 = sal_st1.executeQuery("select  COUNT(EPFno) from salary_final  where EPFno='" + EpfNo + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
//                        while (sal_rs1.next()) {
//
//                            int epf_count = Integer.parseInt(sal_rs1.getString("COUNT(EPFno)"));
                        Statement sal_st = DbConnection.getconnection().createStatement();

//                            if (epf_count == 0) {
                        sal_st.executeUpdate("insert into salary_final values('" + EpfNo + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','" + Final_OT_HOURS + "','" + Final_OThrsAmt + "','" + Final_SiteIntensive + "','" + NoOfSundays + "','" + TotalAmtSunday + "','" + Poyaday + "','" + ShiftIntensive + "','" + MC + "','" + Other + "','" + Final_Gross + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','" + Final_Fines + "','" + Final_LessShift + "','" + Final_Rental + "','" + Final_Death + "','" + Final_OtherDeductions + "','" + Final_Insuarance + "','" + Final_Shoe_Rental + "','" + Final_Uniform_Rental + "','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','" + Final_PaidSalary + "','" + Final_Employee_EPF + "','" + Final_Total_Deductions + "','" + Final_Net_Salary + "','" + Final_Employer_EPF + "','" + Final_Employer_ETF + "','" + Final_GrandTotal + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + EmpName + "','" + EmpRank + "','" + TotalShitsWorked + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "','" + LocType + "','" + CalculatedShiftRate + "')");

                        sal_st.executeUpdate("update emp_atten_main set SalaryStatus='salary_processed' where EPFno='" + EpfNo + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
                        // sal_st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_processed' where EMPID='" + EpfNo + "'  and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                        Final_Basic = "0.00";
                        Final_BR = "0.00";
                        Final_TaxEarn = "0.00";
                        Final_OThrsAmt = "0.00";
                        Final_SiteIntensive = "0.00";
                        ShiftIntensive = "0.00";
                        NoOfSundays = "0.00";
                        AmtperSunday = "0.00";
                        TotalAmtSunday = "0.00";
                        Poyaday = "0.00";
                        MC = "0.00";
                        Other = "0.00";
                        Final_Gross = "0.00";
                        Final_Loan_Rental = "0.00";
                        Final_Loan02_Rental = "0.00";
                        Final_Advance01_Rental = "0.00";
                        Final_Advance02_Rental = "0.00";
                        Final_FestivalAdvance_Rental = "0.00";
                        Final_Uniform_Rental = "0.00";
                        Final_Shoe_Rental = "0.00";
                        Final_Welfare = "0.00";
                        Final_Meal = "0.00";
                        Final_Fines = "0.00";
                        Final_Rental = "0.00";
                        Final_LessShift = "0.00";
                        Final_OtherDeductions = "0.00";
                        Final_PaidSalary = "0.00";
                        Final_Insuarance = "0.00";
                        Final_Death = "0.00";
                        Final_Total_Deductions = "0.00";
                        Total_Deductions = 0.00;
                        gross = 0.00;
                        Final_Employee_EPF = "0.00";
                        Final_Employer_ETF = "0.00";
                        Final_Employer_EPF = "0.00";
                        etf_employer = 0.00;
                        epf_employer = 0.00;
                        Final_Net_Salary = "0.00";
                        Final_OT_HOURS = "0.00";
                        Final_GrandTotal = "0.00";
                        Distress_BalanceAmt = "0.00";
                        Distress_BalanceAmt02 = "0.00";
                        TotalShitsWorked = "0.00";
                        EmpName = "0.00";
                        EmpRank = "0.00";
                        EmpLocation = "0.00";
                        EmpCompany = "0.00";
                        ComAddress = "0.00";
                        ComName = "0.00";
                        LocType = "";
                        WorkedShiftAmount = 0.00;
                        Welfare = 0.00;
                        MCAllowance = 0.00;

                        epf_employee = 0.00;

//                            } else {
//
//                                sal_st.executeUpdate(" update salary_final set Basic='" + Final_Basic + "',BRAllowance='" + Final_BR + "',TaxEarn='" + Final_TaxEarn + "',OThrs='" + Final_OT_HOURS + "',OThrsAmt='" + Final_OThrsAmt + "',AttendanceIntensive='" + Final_SiteIntensive + "',NoOfSundays='" + NoOfSundays + "',TotalAmtSunday='" + TotalAmtSunday + "',Poyaday='" + Poyaday + "',ShiftIntensive='" + ShiftIntensive + "',MCAllowance='" + MC + "',OtherAllowance='" + Other + "',GrossEarning='" + Final_Gross + "',Welfare='" + Final_Welfare + "',Advance01='" + Final_Advance01_Rental + "',Advance02='" + Final_Advance02_Rental + "',FestivalAdvance='" + Final_FestivalAdvance_Rental + "',Meal='" + Final_Meal + "',Fines='" + Final_Fines + "',LessShift='" + Final_LessShift + "',Rental='" + Final_Rental + "',DeathDonations='" + Final_Death + "',OtherDeductions='" + Final_OtherDeductions + "',Insuarance='" + Final_Insuarance + "',ShoeDeductions='" + Final_Shoe_Rental + "',UniformDeductions='" + Final_Uniform_Rental + "',DistressLoan='" + Final_Loan_Rental + "',DistressLoanBalance='" + Distress_BalanceAmt + "',PaidSalary10th='" + Final_PaidSalary + "',Employee_EPF_8='" + Final_Employee_EPF + "',TotalDeductions='" + Final_Total_Deductions + "',NetSalary='" + Final_Net_Salary + "',Employer_EPF_12='" + Final_Employer_EPF + "',Employer_ETF_3='" + Final_Employer_ETF + "',GrandTotal='" + Final_GrandTotal + "',SalaryProcessedDate='" + date + "',Name='" + EmpName + "',Rank='" + EmpRank + "',TotalShifts='" + TotalShitsWorked + "',EmpLocation='" + EmpLocation + "',EmpCompany='" + EmpCompany + "',CompanyAddress='" + ComAddress + "',ComName='" + ComName + "',CurrentDate='" + lbl_current_date.getText() + "',DistressLoan02='" + Final_Loan02_Rental + "',DistressLoan02Balance='" + Distress_BalanceAmt02 + "' where EPFno='" + EpfNo + "' and  Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "',LocationType='" + LocType + "'");
//
//                                sal_st.executeUpdate("update emp_atten_main set SalaryStatus='salary_processed' where EPFno='" + EpfNo + "'");
//                                sal_st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_processed' where EMPID='" + EpfNo + "'");
//                            }
//                        }
//
//                    Statement sal_st = DbConnection.getconnection().createStatement();
//                    sal_st.executeUpdate("insert into salary_final values('" + EpfNo + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','" + Final_OT_HOURS + "','" + Final_OThrsAmt + "','" + Final_SiteIntensive + "','" + NoOfSundays + "','" + TotalAmtSunday + "','" + Poyaday + "','" + ShiftIntensive + "','" + MC + "','" + Other + "','" + Final_Gross + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','" + Final_Fines + "','" + Final_LessShift + "','" + Final_Rental + "','" + Final_Death + "','" + Final_OtherDeductions + "','" + Final_Insuarance + "','" + Final_Shoe_Rental + "','" + Final_Uniform_Rental + "','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','" + Final_PaidSalary + "','" + Final_Employee_EPF + "','" + Final_Total_Deductions + "','" + Final_Net_Salary + "','" + Final_Employer_EPF + "','" + Final_Employer_ETF + "','" + Final_GrandTotal + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + lbl_current_date.getText() + "','" + EmpName + "','" + EmpRank + "','" + TotalShitsWorked + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + date + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "')");
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, e);
            }

            lbl_atten.setText("    SSS Guards Salary Procssed...!");
            Color cl = new Color(0, 153, 51);
            lbl_atten.setForeground(cl);
            lbl_atten.setVisible(true);

            delete_null_data_in_settelsment_tables();

            long duration = System.currentTimeMillis() - start;

            DateFormat df = new SimpleDateFormat("HH 'Hours', mm 'Min(s),' ss 'Second(s)'");
            df.setTimeZone(TimeZone.getTimeZone("GMT+0"));
            System.out.println(df.format(new Date(duration)));
            JOptionPane.showMessageDialog(rootPane, "Process Completed in " + df.format(new Date(duration)));

//            btn_SSS_salary_process.setEnabled(false);
        }
//Salary NEW FORMULA
    }


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmb_year = new javax.swing.JComboBox();
        cmb_month = new javax.swing.JComboBox();
        lbl_current_date = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel33 = new javax.swing.JLabel();
        lbl_atten2 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel34 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        lbl_atten = new javax.swing.JLabel();
        salary_process = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        lbl_runtime = new javax.swing.JLabel();
        cb_final_salary = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmb_year.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        cmb_year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022" }));
        cmb_year.setSelectedIndex(7);
        cmb_year.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_yearPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_year, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, -1, -1));

        cmb_month.setFont(new java.awt.Font("Georgia", 0, 15)); // NOI18N
        cmb_month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        cmb_month.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_monthPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_month, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 110, -1));

        lbl_current_date.setText("jLabel1");
        getContentPane().add(lbl_current_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 110, -1));

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        jLabel1.setText("Salary Process ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 130, 40));
        getContentPane().add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 460, 460, 10));

        jLabel33.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel33.setText("Pay Date  :-");
        getContentPane().add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, -1, 20));

        lbl_atten2.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        lbl_atten2.setForeground(new java.awt.Color(153, 0, 51));
        lbl_atten2.setText("**Make sure you select the correct Month & Year");
        getContentPane().add(lbl_atten2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 300, 20));
        getContentPane().add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 460, 10));
        getContentPane().add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 460, 10));

        jLabel34.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel34.setText("Effective Salary Month / Year  :-");
        getContentPane().add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 20));

        jDateChooser1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        getContentPane().add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 130, 25));

        lbl_atten.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        lbl_atten.setForeground(new java.awt.Color(0, 153, 51));
        lbl_atten.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_atten.setText("                 Salary  Processed  Succesfully...!");
        lbl_atten.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Status:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Georgia", 0, 12))); // NOI18N
        getContentPane().add(lbl_atten, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 440, 50));

        salary_process.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        salary_process.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Workflow-48.png"))); // NOI18N
        salary_process.setText("Process");
        salary_process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salary_processActionPerformed(evt);
            }
        });
        getContentPane().add(salary_process, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, 240, 50));

        jButton6.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Print.png"))); // NOI18N
        jButton6.setText("Print Pay Slips");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, 380, -1));

        jComboBox1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ground & Admin Staff", "Director Staff" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 220, 30));

        lbl_runtime.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lbl_runtime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getContentPane().add(lbl_runtime, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 320, 20));

        cb_final_salary.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        cb_final_salary.setText("Final Salary Process");
        cb_final_salary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_final_salaryActionPerformed(evt);
            }
        });
        getContentPane().add(cb_final_salary, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 170, -1));

        jLabel2.setText(" ");
        jLabel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Salary Process", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Georgia", 0, 18), new java.awt.Color(0, 0, 204))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 440, 230));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmb_yearPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_yearPopupMenuWillBecomeInvisible
        days_per_month();
        month_end();
//        int month = 0;
//        month = cmb_month.getSelectedIndex();
//        String year = cmb_year.getSelectedItem().toString();
//
//        if (month == 11) {
//
//            month = 0;
//            //            Object m1 = cmb_month.getItemAt(month);
//            //            System.out.println(m1);
//            //            System.out.println("0" + (month + 1));
//
//            int x = Integer.parseInt(year);
//            int nextYear = x + 1;
//
//            lbl_startDate.setText(nextYear + "-" + ("0" + (month + 1)) + "-" + "01");
//            lbl_endDate.setText(nextYear + "-" + ("0" + (month + 1)) + "-" + "10");
//
//        } else {
//            int next = month + 2;
//            String nextM = Integer.toString(next);
//            int len = nextM.length();
//
//            //            Object mm = cmb_month.getItemAt(month + 1);
//            //            System.out.println(mm);
//            if (len == 1) {
//                //                System.out.println("0" + nextM);
//
//                lbl_startDate.setText(year + "-" + ("0" + (nextM)) + "-" + "01");
//                lbl_endDate.setText(year + "-" + ("0" + (nextM)) + "-" + "10");
//
//            } else {
//                //                System.out.println(nextM);
//                lbl_startDate.setText(year + "-" + ((nextM)) + "-" + "01");
//                lbl_endDate.setText(year + "-" + ((nextM)) + "-" + "10");
//
//            }
//
//        }
    }//GEN-LAST:event_cmb_yearPopupMenuWillBecomeInvisible

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        MAIN.jMenuItem10.setEnabled(true);    // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        if (salary_process.isEnabled()) {
            this.dispose();
        } else {

        }


    }//GEN-LAST:event_formWindowClosing

    private void salary_processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salary_processActionPerformed

        Thread hilo = new Thread(new Runnable() {

            @Override
            public void run() {
                long start = System.currentTimeMillis();

                try {

                    if (jComboBox1.getSelectedIndex() == 0) {

                        if (cb_final_salary.isSelected()) {

                            Connection con = DbConnection.getconnection();
                            int count_lock = 0;
                            PreparedStatement pst_lock = con.prepareStatement("select COUNT(*) from salary_final_site_employees where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and IsLocked='1'");
                            ResultSet rs_lock = pst_lock.executeQuery();
                            while (rs_lock.next()) {

                                count_lock = rs_lock.getInt("COUNT(*)");

                            }

                            if (count_lock > 1) {

                                JOptionPane.showMessageDialog(rootPane, "Salary Locked...!");

                            } else {

                                int count = 0;
                                PreparedStatement pst = con.prepareStatement("select COUNT(*) from salary_final_site_employees where SalaryType='FINAL' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
                                ResultSet rs = pst.executeQuery();
                                while (rs.next()) {

                                    count = rs.getInt("COUNT(*)");

                                }

                                if (count < 1) {
                                    target();
                                } else {
                                    int reply = JOptionPane.showConfirmDialog(rootPane, "Final Process was Created Already. Do yo want to Create Update the Final Process?", "Warning", JOptionPane.YES_NO_OPTION, 2);

                                    if (reply == JOptionPane.YES_OPTION) {
                                        target();
                                    } else {

                                    }

                                }
                            }
                        } else {
                            target();
                        }

                    } else {

                    }

//                    if (jComboBox1.getSelectedIndex() == 2) {
//                        //director salary
//
//                    } else {
//
//                        if (cb_final_salary.isSelected()) {
//
//                             
//                            int count = 0;
//                            PreparedStatement pst = con.prepareStatement("select COUNT(*) from salary_final_site_employees where SalaryType='FINAL' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
//                            ResultSet rs = pst.executeQuery();
//                            while (rs.next()) {
//
//                                count = rs.getInt("COUNT(*)");
//
//                            }
//
//                            if (count < 1) {
//                                target();
//                            } else {
//                                int reply = JOptionPane.showConfirmDialog(rootPane, "Final Process was Created Already. Do yo want to Create Update the Final Process?", "Warning", JOptionPane.YES_NO_OPTION, 2);
//
//                                if (reply == JOptionPane.YES_OPTION) {
//                                    target();
//                                } else {
//
//                                }
//
//                            }
//
//                        } else {
//                            target();
//                        }
//
//                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                long duration = System.currentTimeMillis() - start;

                DateFormat df = new SimpleDateFormat("HH'h' mm'm' ss's'");
                df.setTimeZone(TimeZone.getTimeZone("GMT+0"));
                System.out.println(df.format(new Date(duration)));
                lbl_runtime.setText("Total Time for the Last Process: " + df.format(new Date(duration)));

            }
        }
        );
        hilo.start();


    }//GEN-LAST:event_salary_processActionPerformed

    private void cmb_monthPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_monthPopupMenuWillBecomeInvisible
        days_per_month();

        month_end();// TODO add your handling code here:
    }//GEN-LAST:event_cmb_monthPopupMenuWillBecomeInvisible

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        if (jComboBox1.getSelectedItem().equals("Permanant Guards")) {
            try {

                Connection conn = (Connection) DbConnection.getconnection();

                JasperDesign jd = JRXmlLoader.load("Reports\\PaySlip.jrxml");
                String sql = "SELECT * FROM salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year ='" + cmb_year.getSelectedItem().toString() + "'";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jd.setQuery(newQuery);

                JasperReport jr = JasperCompileManager.compileReport(jd);
                JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
                JasperViewer.viewReport(jp, false);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (jComboBox1.getSelectedItem().equals("Admin Staff")) {
            try {

                Connection conn = (Connection) DbConnection.getconnection();

                JasperDesign jd = JRXmlLoader.load("Reports\\PaySlip.jrxml");
                String sql = "SELECT * FROM salary_final_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year ='" + cmb_year.getSelectedItem().toString() + "' and EmpType='admin' ORDER BY EPFno ASC";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jd.setQuery(newQuery);

                JasperReport jr = JasperCompileManager.compileReport(jd);
                JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
                JasperViewer.viewReport(jp, false);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (jComboBox1.getSelectedItem().equals("Director Staff")) {
            try {

                Connection conn = (Connection) DbConnection.getconnection();

                JasperDesign jd = JRXmlLoader.load("Reports\\PaySlip.jrxml");
                String sql = "SELECT * FROM salary_final_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year ='" + cmb_year.getSelectedItem().toString() + "' and EmpType='director' ORDER BY EPFno ASC";
                JRDesignQuery newQuery = new JRDesignQuery();
                newQuery.setText(sql);
                jd.setQuery(newQuery);

                JasperReport jr = JasperCompileManager.compileReport(jd);
                JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
                JasperViewer.viewReport(jp, false);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (jComboBox1.getSelectedItem().equals("Tempory Guards")) {
            if (MonthEnd == 0) {
                Tempory_Guards();
            } else {
                JOptionPane.showMessageDialog(rootPane, "Month End is Processed for selected Month & Year. Please re-check the Pay Month & Year. ");
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void cb_final_salaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_final_salaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_final_salaryActionPerformed

    private void Office_Staff() {
//*************NEW CALCULATION BASED ON TOTAL WORKED DAYS*******************************************
        int reply = JOptionPane.showConfirmDialog(rootPane, " Please Enter All Attendance Details of Admin Staff Members before Processing the Salary", null, JOptionPane.OK_CANCEL_OPTION);

        if (reply == JOptionPane.OK_OPTION) {

            int reply2 = JOptionPane.showConfirmDialog(rootPane, " Continue to Admin Staff Salary Process? ", null, JOptionPane.YES_NO_OPTION);

            if (reply2 == JOptionPane.YES_OPTION) {

                //**********No. of Days per Selected Month****************************
                int year = Integer.parseInt(cmb_year.getSelectedItem().toString());
                int MaxDays = 0;

                if (cmb_month.getSelectedItem().toString().equals("January")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("February")) {

                    if (year % 4 == 0) {
                        if (year % 100 == 0) {
                            if (year % 400 == 0) {
                                //System.out.println(year + " Is A LEAP YEAR");
                                MaxDays = 29;
                            } else {
                                //System.out.println(year + " Is NOT LEAP YEAR");
                                MaxDays = 28;
                            }
                        } else {
                            //System.out.println(year + " Is A LEAP YEAR");
                            MaxDays = 29;
                        }
                    } else {
                        //System.out.println(year + " Is NOT LEAP YEAR");
                        MaxDays = 28;
                    }

                } else if (cmb_month.getSelectedItem().toString().equals("March")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("April")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("May")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("June")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("July")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("August")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("September")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("October")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("November")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("December")) {

                    MaxDays = 31;

                }

                System.out.println(cmb_month.getSelectedItem().toString() + " " + MaxDays);

                //********************************************************************
                String EPF = null;
                String Name = null;
                String ActiveEPF = null;

                String ComAddress = null;
                String ComName = null;
                String EmpCompany = null;
                String EmpLocation = null;
                String EmpRank = null;

                String Distress_BalanceAmt = "0.00";
                String Distress_BalanceAmt02 = "0.00";

                Double BasicSalary = 0.00;
                Double GrossSalary = 0.00;
                Double BR_Allo = 0.00;
                Double TaxEarn = 0.00;
                Double Welfare = 0.00;
                Double Budjet_Allo = 0.00;
                Double Balance_Gross = 0.00;

                Double WorkedDays = 0.00;

                Double PoyaDay = 0.00;
                Double MCAllo = 0.00;
                Double OtherAllo = 0.00;

                Double Meal = 0.00;
                Double Rental = 0.00;
                Double LessShift = 0.00;
                Double OtherDeduc = 0.00;
                Double DeathDonation = 0.00;
                Double Insuarance = 0.00;

                Double EPF8 = 0.00;
                Double EPF12 = 0.00;
                Double ETF3 = 0.00;

                Double Loan_Rental = 0.00;
                Double Loan02_Rental = 0.00;
                Double Advance01_Rental = 0.00;
                Double Advance02_Rental = 0.00;
                Double FestivalAdvance_Rental = 0.00;

                Double perfomance = 0.00;
                Double attendance = 0.00;

                //Final Data
                String Final_Basic = "0.00";
                String Final_BR = "0.00";

                String Final_EPF12 = "0.00";
                String Final_EPF8 = "0.00";
                String Final_ETF3 = "0.00";

                String Final_Poya = "0.00";
                String Final_MCAllow = "0.00";
                String Final_OtherAllow = "0.00";

                String Final_Meal = "0.00";
                String Final_Rental = "0.00";
                String Final_LessShift = "0.00";
                String Final_OtherDeduc = "0.00";
                String Final_DeathDonation = "0.00";
                String Final_Insuarance = "0.00";
                String Final_Welfare = "0.00";

                String Final_Attendance = "0.00";
                String Final_Perfomance = "0.00";

                String Final_Loan_Rental = "0.00";
                String Final_Loan02_Rental = "0.00";
                String Final_Advance01_Rental = "0.00";
                String Final_Advance02_Rental = "0.00";
                String Final_FestivalAdvance_Rental = "0.00";

                String Final_Gross_Salary = "0.00";
                String Final_TaxEarn = "0.00";
                String Final_Total_Deducs = "0.00";
                String Final_Net_Salary = "0.00";

                Double MCAllowance = 0.00;

                if (jDateChooser1.getDate() == null) {

                    JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");
                } else {
                    salary_ReSet_Admin_Staff();

                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String date = sdf.format(jDateChooser1.getDate());

                    try {

                        Statement st_days = DbConnection.getconnection().createStatement();
                        ResultSet rs_days = st_days.executeQuery("select * from emp_atten_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                        while (rs_days.next()) {
                            EPF = rs_days.getString("EPFno");
                            WorkedDays = Double.parseDouble(rs_days.getString("WorkedDays"));

                            // }
                            Statement st = DbConnection.getconnection().createStatement();
                            ResultSet rs = st.executeQuery("select * from employee_reg where RankCategory='Admin Staff' and IsResigned='0' and EPFno='" + EPF + "' ");
                            while (rs.next()) {

                                Name = rs.getString("NameWithInitials");
                                ActiveEPF = rs.getString("ActiveEPF");
                                EmpCompany = rs.getString("DefCompany");
                                EmpLocation = rs.getString("DefLocation");
                                EmpRank = rs.getString("Designation");

                                BasicSalary = Double.parseDouble(rs.getString("BasicSalary"));
                                GrossSalary = Double.parseDouble(rs.getString("GrossSalary"));
                                BR_Allo = Double.parseDouble(rs.getString("BRAllowance"));
                                Welfare = Double.parseDouble(rs.getString("Welfare"));
                                MCAllowance = Double.parseDouble(rs.getString("MCAllowance"));

                                Double perDayAmt = GrossSalary / MaxDays;
                                Double thisMonthSalary = perDayAmt * WorkedDays;

                                System.out.println(EPF + "MAxD: " + MaxDays);
                                System.out.println(EPF + "PerDay: " + perDayAmt);
                                System.out.println(EPF + "Salary: " + thisMonthSalary);

                                if (thisMonthSalary < (BasicSalary + BR_Allo)) {
                                    if (thisMonthSalary < BR_Allo) {
                                        TaxEarn = thisMonthSalary;
                                        Budjet_Allo = 0.00;
                                        Balance_Gross = 0.00;
                                    } else {
                                        TaxEarn = thisMonthSalary - BR_Allo;
                                        Budjet_Allo = BR_Allo;
                                        Balance_Gross = 0.00;
                                    }
                                } else if (thisMonthSalary == (BasicSalary + BR_Allo)) {
                                    TaxEarn = BasicSalary;
                                    Budjet_Allo = BR_Allo;
                                    Balance_Gross = 0.00;
                                } else {
                                    TaxEarn = BasicSalary;
                                    Budjet_Allo = BR_Allo;
                                    Balance_Gross = thisMonthSalary - (BasicSalary + BR_Allo);
                                }

                                System.out.println(EPF + " TaxEarn: " + TaxEarn);
                                System.out.println(EPF + " Budjet_Allo: " + Budjet_Allo);

                                Final_Welfare = String.format("%.2f", Welfare);
                                Final_Basic = String.format("%.2f", BasicSalary);
                                Final_BR = String.format("%.2f", Budjet_Allo);
                                Final_TaxEarn = String.format("%.2f", TaxEarn);
                                //Final_Gross_Salary = String.format("%.2f", GrossSalary);

                                if (ActiveEPF.equals("1")) {

                                    EPF8 = (TaxEarn + Budjet_Allo) * 0.08;
                                    EPF12 = (TaxEarn + Budjet_Allo) * 0.12;
                                    ETF3 = (TaxEarn + Budjet_Allo) * 0.03;

                                    Final_EPF12 = String.format("%.2f", EPF12);
                                    Final_EPF8 = String.format("%.2f", EPF8);
                                    Final_ETF3 = String.format("%.2f", ETF3);

                                } else {
                                    Final_EPF12 = "0.00";
                                    Final_EPF8 = "0.00";
                                    Final_ETF3 = "0.00";
                                }

                                //Earnings Details
                                Statement st1 = DbConnection.getconnection().createStatement();
                                ResultSet rs1 = st1.executeQuery("select * from salary_manual_earnings where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                                while (rs1.next()) {

                                    PoyaDay = Double.parseDouble(rs1.getString("PoyaDay"));
                                    MCAllo = Double.parseDouble(rs1.getString("MCAllowance"));
                                    OtherAllo = Double.parseDouble(rs1.getString("Other"));

                                    Final_Poya = String.format("%.2f", PoyaDay);
                                    //Final_MCAllow = String.format("%.2f", MCAllo);
                                    Final_OtherAllow = String.format("%.2f", OtherAllo);
                                    System.out.println(EPF + "  " + Final_OtherAllow);

                                }

                                Final_MCAllow = String.format("%.2f", (MCAllo + MCAllowance));

                                perfomance = Balance_Gross * 0.52;
                                attendance = Balance_Gross * 0.48;

                                Double Final_Gross = (TaxEarn + Budjet_Allo + PoyaDay + MCAllo + OtherAllo + MCAllowance + attendance + perfomance);

                                Final_Gross_Salary = String.format("%.2f", Final_Gross);

                                System.out.println(EPF + " poya:" + PoyaDay + " mc:" + MCAllo + " other: " + OtherAllo + "FinalGross: " + Final_Gross + " Perfo: " + perfomance + " atten: " + attendance);

                                Final_Perfomance = String.format("%.2f", perfomance);
                                Final_Attendance = String.format("%.2f", attendance);

                                //Deductions Details
                                Statement st2 = DbConnection.getconnection().createStatement();
                                ResultSet rs2 = st2.executeQuery("select *,COUNT(*),SUM(Meal),SUM(Rental),SUM(LessShift),SUM(OtherDeduc),SUM(DeathDonation),SUM(Insuarance) from salary_manual_deductions where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                                while (rs2.next()) {

                                    int i = Integer.parseInt(rs2.getString("COUNT(*)"));

                                    if (i == 0) {
                                    } else {

                                        Meal = Double.parseDouble(rs2.getString("SUM(Meal)"));
                                        Rental = Double.parseDouble(rs2.getString("SUM(Rental)"));
                                        LessShift = Double.parseDouble(rs2.getString("SUM(LessShift)"));
                                        OtherDeduc = Double.parseDouble(rs2.getString("SUM(OtherDeduc)"));
                                        DeathDonation = Double.parseDouble(rs2.getString("SUM(DeathDonation)"));
                                        Insuarance = Double.parseDouble(rs2.getString("SUM(Insuarance)"));

                                        Final_Meal = String.format("%.2f", Meal);
                                        Final_Rental = String.format("%.2f", Rental);
                                        Final_LessShift = String.format("%.2f", LessShift);
                                        Final_OtherDeduc = String.format("%.2f", OtherDeduc);
                                        Final_DeathDonation = String.format("%.2f", DeathDonation);
                                        Final_Insuarance = String.format("%.2f", Insuarance);
                                    }
                                }
                                // ******************
                                //Get details OF Distress_Loan_01
                                Statement Loan_st = DbConnection.getconnection().createStatement();
                                ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Loan_rs.next()) {

                                    String Ref = Loan_rs.getString("LoanReference");
                                    String Rent = Loan_rs.getString("Rental");

                                    Loan_Rental = Double.parseDouble(Rent);

                                    Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                                    Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                                    ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                                    while (Loan_settle_rs.next()) {

                                        int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                                        Double bal = 0.00;
                                        if (count == 0) {
                                            bal = 0.00;
                                        } else {

                                            bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                            Double bal1 = LoanAmount - (Loan_Rental + bal);
                                            Distress_BalanceAmt = String.format("%.2f", bal1);
                                        }

                                    }

                                    Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                                    //Save data to Loan_01 Settlement Table
                                    Statement st3 = DbConnection.getconnection().createStatement();
                                    st3.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                                }

                                //Get details OF Distress_Loan_02
                                Statement Loan02_st = DbConnection.getconnection().createStatement();
                                ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Loan02_rs.next()) {

                                    String Ref = Loan02_rs.getString("LoanReference");
                                    String Rent = Loan02_rs.getString("Rental");

                                    Loan02_Rental = Double.parseDouble(Rent);

                                    Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                                    Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                                    ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                                    while (Loan02_settle_rs.next()) {

                                        int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                                        Double bal = 0.00;
                                        if (count == 0) {
                                            bal = 0.00;
                                        } else {

                                            bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                            Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                            Distress_BalanceAmt02 = String.format("%.2f", bal1);
                                        }

                                    }

                                    Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                                    //Save data to Loan_02 Settlement Table
                                    Statement st4 = DbConnection.getconnection().createStatement();
                                    st4.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                                }

                                //Get details OF Advance01
                                Statement Ad1_st = DbConnection.getconnection().createStatement();
                                ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Ad1_rs.next()) {
                                    String Ref = null;
                                    String Rent = "0";
                                    if (Ad1_rs.getString("EPFno") == null) {

                                    } else {

                                        Ref = Ad1_rs.getString("Reference");
                                        Rent = Ad1_rs.getString("SUM(Amount)");

                                        Advance01_Rental = Double.parseDouble(Rent);
                                        Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
                                    }

                                    //Save data to Advance01 Settlement Table
                                    Statement st5 = DbConnection.getconnection().createStatement();
                                    st5.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                                    st5.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                                }

                                //Get details OF Advance02
                                Statement Ad2_st = DbConnection.getconnection().createStatement();
                                ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Ad2_rs.next()) {

                                    String Ref = null;
                                    String Rent = "0";

                                    if (Ad2_rs.getString("EPFno") == null) {

                                    } else {

                                        Ref = Ad2_rs.getString("Reference");
                                        Rent = Ad2_rs.getString("SUM(Amount)");

                                        Advance02_Rental = Double.parseDouble(Rent);
                                        Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                                    }

                                    //Save data to Advance02 Settlement Table
                                    Statement st6 = DbConnection.getconnection().createStatement();

                                    st6.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                                    st6.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
                                }

                                //Get details OF Festival Advance 
                                Statement fes_st = DbConnection.getconnection().createStatement();
                                ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (fes_rs.next()) {

                                    String Ref = fes_rs.getString("Reference");
                                    String Rent = fes_rs.getString("Rental");

                                    FestivalAdvance_Rental = Double.parseDouble(Rent);
                                    Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                                    //Save data to Festival Advance  Settlement Table
                                    Statement st7 = DbConnection.getconnection().createStatement();

                                    st7.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                                    st7.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                                }

                                //Get Company Address
                                Statement st5 = DbConnection.getconnection().createStatement();
                                ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                                while (rs5.next()) {
                                    ComAddress = rs5.getString("ComAddress");
                                    ComName = rs5.getString("ComName");
                                }

                                Double Total_Deductions = FestivalAdvance_Rental + Advance02_Rental + Advance01_Rental + Loan02_Rental + Loan_Rental + Welfare + Meal + Rental + LessShift + OtherDeduc + DeathDonation + Insuarance + EPF8;
                                Final_Total_Deducs = String.format("%.2f", Total_Deductions);

                                Double Net_Sal = Final_Gross - Total_Deductions;
                                Final_Net_Salary = String.format("%.2f", Net_Sal);
                                //*******************

                                String TotalShifts = Double.toString(WorkedDays);

                                //SAVE SALARY
                                Statement sal_st = DbConnection.getconnection().createStatement();
                                sal_st.executeUpdate("insert into salary_final_admin_staff values('" + EPF + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','0.00','" + Final_Attendance + "','" + Final_Perfomance + "','0.00','0.00','" + Final_Poya + "','0.00','" + Final_MCAllow + "','" + Final_OtherAllow + "','" + Final_Gross_Salary + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','0.00','" + Final_LessShift + "','" + Final_Rental + "','" + Final_DeathDonation + "','" + Final_OtherDeduc + "','" + Final_Insuarance + "','0.00','0.00','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','0.00','" + Final_EPF8 + "','" + Final_Total_Deducs + "','" + Final_Net_Salary + "','" + Final_EPF12 + "','" + Final_ETF3 + "','" + Final_Net_Salary + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + Name + "','" + EmpRank + "','" + TotalShifts + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "',' ','admin')");

                                EPF = null;
                                Name = null;
                                ActiveEPF = null;
                                thisMonthSalary = 0.00;
                                perDayAmt = 0.00;

                                ComAddress = null;
                                ComName = null;
                                EmpCompany = null;
                                EmpLocation = null;
                                EmpRank = null;

                                Distress_BalanceAmt = "0.00";
                                Distress_BalanceAmt02 = "0.00";

                                BasicSalary = 0.00;
                                GrossSalary = 0.00;
                                BR_Allo = 0.00;
                                Welfare = 0.00;

                                PoyaDay = 0.00;
                                MCAllo = 0.00;
                                OtherAllo = 0.00;

                                Meal = 0.00;
                                Rental = 0.00;
                                LessShift = 0.00;
                                OtherDeduc = 0.00;
                                DeathDonation = 0.00;
                                Insuarance = 0.00;

                                EPF8 = 0.00;
                                EPF12 = 0.00;
                                ETF3 = 0.00;

                                Loan_Rental = 0.00;
                                Loan02_Rental = 0.00;
                                Advance01_Rental = 0.00;
                                Advance02_Rental = 0.00;
                                FestivalAdvance_Rental = 0.00;

                                perfomance = 0.00;
                                attendance = 0.00;

                                //Final Data
                                Final_Basic = "0.00";
                                Final_BR = "0.00";

                                Final_EPF12 = "0.00";
                                Final_EPF8 = "0.00";
                                Final_ETF3 = "0.00";

                                Final_Poya = "0.00";
                                Final_MCAllow = "0.00";
                                Final_OtherAllow = "0.00";

                                Final_Meal = "0.00";
                                Final_Rental = "0.00";
                                Final_LessShift = "0.00";
                                Final_OtherDeduc = "0.00";
                                Final_DeathDonation = "0.00";
                                Final_Insuarance = "0.00";
                                Final_Welfare = "0.00";

                                Final_Attendance = "0.00";
                                Final_Perfomance = "0.00";

                                Final_Loan_Rental = "0.00";
                                Final_Loan02_Rental = "0.00";
                                Final_Advance01_Rental = "0.00";
                                Final_Advance02_Rental = "0.00";
                                Final_FestivalAdvance_Rental = "0.00";

                                Final_Gross_Salary = "0.00";
                                Final_Total_Deducs = "0.00";
                                Final_Net_Salary = "0.00";

                                MCAllowance = 0.00;

                            }

                            //MaxDays = 0;
                            WorkedDays = 0.0;

                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, e);
                        e.printStackTrace();

                    }
                    delete_null_data_in_settelsment_tables();
                    lbl_atten.setText(" Office Staff Salary  Processed  Succesfully...!");
                    Color cl = new Color(0, 153, 51);
                    lbl_atten.setForeground(cl);
                    lbl_atten.setVisible(true);
//                    btn_Office_salary_process.setEnabled(false);

                }

            } else {

            }
        } else {

        }

//*************** END OF NEW CALCULATION****************************************
//************************** OLD CALCULATION - WORKED DAYS EXCULDED *****************************
//        String EPF = null;
//        String Name = null;
//        String ActiveEPF = null;
//
//        String ComAddress = null;
//        String ComName = null;
//        String EmpCompany = null;
//        String EmpLocation = null;
//        String EmpRank = null;
//
//        String Distress_BalanceAmt = "0.00";
//        String Distress_BalanceAmt02 = "0.00";
//
//        Double BasicSalary = 0.00;
//        Double GrossSalary = 0.00;
//        Double BR_Allo = 0.00;
//        Double Welfare = 0.00;
//
//        Double PoyaDay = 0.00;
//        Double MCAllo = 0.00;
//        Double OtherAllo = 0.00;
//
//        Double Meal = 0.00;
//        Double Rental = 0.00;
//        Double LessShift = 0.00;
//        Double OtherDeduc = 0.00;
//        Double DeathDonation = 0.00;
//        Double Insuarance = 0.00;
//
//        Double EPF8 = 0.00;
//        Double EPF12 = 0.00;
//        Double ETF3 = 0.00;
//
//        Double Loan_Rental = 0.00;
//        Double Loan02_Rental = 0.00;
//        Double Advance01_Rental = 0.00;
//        Double Advance02_Rental = 0.00;
//        Double FestivalAdvance_Rental = 0.00;
//
//        Double perfomance = 0.00;
//        Double attendance = 0.00;
//
//        //Final Data
//        String Final_Basic = "0.00";
//        String Final_BR = "0.00";
//
//        String Final_EPF12 = "0.00";
//        String Final_EPF8 = "0.00";
//        String Final_ETF3 = "0.00";
//
//        String Final_Poya = "0.00";
//        String Final_MCAllow = "0.00";
//        String Final_OtherAllow = "0.00";
//
//        String Final_Meal = "0.00";
//        String Final_Rental = "0.00";
//        String Final_LessShift = "0.00";
//        String Final_OtherDeduc = "0.00";
//        String Final_DeathDonation = "0.00";
//        String Final_Insuarance = "0.00";
//        String Final_Welfare = "0.00";
//
//        String Final_Attendance = "0.00";
//        String Final_Perfomance = "0.00";
//
//        String Final_Loan_Rental = "0.00";
//        String Final_Loan02_Rental = "0.00";
//        String Final_Advance01_Rental = "0.00";
//        String Final_Advance02_Rental = "0.00";
//        String Final_FestivalAdvance_Rental = "0.00";
//
//        String Final_Gross_Salary = "0.00";
//        String Final_Total_Deducs = "0.00";
//        String Final_Net_Salary = "0.00";
//
//        Double MCAllowance = 0.00;
//
//        if (jDateChooser1.getDate() == null) {
//
//            JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");
//        } else {
//            salary_ReSet_Admin_Staff();
//
//            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//            String date = sdf.format(jDateChooser1.getDate());
//
//            try {
//
//                Statement st = DbConnection.getconnection().createStatement();
//                ResultSet rs = st.executeQuery("select * from employee_reg where RankCategory='Admin Staff' and IsResigned='1' ");
//                while (rs.next()) {
//                    EPF = rs.getString("EPFno");
//                    Name = rs.getString("NameWithInitials");
//                    ActiveEPF = rs.getString("ActiveEPF");
//                    EmpCompany = rs.getString("DefCompany");
//                    EmpLocation = rs.getString("DefLocation");
//                    EmpRank = rs.getString("Designation");
//
//                    BasicSalary = Double.parseDouble(rs.getString("BasicSalary"));
//                    GrossSalary = Double.parseDouble(rs.getString("GrossSalary"));
//                    BR_Allo = Double.parseDouble(rs.getString("BRAllowance"));
//                    Welfare = Double.parseDouble(rs.getString("Welfare"));
//                    MCAllowance = Double.parseDouble(rs.getString("MCAllowance"));
//
//                    Final_Welfare = String.format("%.2f", Welfare);
//                    Final_Basic = String.format("%.2f", BasicSalary);
//                    Final_BR = String.format("%.2f", BR_Allo);
//                    Final_Gross_Salary = String.format("%.2f", GrossSalary);
//
//                    if (ActiveEPF.equals("1")) {
//
//                        EPF8 = (BasicSalary + BR_Allo) * 0.08;
//                        EPF12 = (BasicSalary + BR_Allo) * 0.12;
//                        ETF3 = (BasicSalary + BR_Allo) * 0.03;
//
//                        Final_EPF12 = String.format("%.2f", EPF12);
//                        Final_EPF8 = String.format("%.2f", EPF8);
//                        Final_ETF3 = String.format("%.2f", ETF3);
//
//                    } else {
//                        Final_EPF12 = "0.00";
//                        Final_EPF8 = "0.00";
//                        Final_ETF3 = "0.00";
//
//                    }
//
//                    //Earnings Details
//                    Statement st1 = DbConnection.getconnection().createStatement();
//                    ResultSet rs1 = st1.executeQuery("select * from salary_manual_earnings where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
//                    while (rs1.next()) {
//
//                        PoyaDay = Double.parseDouble(rs1.getString("PoyaDay"));
//                        MCAllo = Double.parseDouble(rs1.getString("MCAllowance"));
//                        OtherAllo = Double.parseDouble(rs1.getString("Other"));
//
//                        Final_Poya = String.format("%.2f", PoyaDay);
//                        //Final_MCAllow = String.format("%.2f", MCAllo);
//                        Final_OtherAllow = String.format("%.2f", OtherAllo);
//                        System.out.println(EPF + "  " + Final_OtherAllow);
//
//                    }
//
//                    Final_MCAllow = String.format("%.2f", (MCAllo + MCAllowance));
//
//                    Double Balance_Salary = (GrossSalary - (BasicSalary + BR_Allo + PoyaDay + MCAllo + OtherAllo + MCAllowance));
//                    perfomance = Balance_Salary * 0.52;
//                    attendance = Balance_Salary * 0.48;
//
//                    System.out.println(EPF + " poya:" + PoyaDay + " mc:" + MCAllo + " other: " + OtherAllo + "balanceSal: " + Balance_Salary + " Perfo: " + perfomance + " atten: " + attendance);
//
//                    Final_Perfomance = String.format("%.2f", perfomance);
//                    Final_Attendance = String.format("%.2f", attendance);
//
//                    //Deductions Details
//                    Statement st2 = DbConnection.getconnection().createStatement();
//                    ResultSet rs2 = st2.executeQuery("select * from salary_manual_deductions where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
//                    while (rs2.next()) {
//
//                        Meal = Double.parseDouble(rs2.getString("Meal"));
//                        Rental = Double.parseDouble(rs2.getString("Rental"));
//                        LessShift = Double.parseDouble(rs2.getString("LessShift"));
//                        OtherDeduc = Double.parseDouble(rs2.getString("OtherDeduc"));
//                        DeathDonation = Double.parseDouble(rs2.getString("DeathDonation"));
//                        Insuarance = Double.parseDouble(rs2.getString("Insuarance"));
//
//                        Final_Meal = String.format("%.2f", Meal);
//                        Final_Rental = String.format("%.2f", Rental);
//                        Final_LessShift = String.format("%.2f", LessShift);
//                        Final_OtherDeduc = String.format("%.2f", OtherDeduc);
//                        Final_DeathDonation = String.format("%.2f", DeathDonation);
//                        Final_Insuarance = String.format("%.2f", Insuarance);
//
//                    }
//                    // ******************
//                    //Get details OF Distress_Loan_01
//                    Statement Loan_st = DbConnection.getconnection().createStatement();
//                    ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (Loan_rs.next()) {
//
//                        String Ref = Loan_rs.getString("LoanReference");
//                        String Rent = Loan_rs.getString("Rental");
//
//                        Loan_Rental = Double.parseDouble(Rent);
//
//                        Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));
//
//                        Statement Loan_settle_st = DbConnection.getconnection().createStatement();
//                        ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
//                        while (Loan_settle_rs.next()) {
//
//                            int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
//                            Double bal = 0.00;
//                            if (count == 0) {
//                                bal = 0.00;
//                            } else {
//
//                                bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
//                                Double bal1 = LoanAmount - (Loan_Rental + bal);
//                                Distress_BalanceAmt = String.format("%.2f", bal1);
//                            }
//
//                        }
//
//                        Final_Loan_Rental = String.format("%.2f", Loan_Rental);
//
//                        //Save data to Loan_01 Settlement Table
//                        Statement st3 = DbConnection.getconnection().createStatement();
//                        st3.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
//                    }
//
//                    //Get details OF Distress_Loan_02
//                    Statement Loan02_st = DbConnection.getconnection().createStatement();
//                    ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (Loan02_rs.next()) {
//
//                        String Ref = Loan02_rs.getString("LoanReference");
//                        String Rent = Loan02_rs.getString("Rental");
//
//                        Loan02_Rental = Double.parseDouble(Rent);
//
//                        Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));
//
//                        Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
//                        ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
//                        while (Loan02_settle_rs.next()) {
//
//                            int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
//                            Double bal = 0.00;
//                            if (count == 0) {
//                                bal = 0.00;
//                            } else {
//
//                                bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
//                                Double bal1 = LoanAmount - (Loan02_Rental + bal);
//                                Distress_BalanceAmt02 = String.format("%.2f", bal1);
//                            }
//
//                        }
//
//                        Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);
//
//                        //Save data to Loan_02 Settlement Table
//                        Statement st4 = DbConnection.getconnection().createStatement();
//                        st4.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
//                    }
//
//                    //Get details OF Advance01
//                    Statement Ad1_st = DbConnection.getconnection().createStatement();
//                    ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (Ad1_rs.next()) {
//                        String Ref = null;
//                        String Rent = "0";
//                        if (Ad1_rs.getString("EPFno") == null) {
//
//                        } else {
//
//                            Ref = Ad1_rs.getString("Reference");
//                            Rent = Ad1_rs.getString("SUM(Amount)");
//
//                            Advance01_Rental = Double.parseDouble(Rent);
//                            Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
//                        }
//
//                        //Save data to Advance01 Settlement Table
//                        Statement st5 = DbConnection.getconnection().createStatement();
//                        st5.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
//                        st5.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
//
//                    }
//
//                    //Get details OF Advance02
//                    Statement Ad2_st = DbConnection.getconnection().createStatement();
//                    ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (Ad2_rs.next()) {
//
//                        String Ref = null;
//                        String Rent = "0";
//
//                        if (Ad2_rs.getString("EPFno") == null) {
//
//                        } else {
//
//                            Ref = Ad2_rs.getString("Reference");
//                            Rent = Ad2_rs.getString("SUM(Amount)");
//
//                            Advance02_Rental = Double.parseDouble(Rent);
//                            Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);
//
//                        }
//
//                        //Save data to Advance02 Settlement Table
//                        Statement st6 = DbConnection.getconnection().createStatement();
//
//                        st6.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
//
//                        st6.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
//                    }
//
//                    //Get details OF Festival Advance 
//                    Statement fes_st = DbConnection.getconnection().createStatement();
//                    ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (fes_rs.next()) {
//
//                        String Ref = fes_rs.getString("Reference");
//                        String Rent = fes_rs.getString("Rental");
//
//                        FestivalAdvance_Rental = Double.parseDouble(Rent);
//                        Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);
//
//                        //Save data to Festival Advance  Settlement Table
//                        Statement st7 = DbConnection.getconnection().createStatement();
//
//                        st7.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
//
//                        st7.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
//                    }
//
//                    //Get Company Address
//                    Statement st5 = DbConnection.getconnection().createStatement();
//                    ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
//                    while (rs5.next()) {
//                        ComAddress = rs5.getString("ComAddress");
//                        ComName = rs5.getString("ComName");
//                    }
//
//                    Double Total_Deductions = FestivalAdvance_Rental + Advance02_Rental + Advance01_Rental + Loan02_Rental + Loan_Rental + Welfare + Meal + Rental + LessShift + OtherDeduc + DeathDonation + Insuarance + EPF8;
//                    Final_Total_Deducs = String.format("%.2f", Total_Deductions);
//
//                    Double Net_Sal = GrossSalary - Total_Deductions;
//                    Final_Net_Salary = String.format("%.2f", Net_Sal);
//                    //*******************
//
//                    //SAVE SALARY
//                    Statement sal_st = DbConnection.getconnection().createStatement();
//                    sal_st.executeUpdate("insert into salary_final_admin_staff values('" + EPF + "','" + Final_Basic + "','" + Final_BR + "','" + Final_Basic + "','0.00','" + Final_Attendance + "','" + Final_Perfomance + "','0.00','0.00','" + Final_Poya + "','0.00','" + Final_MCAllow + "','" + Final_OtherAllow + "','" + Final_Gross_Salary + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','0.00','" + Final_LessShift + "','" + Final_Rental + "','" + Final_DeathDonation + "','" + Final_OtherDeduc + "','" + Final_Insuarance + "','0.00','0.00','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','0.00','" + Final_EPF8 + "','" + Final_Total_Deducs + "','" + Final_Net_Salary + "','" + Final_EPF12 + "','" + Final_ETF3 + "','" + Final_Net_Salary + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + Name + "','" + EmpRank + "','0','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "',' ')");
//
//                    EPF = null;
//                    Name = null;
//                    ActiveEPF = null;
//
//                    ComAddress = null;
//                    ComName = null;
//                    EmpCompany = null;
//                    EmpLocation = null;
//                    EmpRank = null;
//
//                    Distress_BalanceAmt = "0.00";
//                    Distress_BalanceAmt02 = "0.00";
//
//                    BasicSalary = 0.00;
//                    GrossSalary = 0.00;
//                    BR_Allo = 0.00;
//                    Welfare = 0.00;
//
//                    PoyaDay = 0.00;
//                    MCAllo = 0.00;
//                    OtherAllo = 0.00;
//
//                    Meal = 0.00;
//                    Rental = 0.00;
//                    LessShift = 0.00;
//                    OtherDeduc = 0.00;
//                    DeathDonation = 0.00;
//                    Insuarance = 0.00;
//
//                    EPF8 = 0.00;
//                    EPF12 = 0.00;
//                    ETF3 = 0.00;
//
//                    Loan_Rental = 0.00;
//                    Loan02_Rental = 0.00;
//                    Advance01_Rental = 0.00;
//                    Advance02_Rental = 0.00;
//                    FestivalAdvance_Rental = 0.00;
//
//                    perfomance = 0.00;
//                    attendance = 0.00;
//
//                    //Final Data
//                    Final_Basic = "0.00";
//                    Final_BR = "0.00";
//
//                    Final_EPF12 = "0.00";
//                    Final_EPF8 = "0.00";
//                    Final_ETF3 = "0.00";
//
//                    Final_Poya = "0.00";
//                    Final_MCAllow = "0.00";
//                    Final_OtherAllow = "0.00";
//
//                    Final_Meal = "0.00";
//                    Final_Rental = "0.00";
//                    Final_LessShift = "0.00";
//                    Final_OtherDeduc = "0.00";
//                    Final_DeathDonation = "0.00";
//                    Final_Insuarance = "0.00";
//                    Final_Welfare = "0.00";
//
//                    Final_Attendance = "0.00";
//                    Final_Perfomance = "0.00";
//
//                    Final_Loan_Rental = "0.00";
//                    Final_Loan02_Rental = "0.00";
//                    Final_Advance01_Rental = "0.00";
//                    Final_Advance02_Rental = "0.00";
//                    Final_FestivalAdvance_Rental = "0.00";
//
//                    Final_Gross_Salary = "0.00";
//                    Final_Total_Deducs = "0.00";
//                    Final_Net_Salary = "0.00";
//
//                    MCAllowance = 0.00;
//
//                }
//
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(rootPane, e);
//                e.printStackTrace();
//
//            }
//            delete_null_data_in_settelsment_tables();
//            lbl_atten.setText(" Office Staff Salary  Processed  Succesfully...!");
//            Color cl = new Color(0, 153, 51);
//            lbl_atten.setForeground(cl);
//            lbl_atten.setVisible(true);
//            btn_Office_salary_process.setEnabled(false);
//
//        }
//*****************END OF OLD CALCULATION******************************************
    }

    private void Director_Staff() {
//*************NEW CALCULATION BASED ON TOTAL WORKED DAYS*******************************************
        int reply = JOptionPane.showConfirmDialog(rootPane, " Please Enter All Attendance Details of Director Staff Members before Processing the Salary", null, JOptionPane.OK_CANCEL_OPTION);

        if (reply == JOptionPane.OK_OPTION) {

            int reply2 = JOptionPane.showConfirmDialog(rootPane, " Continue to Director Staff Salary Process? ", null, JOptionPane.YES_NO_OPTION);

            if (reply2 == JOptionPane.YES_OPTION) {

                //**********No. of Days per Selected Month****************************
                int year = Integer.parseInt(cmb_year.getSelectedItem().toString());
                int MaxDays = 0;

                if (cmb_month.getSelectedItem().toString().equals("January")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("February")) {

                    if (year % 4 == 0) {
                        if (year % 100 == 0) {
                            if (year % 400 == 0) {
                                //System.out.println(year + " Is A LEAP YEAR");
                                MaxDays = 29;
                            } else {
                                //System.out.println(year + " Is NOT LEAP YEAR");
                                MaxDays = 28;
                            }
                        } else {
                            //System.out.println(year + " Is A LEAP YEAR");
                            MaxDays = 29;
                        }
                    } else {
                        //System.out.println(year + " Is NOT LEAP YEAR");
                        MaxDays = 28;
                    }

                } else if (cmb_month.getSelectedItem().toString().equals("March")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("April")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("May")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("June")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("July")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("August")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("September")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("October")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("November")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("December")) {

                    MaxDays = 31;

                }

                System.out.println(cmb_month.getSelectedItem().toString() + " " + MaxDays);

                //********************************************************************
                String EPF = null;
                String Name = null;
                String ActiveEPF = null;

                String ComAddress = null;
                String ComName = null;
                String EmpCompany = null;
                String EmpLocation = null;
                String EmpRank = null;

                String Distress_BalanceAmt = "0.00";
                String Distress_BalanceAmt02 = "0.00";

                Double BasicSalary = 0.00;
                Double GrossSalary = 0.00;
                Double BR_Allo = 0.00;
                Double TaxEarn = 0.00;
                Double Welfare = 0.00;
                Double Budjet_Allo = 0.00;
                Double Balance_Gross = 0.00;

                Double WorkedDays = 0.00;

                Double PoyaDay = 0.00;
                Double MCAllo = 0.00;
                Double OtherAllo = 0.00;

                Double Meal = 0.00;
                Double Rental = 0.00;
                Double LessShift = 0.00;
                Double OtherDeduc = 0.00;
                Double DeathDonation = 0.00;
                Double Insuarance = 0.00;

                Double EPF8 = 0.00;
                Double EPF12 = 0.00;
                Double ETF3 = 0.00;

                Double Loan_Rental = 0.00;
                Double Loan02_Rental = 0.00;
                Double Advance01_Rental = 0.00;
                Double Advance02_Rental = 0.00;
                Double FestivalAdvance_Rental = 0.00;

                Double perfomance = 0.00;
                Double attendance = 0.00;

                //Final Data
                String Final_Basic = "0.00";
                String Final_BR = "0.00";

                String Final_EPF12 = "0.00";
                String Final_EPF8 = "0.00";
                String Final_ETF3 = "0.00";

                String Final_Poya = "0.00";
                String Final_MCAllow = "0.00";
                String Final_OtherAllow = "0.00";

                String Final_Meal = "0.00";
                String Final_Rental = "0.00";
                String Final_LessShift = "0.00";
                String Final_OtherDeduc = "0.00";
                String Final_DeathDonation = "0.00";
                String Final_Insuarance = "0.00";
                String Final_Welfare = "0.00";

                String Final_Attendance = "0.00";
                String Final_Perfomance = "0.00";

                String Final_Loan_Rental = "0.00";
                String Final_Loan02_Rental = "0.00";
                String Final_Advance01_Rental = "0.00";
                String Final_Advance02_Rental = "0.00";
                String Final_FestivalAdvance_Rental = "0.00";

                String Final_Gross_Salary = "0.00";
                String Final_TaxEarn = "0.00";
                String Final_Total_Deducs = "0.00";
                String Final_Net_Salary = "0.00";

                Double MCAllowance = 0.00;

                if (jDateChooser1.getDate() == null) {

                    JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");
                } else {
                    salary_ReSet_Admin_Staff();

                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String date = sdf.format(jDateChooser1.getDate());

                    try {

                        Statement st_days = DbConnection.getconnection().createStatement();
                        ResultSet rs_days = st_days.executeQuery("select * from emp_atten_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                        while (rs_days.next()) {
                            EPF = rs_days.getString("EPFno");
                            WorkedDays = Double.parseDouble(rs_days.getString("WorkedDays"));

                            // }
                            Statement st = DbConnection.getconnection().createStatement();
                            ResultSet rs = st.executeQuery("select * from employee_reg where RankCategory='Director Staff' and IsResigned='0' and EPFno='" + EPF + "' ");
                            while (rs.next()) {

                                Name = rs.getString("NameWithInitials");
                                ActiveEPF = rs.getString("ActiveEPF");
                                EmpCompany = rs.getString("DefCompany");
                                EmpLocation = rs.getString("DefLocation");
                                EmpRank = rs.getString("Designation");

                                BasicSalary = Double.parseDouble(rs.getString("BasicSalary"));
                                GrossSalary = Double.parseDouble(rs.getString("GrossSalary"));
                                BR_Allo = Double.parseDouble(rs.getString("BRAllowance"));
                                Welfare = Double.parseDouble(rs.getString("Welfare"));
                                MCAllowance = Double.parseDouble(rs.getString("MCAllowance"));

                                Double perDayAmt = GrossSalary / MaxDays;
                                Double thisMonthSalary = perDayAmt * WorkedDays;

                                System.out.println(EPF + "MAxD: " + MaxDays);
                                System.out.println(EPF + "PerDay: " + perDayAmt);
                                System.out.println(EPF + "Salary: " + thisMonthSalary);

                                if (thisMonthSalary < (BasicSalary + BR_Allo)) {
                                    if (thisMonthSalary < BR_Allo) {
                                        TaxEarn = thisMonthSalary;
                                        Budjet_Allo = 0.00;
                                        Balance_Gross = 0.00;
                                    } else {
                                        TaxEarn = thisMonthSalary - BR_Allo;
                                        Budjet_Allo = BR_Allo;
                                        Balance_Gross = 0.00;
                                    }
                                } else if (thisMonthSalary == (BasicSalary + BR_Allo)) {
                                    TaxEarn = BasicSalary;
                                    Budjet_Allo = BR_Allo;
                                    Balance_Gross = 0.00;
                                } else {
                                    TaxEarn = BasicSalary;
                                    Budjet_Allo = BR_Allo;
                                    Balance_Gross = thisMonthSalary - (BasicSalary + BR_Allo);
                                }

                                System.out.println(EPF + " TaxEarn: " + TaxEarn);
                                System.out.println(EPF + " Budjet_Allo: " + Budjet_Allo);

                                Final_Welfare = String.format("%.2f", Welfare);
                                Final_Basic = String.format("%.2f", BasicSalary);
                                Final_BR = String.format("%.2f", Budjet_Allo);
                                Final_TaxEarn = String.format("%.2f", TaxEarn);
                                //Final_Gross_Salary = String.format("%.2f", GrossSalary);

                                if (ActiveEPF.equals("1")) {

                                    EPF8 = (TaxEarn + Budjet_Allo) * 0.08;
                                    EPF12 = (TaxEarn + Budjet_Allo) * 0.12;
                                    ETF3 = (TaxEarn + Budjet_Allo) * 0.03;

                                    Final_EPF12 = String.format("%.2f", EPF12);
                                    Final_EPF8 = String.format("%.2f", EPF8);
                                    Final_ETF3 = String.format("%.2f", ETF3);

                                } else {
                                    Final_EPF12 = "0.00";
                                    Final_EPF8 = "0.00";
                                    Final_ETF3 = "0.00";
                                }

                                //Earnings Details
                                Statement st1 = DbConnection.getconnection().createStatement();
                                ResultSet rs1 = st1.executeQuery("select *,COUNT(*) from salary_manual_earnings where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                                while (rs1.next()) {

                                    int i = Integer.parseInt(rs1.getString("COUNT(*)"));

                                    if (i == 0) {

                                    } else {
                                        PoyaDay = Double.parseDouble(rs1.getString("PoyaDay"));
                                        MCAllo = Double.parseDouble(rs1.getString("MCAllowance"));
                                        OtherAllo = Double.parseDouble(rs1.getString("Other"));

                                        Final_Poya = String.format("%.2f", PoyaDay);
                                        //Final_MCAllow = String.format("%.2f", MCAllo);
                                        Final_OtherAllow = String.format("%.2f", OtherAllo);
                                        System.out.println(EPF + "  " + Final_OtherAllow);
                                    }

                                }

                                Final_MCAllow = String.format("%.2f", (MCAllo + MCAllowance));

                                perfomance = Balance_Gross * 0.52;
                                attendance = Balance_Gross * 0.48;

                                Double Final_Gross = (TaxEarn + Budjet_Allo + PoyaDay + MCAllo + OtherAllo + MCAllowance + attendance + perfomance);

                                Final_Gross_Salary = String.format("%.2f", Final_Gross);

                                System.out.println(EPF + " poya:" + PoyaDay + " mc:" + MCAllo + " other: " + OtherAllo + "FinalGross: " + Final_Gross + " Perfo: " + perfomance + " atten: " + attendance);

                                Final_Perfomance = String.format("%.2f", perfomance);
                                Final_Attendance = String.format("%.2f", attendance);

                                //Deductions Details
                                Statement st2 = DbConnection.getconnection().createStatement();
                                ResultSet rs2 = st2.executeQuery("select *,COUNT(*),SUM(Meal),SUM(Rental),SUM(LessShift),SUM(OtherDeduc),SUM(DeathDonation),SUM(Insuarance) from salary_manual_deductions where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                                while (rs2.next()) {

                                    int i = Integer.parseInt(rs2.getString("COUNT(*)"));

                                    if (i == 0) {
                                    } else {

                                        String SMeal = rs2.getString("SUM(Meal)");

                                        Meal = Double.parseDouble(SMeal);
                                        Rental = Double.parseDouble(rs2.getString("SUM(Rental)"));
                                        LessShift = Double.parseDouble(rs2.getString("SUM(LessShift)"));
                                        OtherDeduc = Double.parseDouble(rs2.getString("SUM(OtherDeduc)"));
                                        DeathDonation = Double.parseDouble(rs2.getString("SUM(DeathDonation)"));
                                        Insuarance = Double.parseDouble(rs2.getString("SUM(Insuarance)"));

                                        Final_Meal = String.format("%.2f", Meal);
                                        Final_Rental = String.format("%.2f", Rental);
                                        Final_LessShift = String.format("%.2f", LessShift);
                                        Final_OtherDeduc = String.format("%.2f", OtherDeduc);
                                        Final_DeathDonation = String.format("%.2f", DeathDonation);
                                        Final_Insuarance = String.format("%.2f", Insuarance);

                                    }

                                }
                                // ******************
                                //Get details OF Distress_Loan_01
                                Statement Loan_st = DbConnection.getconnection().createStatement();
                                ResultSet Loan_rs = Loan_st.executeQuery("SELECT *,COUNT(*) FROM distress_loan WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Loan_rs.next()) {

                                    int i = Integer.parseInt(Loan_rs.getString("COUNT(*)"));

                                    if (i == 0) {
                                    } else {

                                        String Ref = Loan_rs.getString("LoanReference");
                                        String Rent = Loan_rs.getString("Rental");

                                        Loan_Rental = Double.parseDouble(Rent);

                                        Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                                        Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                                        ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                                        while (Loan_settle_rs.next()) {

                                            int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                                            Double bal = 0.00;
                                            if (count == 0) {
                                                bal = 0.00;
                                            } else {

                                                bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                                Double bal1 = LoanAmount - (Loan_Rental + bal);
                                                Distress_BalanceAmt = String.format("%.2f", bal1);
                                            }

                                        }

                                        Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                                        //Save data to Loan_01 Settlement Table
                                        Statement st3 = DbConnection.getconnection().createStatement();
                                        st3.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                                    }
                                }

                                //Get details OF Distress_Loan_02
                                Statement Loan02_st = DbConnection.getconnection().createStatement();
                                ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT *,COUNT(*) FROM distress_loan_02 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Loan02_rs.next()) {

                                    int i = Integer.parseInt(Loan02_rs.getString("COUNT(*)"));

                                    if (i == 0) {
                                    } else {

                                        String Ref = Loan02_rs.getString("LoanReference");
                                        String Rent = Loan02_rs.getString("Rental");

                                        Loan02_Rental = Double.parseDouble(Rent);

                                        Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                                        Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                                        ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                                        while (Loan02_settle_rs.next()) {

                                            int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                                            Double bal = 0.00;
                                            if (count == 0) {
                                                bal = 0.00;
                                            } else {

                                                bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                                Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                                Distress_BalanceAmt02 = String.format("%.2f", bal1);
                                            }

                                        }

                                        Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                                        //Save data to Loan_02 Settlement Table
                                        Statement st4 = DbConnection.getconnection().createStatement();
                                        st4.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                                    }
                                }

                                //Get details OF Advance01
                                Statement Ad1_st = DbConnection.getconnection().createStatement();
                                ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Ad1_rs.next()) {

                                    String Ref = null;
                                    String Rent = "0";
                                    if (Ad1_rs.getString("EPFno") == null) {

                                    } else {

                                        Ref = Ad1_rs.getString("Reference");
                                        Rent = Ad1_rs.getString("SUM(Amount)");

                                        Advance01_Rental = Double.parseDouble(Rent);
                                        Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
                                    }

                                    //Save data to Advance01 Settlement Table
                                    Statement st5 = DbConnection.getconnection().createStatement();
                                    st5.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                                    st5.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                                }

                                //Get details OF Advance02
                                Statement Ad2_st = DbConnection.getconnection().createStatement();
                                ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Ad2_rs.next()) {

                                    String Ref = null;
                                    String Rent = "0";

                                    if (Ad2_rs.getString("EPFno") == null) {

                                    } else {

                                        Ref = Ad2_rs.getString("Reference");
                                        Rent = Ad2_rs.getString("SUM(Amount)");

                                        Advance02_Rental = Double.parseDouble(Rent);
                                        Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                                    }

                                    //Save data to Advance02 Settlement Table
                                    Statement st6 = DbConnection.getconnection().createStatement();

                                    st6.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                                    st6.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
                                }

                                //Get details OF Festival Advance 
                                Statement fes_st = DbConnection.getconnection().createStatement();
                                ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (fes_rs.next()) {

                                    String Ref = fes_rs.getString("Reference");
                                    String Rent = fes_rs.getString("Rental");

                                    FestivalAdvance_Rental = Double.parseDouble(Rent);
                                    Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                                    //Save data to Festival Advance  Settlement Table
                                    Statement st7 = DbConnection.getconnection().createStatement();

                                    st7.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                                    st7.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                                }

                                //Get Company Address
                                Statement st5 = DbConnection.getconnection().createStatement();
                                ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                                while (rs5.next()) {
                                    ComAddress = rs5.getString("ComAddress");
                                    ComName = rs5.getString("ComName");
                                }

                                Double Total_Deductions = FestivalAdvance_Rental + Advance02_Rental + Advance01_Rental + Loan02_Rental + Loan_Rental + Welfare + Meal + Rental + LessShift + OtherDeduc + DeathDonation + Insuarance + EPF8;
                                Final_Total_Deducs = String.format("%.2f", Total_Deductions);

                                Double Net_Sal = Final_Gross - Total_Deductions;
                                Final_Net_Salary = String.format("%.2f", Net_Sal);
                                //*******************

                                String TotalShifts = Double.toString(WorkedDays);

                                //SAVE SALARY
                                Statement sal_st = DbConnection.getconnection().createStatement();
                                sal_st.executeUpdate("insert into salary_final_admin_staff values('" + EPF + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','0.00','" + Final_Attendance + "','" + Final_Perfomance + "','0.00','0.00','" + Final_Poya + "','0.00','" + Final_MCAllow + "','" + Final_OtherAllow + "','" + Final_Gross_Salary + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','0.00','" + Final_LessShift + "','" + Final_Rental + "','" + Final_DeathDonation + "','" + Final_OtherDeduc + "','" + Final_Insuarance + "','0.00','0.00','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','0.00','" + Final_EPF8 + "','" + Final_Total_Deducs + "','" + Final_Net_Salary + "','" + Final_EPF12 + "','" + Final_ETF3 + "','" + Final_Net_Salary + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + Name + "','" + EmpRank + "','" + TotalShifts + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "',' ','director')");

                                EPF = null;
                                Name = null;
                                ActiveEPF = null;
                                thisMonthSalary = 0.00;
                                perDayAmt = 0.00;

                                ComAddress = null;
                                ComName = null;
                                EmpCompany = null;
                                EmpLocation = null;
                                EmpRank = null;

                                Distress_BalanceAmt = "0.00";
                                Distress_BalanceAmt02 = "0.00";

                                BasicSalary = 0.00;
                                GrossSalary = 0.00;
                                BR_Allo = 0.00;
                                Welfare = 0.00;

                                PoyaDay = 0.00;
                                MCAllo = 0.00;
                                OtherAllo = 0.00;

                                Meal = 0.00;
                                Rental = 0.00;
                                LessShift = 0.00;
                                OtherDeduc = 0.00;
                                DeathDonation = 0.00;
                                Insuarance = 0.00;

                                EPF8 = 0.00;
                                EPF12 = 0.00;
                                ETF3 = 0.00;

                                Loan_Rental = 0.00;
                                Loan02_Rental = 0.00;
                                Advance01_Rental = 0.00;
                                Advance02_Rental = 0.00;
                                FestivalAdvance_Rental = 0.00;

                                perfomance = 0.00;
                                attendance = 0.00;

                                //Final Data
                                Final_Basic = "0.00";
                                Final_BR = "0.00";

                                Final_EPF12 = "0.00";
                                Final_EPF8 = "0.00";
                                Final_ETF3 = "0.00";

                                Final_Poya = "0.00";
                                Final_MCAllow = "0.00";
                                Final_OtherAllow = "0.00";

                                Final_Meal = "0.00";
                                Final_Rental = "0.00";
                                Final_LessShift = "0.00";
                                Final_OtherDeduc = "0.00";
                                Final_DeathDonation = "0.00";
                                Final_Insuarance = "0.00";
                                Final_Welfare = "0.00";

                                Final_Attendance = "0.00";
                                Final_Perfomance = "0.00";

                                Final_Loan_Rental = "0.00";
                                Final_Loan02_Rental = "0.00";
                                Final_Advance01_Rental = "0.00";
                                Final_Advance02_Rental = "0.00";
                                Final_FestivalAdvance_Rental = "0.00";

                                Final_Gross_Salary = "0.00";
                                Final_Total_Deducs = "0.00";
                                Final_Net_Salary = "0.00";

                                MCAllowance = 0.00;

                            }

                            //MaxDays = 0;
                            WorkedDays = 0.0;

                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, e);
                        e.printStackTrace();

                    }
                    delete_null_data_in_settelsment_tables();
                    lbl_atten.setText(" Director Staff Salary  Processed  Succesfully...! ");
                    Color cl = new Color(0, 153, 51);
                    lbl_atten.setForeground(cl);
                    lbl_atten.setVisible(true);
//                    btn_Office_salary_process.setEnabled(false);

                }

            } else {

            }
        } else {

        }

//*************** END OF NEW CALCULATION****************************************
    }

    private void Tempory_Guards() {

        //**********No. of Days per Selected Month****************************
        int year = Integer.parseInt(cmb_year.getSelectedItem().toString());
        int MaxDays = 0;

        if (cmb_month.getSelectedItem().toString().equals("January")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("February")) {

            if (year % 4 == 0) {
                if (year % 100 == 0) {
                    if (year % 400 == 0) {
                        //System.out.println(year + " Is A LEAP YEAR");
                        MaxDays = 29;
                    } else {
                        //System.out.println(year + " Is NOT LEAP YEAR");
                        MaxDays = 28;
                    }
                } else {
                    //System.out.println(year + " Is A LEAP YEAR");
                    MaxDays = 29;
                }
            } else {
                //System.out.println(year + " Is NOT LEAP YEAR");
                MaxDays = 28;
            }

        } else if (cmb_month.getSelectedItem().toString().equals("March")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("April")) {

            MaxDays = 30;

        } else if (cmb_month.getSelectedItem().toString().equals("May")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("June")) {

            MaxDays = 30;

        } else if (cmb_month.getSelectedItem().toString().equals("July")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("August")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("September")) {

            MaxDays = 30;

        } else if (cmb_month.getSelectedItem().toString().equals("October")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("November")) {

            MaxDays = 30;

        } else if (cmb_month.getSelectedItem().toString().equals("December")) {

            MaxDays = 31;

        }

        System.out.println(cmb_month.getSelectedItem().toString() + " " + MaxDays);

        //********************************************************************
        String EPF = null;
        String Name = null;
        String ActiveEPF = null;

        String ComAddress = null;
        String ComName = null;
        String EmpCompany = null;
        String EmpLocation = null;
        String EmpRank = null;

        String Distress_BalanceAmt = "0.00";
        String Distress_BalanceAmt02 = "0.00";

        Double BasicSalary = 0.00;
        Double GrossSalary = 0.00;
        Double BR_Allo = 0.00;
        Double TaxEarn = 0.00;
        Double Welfare = 0.00;
        Double Budjet_Allo = 0.00;
        Double Balance_Gross = 0.00;

        Double WorkedDays = 0.00;

        Double PoyaDay = 0.00;
        Double MCAllo = 0.00;
        Double OtherAllo = 0.00;

        Double Meal = 0.00;
        Double Rental = 0.00;
        Double LessShift = 0.00;
        Double OtherDeduc = 0.00;
        Double DeathDonation = 0.00;
        Double Insuarance = 0.00;

        Double EPF8 = 0.00;
        Double EPF12 = 0.00;
        Double ETF3 = 0.00;

        Double Loan_Rental = 0.00;
        Double Loan02_Rental = 0.00;
        Double Advance01_Rental = 0.00;
        Double Advance02_Rental = 0.00;
        Double FestivalAdvance_Rental = 0.00;

        Double perfomance = 0.00;
        Double attendance = 0.00;

        //Final Data
        String Final_Basic = "0.00";
        String Final_BR = "0.00";

        String Final_EPF12 = "0.00";
        String Final_EPF8 = "0.00";
        String Final_ETF3 = "0.00";

        String Final_Poya = "0.00";
        String Final_MCAllow = "0.00";
        String Final_OtherAllow = "0.00";

        String Final_Meal = "0.00";
        String Final_Rental = "0.00";
        String Final_LessShift = "0.00";
        String Final_OtherDeduc = "0.00";
        String Final_DeathDonation = "0.00";
        String Final_Insuarance = "0.00";
        String Final_Welfare = "0.00";

        String Final_Attendance = "0.00";
        String Final_Perfomance = "0.00";

        String Final_Loan_Rental = "0.00";
        String Final_Loan02_Rental = "0.00";
        String Final_Advance01_Rental = "0.00";
        String Final_Advance02_Rental = "0.00";
        String Final_FestivalAdvance_Rental = "0.00";

        String Final_Gross_Salary = "0.00";
        String Final_TaxEarn = "0.00";
        String Final_Total_Deducs = "0.00";
        String Final_Net_Salary = "0.00";

        Double MCAllowance = 0.00;

        if (jDateChooser1.getDate() == null) {

            JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");
        } else {
            salary_ReSet_Admin_Staff();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

            try {

                Statement st_days = DbConnection.getconnection().createStatement();
                ResultSet rs_days = st_days.executeQuery("select * from emp_atten_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                while (rs_days.next()) {
                    EPF = rs_days.getString("EPFno");
                    WorkedDays = Double.parseDouble(rs_days.getString("WorkedDays"));

                    // }
                    Statement st = DbConnection.getconnection().createStatement();
                    ResultSet rs = st.executeQuery("select * from employee_reg where RankCategory='Admin Staff' and IsResigned='0' and EPFno='" + EPF + "' ");
                    while (rs.next()) {

                        Name = rs.getString("NameWithInitials");
                        ActiveEPF = rs.getString("ActiveEPF");
                        EmpCompany = rs.getString("DefCompany");
                        EmpLocation = rs.getString("DefLocation");
                        EmpRank = rs.getString("Designation");

                        BasicSalary = Double.parseDouble(rs.getString("BasicSalary"));
                        GrossSalary = Double.parseDouble(rs.getString("GrossSalary"));
                        BR_Allo = Double.parseDouble(rs.getString("BRAllowance"));
                        Welfare = Double.parseDouble(rs.getString("Welfare"));
                        MCAllowance = Double.parseDouble(rs.getString("MCAllowance"));

                        Double perDayAmt = GrossSalary / MaxDays;
                        Double thisMonthSalary = perDayAmt * WorkedDays;

                        System.out.println(EPF + "MAxD: " + MaxDays);
                        System.out.println(EPF + "PerDay: " + perDayAmt);
                        System.out.println(EPF + "Salary: " + thisMonthSalary);

                        if (thisMonthSalary < (BasicSalary + BR_Allo)) {
                            if (thisMonthSalary < BR_Allo) {
                                TaxEarn = thisMonthSalary;
                                Budjet_Allo = 0.00;
                                Balance_Gross = 0.00;
                            } else {
                                TaxEarn = thisMonthSalary - BR_Allo;
                                Budjet_Allo = BR_Allo;
                                Balance_Gross = 0.00;
                            }
                        } else if (thisMonthSalary == (BasicSalary + BR_Allo)) {
                            TaxEarn = BasicSalary;
                            Budjet_Allo = BR_Allo;
                            Balance_Gross = 0.00;
                        } else {
                            TaxEarn = BasicSalary;
                            Budjet_Allo = BR_Allo;
                            Balance_Gross = thisMonthSalary - (BasicSalary + BR_Allo);
                        }

                        System.out.println(EPF + " TaxEarn: " + TaxEarn);
                        System.out.println(EPF + " Budjet_Allo: " + Budjet_Allo);

                        Final_Welfare = String.format("%.2f", Welfare);
                        Final_Basic = String.format("%.2f", BasicSalary);
                        Final_BR = String.format("%.2f", Budjet_Allo);
                        Final_TaxEarn = String.format("%.2f", TaxEarn);
                        //Final_Gross_Salary = String.format("%.2f", GrossSalary);

                        if (ActiveEPF.equals("1")) {

                            EPF8 = (TaxEarn + Budjet_Allo) * 0.08;
                            EPF12 = (TaxEarn + Budjet_Allo) * 0.12;
                            ETF3 = (TaxEarn + Budjet_Allo) * 0.03;

                            Final_EPF12 = String.format("%.2f", EPF12);
                            Final_EPF8 = String.format("%.2f", EPF8);
                            Final_ETF3 = String.format("%.2f", ETF3);

                        } else {
                            Final_EPF12 = "0.00";
                            Final_EPF8 = "0.00";
                            Final_ETF3 = "0.00";
                        }

                        //Earnings Details
                        Statement st1 = DbConnection.getconnection().createStatement();
                        ResultSet rs1 = st1.executeQuery("select * from salary_manual_earnings where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                        while (rs1.next()) {

                            PoyaDay = Double.parseDouble(rs1.getString("PoyaDay"));
                            MCAllo = Double.parseDouble(rs1.getString("MCAllowance"));
                            OtherAllo = Double.parseDouble(rs1.getString("Other"));

                            Final_Poya = String.format("%.2f", PoyaDay);
                            //Final_MCAllow = String.format("%.2f", MCAllo);
                            Final_OtherAllow = String.format("%.2f", OtherAllo);
                            System.out.println(EPF + "  " + Final_OtherAllow);

                        }

                        Final_MCAllow = String.format("%.2f", (MCAllo + MCAllowance));

                        perfomance = Balance_Gross * 0.52;
                        attendance = Balance_Gross * 0.48;

                        Double Final_Gross = (TaxEarn + Budjet_Allo + PoyaDay + MCAllo + OtherAllo + MCAllowance + attendance + perfomance);

                        Final_Gross_Salary = String.format("%.2f", Final_Gross);

                        System.out.println(EPF + " poya:" + PoyaDay + " mc:" + MCAllo + " other: " + OtherAllo + "FinalGross: " + Final_Gross + " Perfo: " + perfomance + " atten: " + attendance);

                        Final_Perfomance = String.format("%.2f", perfomance);
                        Final_Attendance = String.format("%.2f", attendance);

                        //Deductions Details
                        Statement st2 = DbConnection.getconnection().createStatement();
                        ResultSet rs2 = st2.executeQuery("select *,COUNT(*) from salary_manual_deductions where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                        while (rs2.next()) {

                            int i = Integer.parseInt(rs2.getString("COUNT(*)"));

                            if (i == 0) {
                            } else {

                                Meal = Double.parseDouble(rs2.getString("Meal"));
                                Rental = Double.parseDouble(rs2.getString("Rental"));
                                LessShift = Double.parseDouble(rs2.getString("LessShift"));
                                OtherDeduc = Double.parseDouble(rs2.getString("OtherDeduc"));
                                DeathDonation = Double.parseDouble(rs2.getString("DeathDonation"));
                                Insuarance = Double.parseDouble(rs2.getString("Insuarance"));

                                Final_Meal = String.format("%.2f", Meal);
                                Final_Rental = String.format("%.2f", Rental);
                                Final_LessShift = String.format("%.2f", LessShift);
                                Final_OtherDeduc = String.format("%.2f", OtherDeduc);
                                Final_DeathDonation = String.format("%.2f", DeathDonation);
                                Final_Insuarance = String.format("%.2f", Insuarance);
                            }
                        }
                        // ******************
                        //Get details OF Distress_Loan_01
                        Statement Loan_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (Loan_rs.next()) {

                            String Ref = Loan_rs.getString("LoanReference");
                            String Rent = Loan_rs.getString("Rental");

                            Loan_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                            Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                            while (Loan_settle_rs.next()) {

                                int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan_Rental + bal);
                                    Distress_BalanceAmt = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                            //Save data to Loan_01 Settlement Table
                            Statement st3 = DbConnection.getconnection().createStatement();
                            st3.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Distress_Loan_02
                        Statement Loan02_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (Loan02_rs.next()) {

                            String Ref = Loan02_rs.getString("LoanReference");
                            String Rent = Loan02_rs.getString("Rental");

                            Loan02_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                            Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                            while (Loan02_settle_rs.next()) {

                                int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                    Distress_BalanceAmt02 = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                            //Save data to Loan_02 Settlement Table
                            Statement st4 = DbConnection.getconnection().createStatement();
                            st4.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Advance01
                        Statement Ad1_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (Ad1_rs.next()) {
                            String Ref = null;
                            String Rent = "0";
                            if (Ad1_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad1_rs.getString("Reference");
                                Rent = Ad1_rs.getString("SUM(Amount)");

                                Advance01_Rental = Double.parseDouble(Rent);
                                Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
                            }

                            //Save data to Advance01 Settlement Table
                            Statement st5 = DbConnection.getconnection().createStatement();
                            st5.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st5.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                        }

                        //Get details OF Advance02
                        Statement Ad2_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (Ad2_rs.next()) {

                            String Ref = null;
                            String Rent = "0";

                            if (Ad2_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad2_rs.getString("Reference");
                                Rent = Ad2_rs.getString("SUM(Amount)");

                                Advance02_Rental = Double.parseDouble(Rent);
                                Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                            }

                            //Save data to Advance02 Settlement Table
                            Statement st6 = DbConnection.getconnection().createStatement();

                            st6.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                            st6.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get details OF Festival Advance 
                        Statement fes_st = DbConnection.getconnection().createStatement();
                        ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (fes_rs.next()) {

                            String Ref = fes_rs.getString("Reference");
                            String Rent = fes_rs.getString("Rental");

                            FestivalAdvance_Rental = Double.parseDouble(Rent);
                            Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                            //Save data to Festival Advance  Settlement Table
                            Statement st7 = DbConnection.getconnection().createStatement();

                            st7.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                            st7.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get Company Address
                        Statement st5 = DbConnection.getconnection().createStatement();
                        ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                        while (rs5.next()) {
                            ComAddress = rs5.getString("ComAddress");
                            ComName = rs5.getString("ComName");
                        }

                        Double Total_Deductions = FestivalAdvance_Rental + Advance02_Rental + Advance01_Rental + Loan02_Rental + Loan_Rental + Welfare + Meal + Rental + LessShift + OtherDeduc + DeathDonation + Insuarance + EPF8;
                        Final_Total_Deducs = String.format("%.2f", Total_Deductions);

                        Double Net_Sal = Final_Gross - Total_Deductions;
                        Final_Net_Salary = String.format("%.2f", Net_Sal);
                        //*******************

                        String TotalShifts = Double.toString(WorkedDays);

                        //SAVE SALARY
                        Statement sal_st = DbConnection.getconnection().createStatement();
                        sal_st.executeUpdate("insert into salary_final_admin_staff values('" + EPF + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','0.00','" + Final_Attendance + "','" + Final_Perfomance + "','0.00','0.00','" + Final_Poya + "','0.00','" + Final_MCAllow + "','" + Final_OtherAllow + "','" + Final_Gross_Salary + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','0.00','" + Final_LessShift + "','" + Final_Rental + "','" + Final_DeathDonation + "','" + Final_OtherDeduc + "','" + Final_Insuarance + "','0.00','0.00','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','0.00','" + Final_EPF8 + "','" + Final_Total_Deducs + "','" + Final_Net_Salary + "','" + Final_EPF12 + "','" + Final_ETF3 + "','" + Final_Net_Salary + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + Name + "','" + EmpRank + "','" + TotalShifts + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "',' ')");

                        EPF = null;
                        Name = null;
                        ActiveEPF = null;
                        thisMonthSalary = 0.00;
                        perDayAmt = 0.00;

                        ComAddress = null;
                        ComName = null;
                        EmpCompany = null;
                        EmpLocation = null;
                        EmpRank = null;

                        Distress_BalanceAmt = "0.00";
                        Distress_BalanceAmt02 = "0.00";

                        BasicSalary = 0.00;
                        GrossSalary = 0.00;
                        BR_Allo = 0.00;
                        Welfare = 0.00;

                        PoyaDay = 0.00;
                        MCAllo = 0.00;
                        OtherAllo = 0.00;

                        Meal = 0.00;
                        Rental = 0.00;
                        LessShift = 0.00;
                        OtherDeduc = 0.00;
                        DeathDonation = 0.00;
                        Insuarance = 0.00;

                        EPF8 = 0.00;
                        EPF12 = 0.00;
                        ETF3 = 0.00;

                        Loan_Rental = 0.00;
                        Loan02_Rental = 0.00;
                        Advance01_Rental = 0.00;
                        Advance02_Rental = 0.00;
                        FestivalAdvance_Rental = 0.00;

                        perfomance = 0.00;
                        attendance = 0.00;

                        //Final Data
                        Final_Basic = "0.00";
                        Final_BR = "0.00";

                        Final_EPF12 = "0.00";
                        Final_EPF8 = "0.00";
                        Final_ETF3 = "0.00";

                        Final_Poya = "0.00";
                        Final_MCAllow = "0.00";
                        Final_OtherAllow = "0.00";

                        Final_Meal = "0.00";
                        Final_Rental = "0.00";
                        Final_LessShift = "0.00";
                        Final_OtherDeduc = "0.00";
                        Final_DeathDonation = "0.00";
                        Final_Insuarance = "0.00";
                        Final_Welfare = "0.00";

                        Final_Attendance = "0.00";
                        Final_Perfomance = "0.00";

                        Final_Loan_Rental = "0.00";
                        Final_Loan02_Rental = "0.00";
                        Final_Advance01_Rental = "0.00";
                        Final_Advance02_Rental = "0.00";
                        Final_FestivalAdvance_Rental = "0.00";

                        Final_Gross_Salary = "0.00";
                        Final_Total_Deducs = "0.00";
                        Final_Net_Salary = "0.00";

                        MCAllowance = 0.00;

                    }

                    //MaxDays = 0;
                    WorkedDays = 0.0;

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e);
                e.printStackTrace();

            }
            delete_null_data_in_settelsment_tables();
            lbl_atten.setText(" Office Staff Salary  Processed  Succesfully...!");
            Color cl = new Color(0, 153, 51);
            lbl_atten.setForeground(cl);
            lbl_atten.setVisible(true);
//            btn_Office_salary_process.setEnabled(false);

        }

    }

    private int MonthEnd = 1;

    private void month_end() {

        try {

            Connection con = DbConnection.getconnection();
            PreparedStatement pst;

            String sql = "select *,COUNT(*) from month_end where Month='" + cmb_month.getSelectedItem().toString() + "' AND Year='" + cmb_year.getSelectedItem().toString() + "'";

            pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {

                String count = rs.getString("COUNT(*)");

                if (count == null | count.equals("0")) {
                    //salary process
                    MonthEnd = 0;

                } else {
                    MonthEnd = 1;
                    //dont process

                    JOptionPane.showMessageDialog(rootPane, "Month End is Processed for selected Month & Year. Please re-check the Pay Month & Year. ");

                }
                System.out.println(MonthEnd);

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e);

        }

    }

    private void days_per_month() {
        if (cmb_month.getSelectedIndex() == 0) {//jan
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 1) {//feb

            int year = Integer.parseInt(cmb_year.getSelectedItem().toString());

            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {
                max_days = 29.0;
            } else {
                max_days = 28.0;

            }
            regular_shift = 26.0;

        }
        if (cmb_month.getSelectedIndex() == 2) {//mar
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 3) {//apr
            max_days = 30.0;
            regular_shift = 26.0;
        }
        if (cmb_month.getSelectedIndex() == 4) {//may
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 5) {//jun
            max_days = 30.0;
            regular_shift = 26.0;
        }
        if (cmb_month.getSelectedIndex() == 6) {//jul
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 7) {//aug
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 8) {//sep
            max_days = 30.0;
            regular_shift = 26.0;
        }
        if (cmb_month.getSelectedIndex() == 9) {//oct
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 10) {//nov
            max_days = 30.0;
            regular_shift = 26.0;
        }
        if (cmb_month.getSelectedIndex() == 11) {//dec
            max_days = 31.0;
            regular_shift = 27.0;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Salary_process_DEMO_NEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Salary_process_DEMO_NEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Salary_process_DEMO_NEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Salary_process_DEMO_NEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Salary_process_DEMO_NEW().setVisible(true);
            }
        });
    }

    //**** Get Max Shifts for Gross Salary - Only for Supervisors
//                String max_shifts=null;
//                
//                if (rank.equals("FS") | rank.equals("MS")) {
//                    PreparedStatement pst_maxS = null;
//                    String sql_maxS = "select * from employee_reg where EmployeeNo='" + EMPno + "'  ";
//                    pst_maxS = con.prepareStatement(sql_maxS);
//                    ResultSet rs_maxS = pst_maxS.executeQuery();
//                    while (rs_maxS.next()) {
//
//                       String max = rs_maxS.getString("ShiftRate");
//                       if(max.equals("31")| max.equals("30")){
//                       
//                       }
//                         
//                    }
//
//                }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cb_final_salary;
    private javax.swing.JComboBox cmb_month;
    private javax.swing.JComboBox cmb_year;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JLabel lbl_atten;
    private javax.swing.JLabel lbl_atten2;
    private javax.swing.JLabel lbl_current_date;
    private javax.swing.JLabel lbl_runtime;
    private javax.swing.JButton salary_process;
    // End of variables declaration//GEN-END:variables

    private void salary_ReSet() {

        try {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

            Statement st1 = DbConnection.getconnection().createStatement();
            //Update Attendance_Tables
            st1.executeUpdate("update emp_atten_main set SalaryStatus='salary_pending' where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'  ");

            ResultSet rs = st1.executeQuery("select * from salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

            while (rs.next()) {

                String EPF = rs.getString("EPFno");
                Statement st = DbConnection.getconnection().createStatement();
//                if (EPF == null) {
//                    //Update Attendance_Tables
//                    st.executeUpdate("update emp_atten_main set SalaryStatus='salary_pending' where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'  ");
//
//                } else {

                //Step-01 ==> Deleting Previously Processed Salary
//            st.executeUpdate("delete from salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
                //Resetting Loan Tables
                st.executeUpdate("update `distress_loan` set Status='on-going' WHERE LastInstallment = '" + date + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `distress_loan_02` set Status='on-going' WHERE LastInstallment = '" + date + "' and EPFno='" + EPF + "'");

                //Resetting Advance Tables
                st.executeUpdate("update `salary_advance_festival` set Status='on-going' WHERE LastIns >= '" + date + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("update `salary_advance_1` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `salary_advance_2` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");

                //Deleting settlement tables
                st.executeUpdate("delete  from distress_loan_settelment where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from distress_loan_settelment_02 where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("delete  from salary_advance_festival_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_1_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_2_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");

                //Update Attendance_Tables
                //  st.executeUpdate("update emp_atten_main set SalaryStatus='salary_pending' where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'  ");
                // st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_pending' where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
            }
//            }

            // Deleting Previously Processed Salary
            Statement st_del = DbConnection.getconnection().createStatement();
            st_del.executeUpdate("delete from salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    private void delete_null_data_in_settelsment_tables() {

        try {

            Statement st = DbConnection.getconnection().createStatement();
            st.executeUpdate("delete from salary_advance_1_settlement where Reference='null'");
            st.executeUpdate("delete from salary_advance_2_settlement where Reference='null'");

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void salary_ReSet_Admin_Staff() {

        try {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

            Statement st1 = DbConnection.getconnection().createStatement();
            ResultSet rs = st1.executeQuery("select * from salary_final_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

            while (rs.next()) {

                String EPF = rs.getString("EPFno");

                //Step-01 ==> Deleting Previously Processed Salary
                Statement st = DbConnection.getconnection().createStatement();
//            st.executeUpdate("delete from salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

                //Resetting Loan Tables
                st.executeUpdate("update `distress_loan` set Status='on-going' WHERE LastInstallment >= '" + date + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `distress_loan_02` set Status='on-going' WHERE LastInstallment >= '" + date + "' and EPFno='" + EPF + "'");

                //Resetting Advance Tables
                st.executeUpdate("update `salary_advance_festival` set Status='on-going' WHERE LastIns >= '" + date + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("update `salary_advance_1` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `salary_advance_2` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");

                //Deleting settlement tables
                st.executeUpdate("delete  from distress_loan_settelment where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from distress_loan_settelment_02 where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("delete  from salary_advance_festival_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_1_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_2_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");

            }

            // Deleting Previously Processed Salary
            Statement st_del = DbConnection.getconnection().createStatement();
            st_del.executeUpdate("delete from salary_final_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    private void salary_ReSet_Target_Site_EMP() {

        try {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

            Statement st1 = DbConnection.getconnection().createStatement();
            ResultSet rs = st1.executeQuery("select * from salary_final_site_employees where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

            while (rs.next()) {

                String EPF = rs.getString("EMPno");
                Statement st = DbConnection.getconnection().createStatement();

                st.executeUpdate("update `distress_loan` set Status='on-going' WHERE LastInstallment = '" + date + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `distress_loan_02` set Status='on-going' WHERE LastInstallment = '" + date + "' and EPFno='" + EPF + "'");

                //Resetting Advance Tables
                // st.executeUpdate("update `salary_advance_festival` set Status='on-going' WHERE LastIns >= '" + date + "' and EPFno='" + EPF + "' ");
                // st.executeUpdate("update `salary_advance_1` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                // st.executeUpdate("update `salary_advance_2` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                //Deleting settlement tables
                st.executeUpdate("delete  from distress_loan_settelment where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from distress_loan_settelment_02 where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("delete  from salary_advance_festival_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_1_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_2_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    //Target & Express Salary Caalculations
    private void target() {

        lbl_atten.setText("Salary Processing... Please Wait.");
        lbl_atten.setForeground(Color.red);
        lbl_atten.setVisible(true);
        salary_process.setEnabled(false);
        System.out.println("rest");
        salary_ReSet_Target_Site_EMP();

        try {
            Connection con = DbConnection.getconnection();

            //data got from emp_atten_main
            String Empno = "";
            String Rank = "";
            String DisplayRank = "";
            String Loc = "";
            String DayDuty = "";
            String NightDuty = "";
            String DayRate = "";
            String NightRate = "";
            String OThours = "";
            String OTRate = "0";
            String Company = "0";
            String ComCode = "0";

            String Meal = "0";
            String Rental = "0";
            String HavingGross = "0";

            //data got from employee_reg
            String EmpName = "0";
            String PayType = "0";
            String EPFno = "0";
            String emp_gross_salary = "0";
            String emp_basic_salary = "0";
            String emp_bra_salary = "0";
            String isExtraShiftAllowed = "0";
            String EPFActive = "0";
            String MaxShiftsforGross = "0";
            String emp_def_loc = "0";
            String Bank = "0";

            //data got from salary_rates
            String MaxShiftForBasic = "0";
            String MaxShiftForBRA = "0";
            String perDayBasic = "0";
            String perDayBRA = "0";
            String Welfare = "0.00";
            String ExtraShiftRate = "0";
            String AttnAllow = "0";
            String MaxShiftForAttnAllow = "0";
            String SPR = "0";
            String minShiftforSPR = "0";

            //data from emp_attn_summery
            String ExtraShifts = "0";

            //data from salary manual earnings
            String SundayAmount = "0";
            String PoyaDayAmount = "0";
            String Sundays = "0";
            String Poyadays = "0";
            String MachineAllow = "0";
            String AttenAlolw = "0";
            String OtherAlolw = "0";
            String SpecialAlolw = "0";

            //input doubles
            Double day_duty = 0.00;
            Double night_duty = 0.00;
            Double day2_duty = 0.00;
            Double extra_duty = 0.00;
            Double ot_hours = 0.00;
            Double day_rate = 0.00;
            Double night_rate = 0.00;
            Double extra_rate = 0.00;
            Double ot_rate = 0.00;
            Double max_days_for_basic = 0.00;
            Double per_day_basic = 0.00;
            Double max_days_for_bra = 0.00;
            Double per_day_bra = 0.00;
            Double sunday = 0.00;
            Double poyaday = 0.00;
            Double sunday_rate = 0.00;
            Double poya_rate = 0.00;

            //total doubles
            Double total_day_amount = 0.00;
            Double total_night_amount = 0.00;
            Double total_ot_amount = 0.00;
            Double total_extra_duty_amount = 0.00;
            Double total_duty = 0.00;
            Double total_duty_amount = 0.00;
            Double bra = 0.00;
            Double basic_salary = 0.00;
            Double total_sunday_amount = 0.00;
            Double total_poya_amount = 0.00;
            Double Attn_Incentive = 0.00;
            Double Site_Incentive = 0.00;
            Double Other_Allow = 0.00;
            Double salary_for_epf = 0.00;
            Double aa_amount = 0.00;
            Double ma_amount = 0.00;
            Double gross_salary = 0.00;
            Double epf8 = 0.00;
            Double epf12 = 0.00;
            Double etf3 = 0.00;
            //Final Outputs
            String TotalDayAmount = "";
            String TotalNightAmount = "";
            String TotalDutyAmount = "";
            String FinalOTAmount = "";
            String FinalBasic = "";
            String FinalBRA = "";
            String FinalGross = "";
            String FinalAttnIncentive = "";

            String TotalExtraDutyAmount = "";
            String TotalSundayAmount = "";
            String TotalPoyadayAmount = "";

            String month = cmb_month.getSelectedItem().toString();
            String year = cmb_year.getSelectedItem().toString();

            String SalaryType = "";
            String current_status = "";
            if (cb_final_salary.isSelected()) {
                SalaryType = "FINAL";
            } else {
                SalaryType = "TEMP";
            }
            System.out.println("sql_upd");
            String sql_upd = "update salary_final_site_employees set Status='OLD' where SalaryType='" + SalaryType + "' and Month='" + month + "' and Year='" + year + "' ";
            PreparedStatement pst_upd = con.prepareStatement(sql_upd);
            pst_upd.execute();
            System.out.println("sql_upd");

            String sql = "select *,SUM(DayShift+NightShift+DayTwoShift+(HalfDayShift/2))  from emp_atten_main where  Month='" + month + "' and Year='" + year + "'   and Status='processed' group by EPFno    ";
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            System.out.println("sql ");
            while (rs.next()) {

                Empno = rs.getString("EPFno");
                //    Empno = "05178";
                System.out.println("sql " + Empno);
                total_duty = rs.getDouble("SUM(DayShift+NightShift+DayTwoShift+(HalfDayShift/2))");

                Double D_emp_gross = 0.00;
                Double D_emp_basic = 0.00;
                Double D_emp_bra = 0.00;
                Double D_emp_max_for_gross = 0.00;
                String epf_active = "0";

                String sql_emp = "select * from employee_reg where EmployeeNo='" + Empno + "'    ";
                PreparedStatement pst_emp = con.prepareStatement(sql_emp);
                ResultSet rs_emp = pst_emp.executeQuery();
                while (rs_emp.next()) {

                    emp_gross_salary = rs_emp.getString("GrossSalary");
                    isExtraShiftAllowed = rs_emp.getString("ExtraShiftAllowed");
                    EPFActive = rs_emp.getString("ActiveEPF");
                    MaxShiftsforGross = rs_emp.getString("ShiftRate");
                    emp_basic_salary = rs_emp.getString("BasicSalary");
                    emp_bra_salary = rs_emp.getString("BRAllowance");
                    Rank = rs_emp.getString("Designation");
                    Loc = rs_emp.getString("DefLocation");
                    //Loc="E202";
                    epf_active = rs_emp.getString("ActiveEPF");
                    PayType = rs_emp.getString("PayType");
                    EPFno = rs_emp.getString("EPFno");
                    EmpName = rs_emp.getString("NameWithInitials");
                    ComCode = rs_emp.getString("DefCompany");

                    D_emp_gross = Double.parseDouble(emp_gross_salary);
                    D_emp_basic = Double.parseDouble(emp_basic_salary);
                    D_emp_bra = Double.parseDouble(emp_bra_salary);
                    D_emp_max_for_gross = Double.parseDouble(MaxShiftsforGross);

                }

                String LocName = "";
                String LocType = "";
                String loc = "select * from  location_reg where LocCode='" + Loc + "'";
                PreparedStatement pst_loc = con.prepareStatement(loc);
                ResultSet rsloc = pst_loc.executeQuery();
                while (rsloc.next()) {

                    LocName = rsloc.getString("LocName");
                    LocType = rsloc.getString("Tel3");
                }

                Double Unit_day_rate = 0.00;
                Double Unit_night_rate = 0.00;

                String sql3 = "select * from salary_rates where RankCode='" + Rank + "' and LocCode='" + Loc + "' ";
                PreparedStatement pst3 = con.prepareStatement(sql3);
                ResultSet rs3 = pst3.executeQuery();
                while (rs3.next()) {

                    MaxShiftForBasic = rs3.getString("MaxShiftsPerMonth");
                    MaxShiftForBRA = rs3.getString("MaxShiftsForBRA");
                    perDayBasic = rs3.getString("MinDayRate");
                    perDayBRA = rs3.getString("BRAPerDay");
                    ExtraShiftRate = rs3.getString("ExtraShiftRate");
                    MaxShiftForAttnAllow = rs3.getString("MaxShiftsAA");
                    Welfare = rs3.getString("Welfare");
                    SPR = rs3.getString("SpecialShiftRate");
                    minShiftforSPR = rs3.getString("minForSPR");
                    sunday_rate = Double.parseDouble(rs3.getString("Sunday"));
                    Unit_day_rate = Double.parseDouble(rs3.getString("DayRate"));
                    Unit_night_rate = Double.parseDouble(rs3.getString("NightRate"));
                    ot_rate = Double.parseDouble(rs3.getString("OTRate"));
                }

                if (MaxShiftForBasic == null | MaxShiftForBasic.isEmpty() | MaxShiftForBasic.equals("")) {
                    MaxShiftForBasic = "0.00";
                }
                if (MaxShiftForBRA == null | MaxShiftForBRA.isEmpty() | MaxShiftForBRA.equals("")) {
                    MaxShiftForBRA = "0.00";
                }
                if (perDayBasic == null | perDayBasic.isEmpty() | perDayBasic.equals("")) {
                    perDayBasic = "0.00";
                }
                if (perDayBRA == null | perDayBRA.isEmpty() | perDayBRA.equals("")) {
                    perDayBRA = "0.00";
                }
                if (ExtraShiftRate == null | ExtraShiftRate.isEmpty() | ExtraShiftRate.equals("")) {
                    ExtraShiftRate = "0.00";
                }

                Double bra_Max_days = Double.parseDouble(MaxShiftForBRA);
                Double basic_Max_days = Double.parseDouble(MaxShiftForBasic);
                Double bra_per_day = Double.parseDouble(perDayBRA);
                Double basic_per_day = Double.parseDouble(perDayBasic);
                Double extra_shift_rate = Double.parseDouble(ExtraShiftRate);

                Double shifts_for_aa = Double.parseDouble(MaxShiftForAttnAllow);
                Double spr = Double.parseDouble(SPR);
                Double shifts_for_spr = Double.parseDouble(minShiftforSPR);

                Double spr_amount = 0.00;

                if (total_duty >= shifts_for_spr) {
                    spr_amount = total_duty * spr;

                } else {
                    spr_amount = 0.00;
                }

                Double extra_shifts = 0.00;
                Double extra_shift_amt = 0.00;

                Double working_days_for_month = 0.0;
                String sql_days = "select * from working_days where Month='" + month + "' and Year='" + year + "' and Loc='" + Loc + "' ";
                PreparedStatement pst_days = con.prepareStatement(sql_days);
                ResultSet rs_days = pst_days.executeQuery();
                while (rs_days.next()) {

                    working_days_for_month = Double.parseDouble(rs_days.getString("Days"));
                    System.out.println("emp  working_days_for_month " + working_days_for_month + "  " + Empno);
                }

                //get total duty amount from emp_atten_summery Table
                Double shift_amount = 0.00;
                String ot_hrs = "";
                String sql1 = "select *,SUM(LineAmount),SUM(TotalOTAmount),SUM(OTHours)  from emp_atten_summery where EMPno='" + Empno + "' and Month='" + month + "' and Year='" + year + "'   ";
                PreparedStatement pst1 = con.prepareStatement(sql1);
                ResultSet rs1 = pst1.executeQuery();
                while (rs1.next()) {
                    ot_hrs = rs1.getString("SUM(OTHours)");
                    String total_shift_amt = rs1.getString("SUM(LineAmount)");
                    String total_ot_amt = rs1.getString("SUM(TotalOTAmount)");

                    total_ot_amount = Double.parseDouble(total_ot_amt);
                    shift_amount = Double.parseDouble(total_shift_amt);
                }

                // --> check employee salary type == Gross Salary Basis or Shift Rate Basis
                if (D_emp_gross != 0.00) { //having gross salary (supervisor)

                    //checking --> mase wada kala yuthu dina ganana employee ge gross ekata adala updarima dina gananata wada adu ho wadi bawa
                    Double month_days_for_gross = 0.0;
                    if (working_days_for_month >= D_emp_max_for_gross) {
                        month_days_for_gross = D_emp_max_for_gross;
                    } else {
//                        if (Loc.equals("T154") | Loc.equals("E202")) {
//                            month_days_for_gross = D_emp_max_for_gross;
//                        } else {
                        month_days_for_gross = working_days_for_month;
//                        }

                    }//<--

                    if (isExtraShiftAllowed.equals("1")) { // having gross with extra shift allowed

                        if (total_duty > month_days_for_gross) {
                            extra_shifts = total_duty - month_days_for_gross;
                            extra_shift_amt = extra_shifts * extra_shift_rate;
                            total_duty_amount = D_emp_gross + extra_shift_amt;

                        } else if (total_duty < month_days_for_gross) {
                            total_duty_amount = (D_emp_gross / month_days_for_gross) * total_duty;

                        } else {
                            total_duty_amount = D_emp_gross;
                        }

                    } else { //no extra shift calcuating ONLY gross amount 

                        if (total_duty >= month_days_for_gross) {
                            total_duty_amount = D_emp_gross;

                        } else if (total_duty < month_days_for_gross) {
                            total_duty_amount = (D_emp_gross / month_days_for_gross) * total_duty;
                        }
                    }

                } else {//shift basis salary (janitor)

                    total_duty_amount = (shift_amount - total_ot_amount) + spr_amount;
                    System.out.println("shift_amount " + shift_amount);
                    System.out.println("total_ot_amount " + total_ot_amount);
                    System.out.println("spr_amount " + spr_amount);
                }// <-- check employee salary type 

                //get basic salary for the month
                String epf_duty = "0";
                Double D_epf_duty = 0.00;
                Double days_for_basic = 0.0;
                if (basic_Max_days == 31) {
                    days_for_basic = max_days;
                } else {

                    if (basic_Max_days >= working_days_for_month) {
                        days_for_basic = working_days_for_month;
                    } else {
                        days_for_basic = basic_Max_days;
                    }

                }

                System.out.println("total_duty " + total_duty);
                System.out.println("days_for_basic " + days_for_basic);

                if (total_duty >= days_for_basic) {
                    basic_salary = basic_per_day * days_for_basic;
                    D_epf_duty = days_for_basic;
                } else {
                    basic_salary = basic_per_day * total_duty;
                    D_epf_duty = total_duty;
                }
                FinalBasic = String.format("%.2f", basic_salary);
                epf_duty = String.format("%.1f", D_epf_duty);

                //get BRA for the month
                Double days_for_bra = 0.0;
                if (working_days_for_month >= bra_Max_days) {
                    days_for_bra = bra_Max_days;
                } else {
                    days_for_bra = working_days_for_month;
                }

                if (total_duty >= days_for_bra) {
                    bra = bra_per_day * days_for_bra;
                } else {
                    bra = bra_per_day * total_duty;
                }
                FinalBRA = String.format("%.2f", bra);

                //get incentive amount
                Double inc = total_duty_amount - (bra + basic_salary);
                //JOptionPane.showMessageDialog(rootPane, Welfare);

                System.out.println("total_duty_amount: " + total_duty_amount);
                System.out.println("INC: " + inc);
                System.out.println("bra: " + bra);
                System.out.println("basic_salary: " + basic_salary);
//                if (inc > 0) {
//                    Attn_Incentive = inc;
//                } else {
//                    Attn_Incentive = 0.00;
//                }
//                FinalAttnIncentive = String.format("%.2f", Attn_Incentive);

                // Attendance Allowance
                aa_amount = 0.00;
                String sqlattn = "select *,COUNT(*) from attn_allowance where  LocCode='" + Loc + "' and Rank='" + Rank + "' ";
                PreparedStatement pstattn = con.prepareStatement(sqlattn);
                ResultSet rsattn = pstattn.executeQuery();
                while (rsattn.next()) {

                    if (rsattn.getInt("COUNT(*)") > 0) {
                        String sqlattn2 = "select * from attn_allowance where  LocCode='" + Loc + "' and Rank='" + Rank + "' ";
                        PreparedStatement pstattn2 = con.prepareStatement(sqlattn2);
                        ResultSet rsattn2 = pstattn2.executeQuery();
                        while (rsattn2.next()) {

                            Double max = Double.parseDouble(rsattn2.getString("Max"));
                            Double min = Double.parseDouble(rsattn2.getString("Min"));
                            Double amt = Double.parseDouble(rsattn2.getString("Amount"));
                            System.out.println("********************************************************min: " + min);
                            if (max_days < 30) {
                                min = min - 1;
                            }

                            System.out.println("********************************************************after if min: " + min);

                            if ((max >= total_duty) && (total_duty >= min)) {

                                aa_amount = amt;
                            }

                        }

                    } else {

                    }

                }

                //get machine allowance
                System.out.println("---------- loc " + Loc);
                System.out.println("---------- loc " + Rank);

                ma_amount = 0.00;
                String sqlma = "select *,COUNT(*) from machine_allowance where  LocCode='" + Loc + "' and Rank='" + Rank + "' ";
                PreparedStatement pstma = con.prepareStatement(sqlma);
                ResultSet rsma = pstma.executeQuery();
                while (rsma.next()) {

                    if (rsma.getInt("COUNT(*)") > 0) {
                        String sqlma2 = "select * from machine_allowance where  LocCode='" + Loc + "' and Rank='" + Rank + "' ";
                        PreparedStatement pstma2 = con.prepareStatement(sqlma2);
                        ResultSet rsma2 = pstma2.executeQuery();
                        while (rsma2.next()) {

                            Double days = Double.parseDouble(rsma2.getString("Days"));
                            String devide = rsma2.getString("Devide");
                            Double amt = Double.parseDouble(rsma2.getString("Amount"));

                            if (devide.equals("1")) {

                                if (total_duty <= days) {
                                    ma_amount = (amt / days) * total_duty;
                                } else {
                                    ma_amount = amt;
                                }

                            } else {

                                if (total_duty >= days) {
                                    ma_amount = amt;
                                } else {
                                    ma_amount = 0.00;
                                }

                                System.out.println("**********ma**** = " + ma_amount);

                            }

                        }

                    } else {

                    }

                }

                //get employee's Earnig details
                String sql4 = "select * from salary_manual_earnings where  EMPno='" + Empno + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ";
                PreparedStatement pst4 = con.prepareStatement(sql4);
                ResultSet rs4 = pst4.executeQuery();
                while (rs4.next()) {

                    PoyaDayAmount = rs4.getString("PerDayAmt_Poyaday");
                    Poyadays = rs4.getString("PoyaDays");
                    MachineAllow = rs4.getString("MachineAllow");
                    SpecialAlolw = rs4.getString("SpecialAllow");
                    OtherAlolw = rs4.getString("OtherAllow");

                }//rs4

                if (MachineAllow == null | MachineAllow.isEmpty() | MachineAllow.equals("")) {
                    MachineAllow = "0.00";
                }

                if (SpecialAlolw == null | SpecialAlolw.isEmpty() | SpecialAlolw.equals("")) {
                    SpecialAlolw = "0.00";
                }
                if (OtherAlolw == null | OtherAlolw.isEmpty() | OtherAlolw.equals("")) {
                    OtherAlolw = "0.00";
                }

                System.out.println(Empno);

                //sunday amount 
                System.out.println("LocType " + Loc + " - " + LocType);
                System.out.println("sunday cal type 03 ====== ");
                System.out.println("max days " + max_days);
                sunday = 0.00;
                if (LocType.equals("Type03")) {
                    String maxdays = Double.toString(max_days);
                    String[] intnum = maxdays.split("\\.");
                    String new_maxdays = intnum[0];

                    PreparedStatement pst_manual_sun = con.prepareStatement("select * from sundays_manual where MonthDays='" + new_maxdays + "' ");
                    ResultSet rs_manual_sun = pst_manual_sun.executeQuery();
                    while (rs_manual_sun.next()) {

                        Double working_days = Double.parseDouble(rs_manual_sun.getString("WorkingDays"));
                        Double month_days = Double.parseDouble(rs_manual_sun.getString("MonthDays"));
                        System.out.println("****************************************-------------------------- ");
                        System.out.println("sunday cal type 03 ====== ");
                        System.out.println("max days " + max_days);
                        System.out.println("month days " + month_days);
                        System.out.println("working days " + working_days);
                        System.out.println("total_duty " + total_duty);

                        inc = total_duty_amount - (bra + basic_salary + total_ot_amount);

//                        System.out.println("EMP " + Empno);
//                        System.out.println("total_duty_amount " + total_duty_amount);
//                        System.out.println("bra " + bra);
//                        System.out.println("basic_salary " + basic_salary);
//                        System.out.println("total_ot_amount " + total_ot_amount);
//                        System.out.println("inc " + inc);
                        if (Objects.equals(total_duty, working_days)) {
                            System.out.println("total_duty >= working_days ");
                            sunday = Double.parseDouble(rs_manual_sun.getString("Sundays")) * sunday_rate;
                            System.out.println("sunday " + sunday);
                            System.out.println("sunday_rate " + sunday_rate);
                            System.out.println("Sundays " + rs_manual_sun.getString("Sundays"));
                        } else {
                            System.out.println("else");

                        }
                        System.out.println("****************************************--------------------------- ");

                    }

                }

                if (LocType.equals("Type04")) {

                    Double bal_salary = total_duty_amount - (basic_salary + bra + total_ot_amount);
                    if (bal_salary > sunday_rate) {
                        System.out.println("bal_salary " + bal_salary);
                        System.out.println("sunday_rate " + sunday_rate);

                        Double sundays = bal_salary / sunday_rate;
                        if (sundays > 0) {

                            String sun = Double.toString(sundays);
                            System.out.println("sun " + sun);
                            String[] number = sun.split("\\.");
                            String intnum = number[0];
                            String decinum = "0." + number[1];
                            System.out.println("intnum " + intnum);
                            System.out.println("decinum " + decinum);

                            Double int_number = Double.parseDouble(intnum);
                            Double decimal_number = Double.parseDouble(decinum);

                            Double real_sundays = 0.0;
                            if (int_number >= 5.0) {
                                real_sundays = 5.0;
                            } else {
                                real_sundays = int_number;
                            }

                            sunday = real_sundays * sunday_rate;
                            inc = bal_salary - sunday;
                        } else {
                            sunday = 0.00;
                        }

                    } else {
                        sunday = 0.00;
                    }

                }

                if (LocType.equals("Type01")) {

                    inc = total_duty_amount - (basic_salary + bra);
                }

                if (LocType.equals("Type02")) {

                    inc = total_duty_amount - (basic_salary);
                }

                if (LocType.equals("Type01") | LocType.equals("Type02")) {

                    // inc = total_duty_amount - (basic_salary + bra);
                    PreparedStatement pst_sun = con.prepareStatement("select *,SUM(Sunday) from special_holiday_earnings where EMPno='" + Empno + "' and Month='" + month + "' and Year='" + year + "'");
                    ResultSet rs_sun = pst_sun.executeQuery();
                    while (rs_sun.next()) {

                        //SundayAmount = rs_sun.getString("SUM(Sunday)");
                        sunday = rs_sun.getDouble("SUM(Sunday)");

                        if (sunday == null) {
                            sunday = 0.00;
                        }

                    }
                }

                if (LocType.equals("Type05")) {
                    PreparedStatement pst_sum = con.prepareStatement("select *,SUM(DayTwoShift+NightShift),SUM(DayShift) from emp_atten_main where EPFno='" + Empno + "' and Month='" + month + "' and Year='" + year + "'");
                    ResultSet rs_sum = pst_sum.executeQuery();
                    while (rs_sum.next()) {
                        Double d2 = Double.parseDouble(rs_sum.getString("SUM(DayTwoShift+NightShift)"));
                        Double d1 = Double.parseDouble(rs_sum.getString("SUM(DayShift)"));

                        Double ot_d1 = d1 * ot_rate;
                        Double ot_d2 = (d2 * 2) * ot_rate;

                        total_ot_amount = ot_d1 + ot_d2;

                        Double bal_salary = total_duty_amount - (basic_salary + bra + total_ot_amount);
                        if (bal_salary > 0) {
                            inc = bal_salary;
                        }

                    }
                }

                TotalSundayAmount = String.format("%.2f", sunday);
                System.out.println("TotalSundayAmount " + TotalSundayAmount);
                Double get_acctual_poya_amt = 0.00;
                if (LocType.equals("Type04") | LocType.equals("Type02") | LocType.equals("Type01")) {

                    PreparedStatement pst_poya = con.prepareStatement("select *,SUM(Poyaday) from special_holiday_earnings where EMPno='" + Empno + "' and Month='" + month + "' and Year='" + year + "'");
                    ResultSet rs_poya = pst_poya.executeQuery();
                    while (rs_poya.next()) {

                        //SundayAmount = rs_sun.getString("SUM(Sunday)");
                        get_acctual_poya_amt = rs_poya.getDouble("SUM(Poyaday)");

//                    if (get_acctual_poya_amt == null) {
//                        get_acctual_poya_amt = 0.00;
//                    }
                    }
                }

                poyaday = Double.parseDouble(PoyaDayAmount) + get_acctual_poya_amt;

                TotalPoyadayAmount = String.format("%.2f", poyaday);

                Double Sunday_Poya_Total = poyaday + sunday;
                System.out.println(Empno);

                if (inc > 0) {
                    Attn_Incentive = inc;
                } else {
                    Attn_Incentive = 0.00;
                }
                FinalAttnIncentive = String.format("%.2f", Attn_Incentive);

                Double MA = Double.parseDouble(MachineAllow);
                Double SA = Double.parseDouble(SpecialAlolw);
                Double OA = Double.parseDouble(OtherAlolw);
                Double AA = Double.parseDouble(AttenAlolw);

                System.out.println("MA " + MA);
                System.out.println("SA " + SA);
                System.out.println("OA " + OA);
                System.out.println("AA " + AA);

                Site_Incentive = MA + SA + OA + AA + aa_amount + ma_amount;

                FinalOTAmount = String.format("%.2f", total_ot_amount);

                System.out.println(Empno + ": basic= " + basic_salary);

                gross_salary = 0.00;
                FinalGross = "0";

                if (LocType.equals("Type02")) {
// 

                    gross_salary = bra + basic_salary + Site_Incentive + Sunday_Poya_Total + total_ot_amount + Attn_Incentive;

                    salary_for_epf = basic_salary + bra;
                    System.out.println("basic= " + basic_salary);
                    System.out.println("bra= " + bra);
                    System.out.println("SUN= " + Sunday_Poya_Total);

                }
                if (LocType.equals("Type03")) {

                    gross_salary = bra + basic_salary + Site_Incentive + Sunday_Poya_Total + total_ot_amount + Attn_Incentive;

                    salary_for_epf = basic_salary + bra + sunday;
//                    System.out.println("basic= " + basic_salary);
//                    System.out.println("bra= " + bra);
                    System.out.println("Type03 SUN= " + sunday);

                }
                if (LocType.equals("Type04")) {

                    gross_salary = total_duty_amount + Site_Incentive;
                    salary_for_epf = basic_salary + bra + Sunday_Poya_Total;
                    System.out.println("Type04 SUN= " + Sunday_Poya_Total);

                }
                if (LocType.equals("Type05")) {

                    gross_salary = total_duty_amount + MA + SA + OA + AA;
                    salary_for_epf = basic_salary + bra;

                }
                if (LocType.equals("Type01")) {
//type 01
                    salary_for_epf = basic_salary + bra;
                    gross_salary = total_duty_amount + Site_Incentive + Sunday_Poya_Total + total_ot_amount;

                    System.out.println("TYPE 01=================================================================================================================================================================");
                    System.out.println("Loc " + Loc);
                    System.out.println("gross_salary = " + "total_duty_amount " + total_duty_amount + "Site_Incentive:" + Site_Incentive + "Sunday_Poya_Total:" + Sunday_Poya_Total + "total_ot_amount:" + total_ot_amount);
                    System.out.println("salary_for_epf :" + basic_salary + "  " + bra);
                    System.out.println("TYPE 01=================================================================================================================================================================");

                }

//                salary_for_epf = basic_salary + bra;
                System.out.println("basic= " + basic_salary);

                System.out.println("Gross= " + gross_salary);

                FinalGross = String.format("%.2f", gross_salary);

                if (epf_active.equals("1")) {
                    epf8 = salary_for_epf * 0.08;
                    etf3 = salary_for_epf * 0.03;
                    epf12 = salary_for_epf * 0.12;
                } else {
                    epf8 = 0.00;
                    etf3 = 0.00;
                    epf12 = 0.00;

                }

                String TotalMachineAllow = String.format("%.2f", MA);
                //String TotalAttnAllow = String.format("%.2f", AA);
                String TotalSpclAllow = String.format("%.2f", SA);
                String TotalOtherAllow = String.format("%.2f", OA);
//                String TotalGross = String.format("%.2f", Gross);
                String TotalEPF8 = String.format("%.2f", epf8);
                String TotalEPF12 = String.format("%.2f", epf12);
                String TotalETF3 = String.format("%.2f", etf3);

                //**************Deductions***********
                //Uniform
                String uniform = "0.00";

                String sql5 = "select *,SUM(Rental),COUNT(*) from uniform_issue where  EPFno='" + Empno + "' and Status='on-going' ";
                PreparedStatement pst5 = con.prepareStatement(sql5);
                ResultSet rs5 = pst5.executeQuery();
                while (rs5.next()) {

                    if (rs5.getInt("COUNT(*)") == 0) {
                        uniform = "0.00";
                    } else {
                        uniform = rs5.getString("SUM(Rental)");
                    }
                }
                if (uniform == null | uniform.isEmpty() | uniform.equals("")) {
                    uniform = "0.00";
                }

                //Advance
                String advance = "0.00";
                String sql6 = "select *,SUM(Amount),COUNT(*) from salary_advance_1 where  EPFno='" + Empno + "' and PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and Status='PAID'  ";
                PreparedStatement pst6 = con.prepareStatement(sql6);
                ResultSet rs6 = pst6.executeQuery();
                while (rs6.next()) {

                    if (rs6.getInt("COUNT(*)") == 0) {
                        advance = "0.00";
                    } else {
                        advance = rs6.getString("SUM(Amount)");
                    }
                }
                if (advance == null | advance.isEmpty() | advance.equals("")) {
                    advance = "0.00";
                }

                //Advance
                String advance2 = "0.00";
                String sql6_adv = "select *,SUM(Amount),COUNT(*) from salary_advance_2 where  EPFno='" + Empno + "' and PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and Status='PAID'  ";
                PreparedStatement pst6_adv = con.prepareStatement(sql6_adv);
                ResultSet rs6_adv = pst6_adv.executeQuery();
                while (rs6_adv.next()) {

                    if (rs6_adv.getInt("COUNT(*)") == 0) {
                        advance2 = "0.00";
                    } else {
                        advance = rs6_adv.getString("SUM(Amount)");
                    }
                }
                if (advance2 == null | advance2.isEmpty() | advance2.equals("")) {
                    advance2 = "0.00";
                }

                //Loan
                String loan = "0.00";
                String loanRef = "0.00";
                String sql7 = "select *,SUM(Rental),COUNT(*) from distress_loan where  EPFno='" + Empno + "' and Status='on-going' ";
                PreparedStatement pst7 = con.prepareStatement(sql7);
                ResultSet rs7 = pst7.executeQuery();
                while (rs7.next()) {
                    System.out.println("LOAN GET String : " + rs7.getString("SUM(Rental)"));
                    if (rs7.getInt("COUNT(*)") <= 0) {
                        loan = "0.00";
                    } else {
                        loan = rs7.getString("SUM(Rental)");
                        loanRef = rs7.getString("LoanReference");
                    }
                    System.out.println("loan : " + loan);

                }
                if (loan == null | loan.isEmpty() | loan.equals("")) {
                    loan = "0.00";
                }
                System.out.println("loan after if : " + loan);
                System.out.println("***************************");

                String loan2 = "0.00";
                String loanRef2 = "0.00";
                String sql7_loan = "select *,SUM(Rental),COUNT(*) from distress_loan_02 where  EPFno='" + Empno + "' and Status='on-going' ";
                PreparedStatement pst7_loan = con.prepareStatement(sql7_loan);
                ResultSet rs7_loan = pst7_loan.executeQuery();
                while (rs7_loan.next()) {

                    if (rs7_loan.getInt("COUNT(*)") == 0) {
                        loan2 = "0.00";
                    } else {
                        loan2 = rs7_loan.getString("SUM(Rental)");
                        loanRef2 = rs7_loan.getString("LoanReference");
                    }
                }
                if (loan2 == null | loan2.isEmpty() | loan2.equals("")) {
                    loan2 = "0.00";
                }

                String festvl = "0.00";
                String festvlRef = "0.00";
                String sql7_festvl = "select *,SUM(Amount),COUNT(*) from salary_advance_festival_monthly where  EMPno='" + Empno + "' and Month='" + month + "' and Year='" + year + "' ";
                PreparedStatement pst7_festvl = con.prepareStatement(sql7_festvl);
                ResultSet rs7_festvl = pst7_festvl.executeQuery();
                while (rs7_festvl.next()) {

                    if (rs7_festvl.getInt("COUNT(*)") == 0) {
                        festvl = "0.00";
                    } else {
                        festvl = rs7_festvl.getString("SUM(Amount)");
                        //festvlRef = rs7_festvl.getString("LoanReference");
                    }
                }
                if (festvl == null | festvl.isEmpty() | festvl.equals("")) {
                    festvl = "0.00";
                }

                //Other Deductions
                String rental = "0.00";
                String meals = "0.00";
                String death = "0.00";
                String other = "0.00";
                String sql8 = "select *,SUM(Rental),SUM(Meal),SUM(OtherDeduc),SUM(DeathDonation),COUNT(*) from salary_manual_deductions where  EPFno='" + Empno + "' and Month='" + month + "' and Year='" + year + "' ";
                PreparedStatement pst8 = con.prepareStatement(sql8);
                ResultSet rs8 = pst8.executeQuery();
                while (rs8.next()) {

                    if (rs8.getInt("COUNT(*)") == 0) {
                        rental = "0.00";
                        meals = "0.00";
                        death = "0.00";
                        other = "0.00";
                    } else {
                        rental = rs8.getString("SUM(Rental)");
                        meals = rs8.getString("SUM(Meal)");
                        death = rs8.getString("SUM(DeathDonation)");
                        other = rs8.getString("SUM(OtherDeduc)");
                    }
                }

                if (rental == null | rental.isEmpty() | rental.equals("")) {
                    rental = "0.00";
                }
                if (meals == null | meals.isEmpty() | meals.equals("")) {
                    meals = "0.00";
                }
                if (death == null | death.isEmpty() | death.equals("")) {
                    death = "0.00";
                }
                if (other == null | other.isEmpty() | other.equals("")) {
                    other = "0.00";
                }

                //Employee Details
                if (Welfare == null | Welfare.isEmpty() | Welfare.equals("")) {
                    Welfare = "0.00";
                }

                Double D_uniform = Double.parseDouble(uniform);
                Double D_loan = Double.parseDouble(loan);
                Double D_loan2 = Double.parseDouble(loan2);
                Double D_advance = Double.parseDouble(advance);
                Double D_advance2 = Double.parseDouble(advance2);
                Double D_festival = Double.parseDouble(festvl);
                Double D_rental = Double.parseDouble(rental);
                Double D_meals = Double.parseDouble(meals);
                Double D_death = Double.parseDouble(death);
                Double D_other = Double.parseDouble(other);
                Double D_welfare = Double.parseDouble(Welfare);

                String sql_1 = "select * ,SUM(Day+Half),SUM(Night+DN),SUM(DayTwo)  from emp_atten_summery where EMPno='" + Empno + "'  and Month='" + month + "' and Year='" + year + "' ";
                PreparedStatement pst_1 = con.prepareStatement(sql_1);
                ResultSet rs_1 = pst_1.executeQuery();
                while (rs_1.next()) {

                    day_duty = Double.parseDouble(rs_1.getString("SUM(Day+Half)"));
                    day2_duty = Double.parseDouble(rs_1.getString("SUM(DayTwo)"));
                    night_duty = Double.parseDouble(rs_1.getString("SUM(Night+DN)"));

                }

//                String LocName = "";
//                String loc = "select * from  location_reg where LocCode='" + Loc + "'";
//                PreparedStatement pst_loc = con.prepareStatement(loc);
//                ResultSet rsloc = pst_loc.executeQuery();
//                while (rsloc.next()) {
//
//                    LocName = rsloc.getString("LocName");
//                }
                String ComAdd = "";
                String com = "select * from company_reg where ComCode='" + ComCode + "'";
                PreparedStatement pst_com = con.prepareStatement(com);
                ResultSet rscom = pst_com.executeQuery();
                while (rscom.next()) {

                    Company = rscom.getString("ComName");
                    ComAdd = rscom.getString("ComAddress");
                }

                String BankCode = "";
                String BankName = "";
                String BranchCode = "";
                String BranchName = "";
                String Acc = "";

                String bank = "select * from emp_bank_acc where EMPno='" + Empno + "'";
                System.out.println("---**********---------");
                System.out.println("Emp: " + Empno);
                PreparedStatement pst_bank = con.prepareStatement(bank);
                ResultSet rsbank = pst_bank.executeQuery();
                while (rsbank.next()) {

                    BankCode = rsbank.getString("Bank");
                    BranchCode = rsbank.getString("Branch");
                    Acc = rsbank.getString("AccName");

                    System.out.println("BankCode: " + BankCode);
                    System.out.println("BranchCode: " + BranchCode);
                    System.out.println("Acc: " + Acc);

                }

                String bank2 = "select * from bank_main where BankCode='" + BankCode + "' group by BankCode ";
                PreparedStatement pst_bank2 = con.prepareStatement(bank2);
                ResultSet rsbank2 = pst_bank2.executeQuery();
                while (rsbank2.next()) {

                    BankName = rsbank2.getString("BankName");
                    System.out.println("BankName: " + BankName);

                }

                String bank3 = "select * from bank_main where BankCode='" + BankCode + "' and BranchCode='" + BranchCode + "' ";
                PreparedStatement pst_bank3 = con.prepareStatement(bank3);
                ResultSet rsbank3 = pst_bank3.executeQuery();
                while (rsbank3.next()) {

                    BranchName = rsbank3.getString("BranchName");
                    System.out.println("BranchName: " + BranchName);
                    System.out.println("------*****************---------");

                }

                String disrank = "select * from rank where RankCode='" + Rank + "'  ";
                PreparedStatement pst_disrank = con.prepareStatement(disrank);
                ResultSet rsdisrank = pst_disrank.executeQuery();
                while (rsdisrank.next()) {

                    DisplayRank = rsdisrank.getString("RankDescription");

                }

                String Stamp = "0.00";
                Double stmp = 0.00;
                if (PayType.equals("Bank")) {
                    Stamp = "25.00";
                    stmp = 25.00;
                } else {
                    Stamp = "0.00";
                    stmp = 0.00;
                }

                Double total_Deductions = D_uniform + D_loan + D_loan2 + D_advance + D_advance2 + D_rental + D_meals + D_death + D_other + epf8 + D_welfare + D_festival + stmp;
                Double net_pay = gross_salary - total_Deductions;
                String sql_save = "insert into  salary_final_site_employees values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)  ";
                PreparedStatement pst_save = con.prepareStatement(sql_save);
                pst_save.setString(1, Empno);
                pst_save.setString(2, EPFno);
                pst_save.setString(3, EmpName);
                pst_save.setString(4, Rank);
                pst_save.setString(5, Loc);
                pst_save.setString(6, String.format("%.1f", day_duty));
                pst_save.setString(7, String.format("%.1f", night_duty));
                pst_save.setString(8, String.format("%.1f", total_duty));
                pst_save.setString(9, FinalBRA);
                pst_save.setString(10, FinalBasic);
                pst_save.setString(11, String.format("%.2f", Sunday_Poya_Total));
                pst_save.setString(12, String.format("%.2f", salary_for_epf));//SalaryforEPF
                pst_save.setString(13, String.format("%.2f", total_ot_amount));
                pst_save.setString(14, String.format("%.2f", Attn_Incentive));
                pst_save.setString(15, String.format("%.2f", Site_Incentive));
                pst_save.setString(16, (FinalGross));
                pst_save.setString(17, String.format("%.2f", etf3));
                pst_save.setString(18, String.format("%.2f", epf12));
                pst_save.setString(19, String.format("%.2f", aa_amount));
                pst_save.setString(20, String.format("%.2f", MA));
                pst_save.setString(21, String.format("%.2f", SA));
                pst_save.setString(22, String.format("%.2f", OA));
                pst_save.setString(23, String.format("%.2f", D_welfare));
                pst_save.setString(24, String.format("%.2f", D_advance));
                pst_save.setString(25, String.format("%.2f", D_loan));
                pst_save.setString(26, String.format("%.2f", D_other));
                pst_save.setString(27, String.format("%.2f", D_uniform));
                pst_save.setString(28, String.format("%.2f", D_meals));
                pst_save.setString(29, String.format("%.2f", epf8));
                pst_save.setString(30, String.format("%.2f", total_Deductions));//
                pst_save.setString(31, String.format("%.2f", net_pay));//
                pst_save.setString(32, PayType);
                pst_save.setString(33, month);
                pst_save.setString(34, year);
                pst_save.setString(35, Company);
                pst_save.setString(36, BankCode);
                pst_save.setString(37, "NEW");
                pst_save.setString(38, epf_duty);
                pst_save.setString(39, String.format("%.2f", D_loan2));//
                pst_save.setString(40, String.format("%.2f", D_advance2));//D_festival
                pst_save.setString(41, String.format("%.2f", D_festival));//
                pst_save.setString(42, SalaryType);//
                pst_save.setString(43, LocName);//
                pst_save.setString(44, ComAdd);//
                pst_save.setString(45, BranchCode);//
                pst_save.setString(46, BranchName);//
                pst_save.setString(47, BankName);//
                pst_save.setString(48, Acc);//
                pst_save.setString(49, "0");//IsLocked
                pst_save.setString(50, LocType);
                pst_save.setString(51, Stamp);
                pst_save.setString(52, DisplayRank);
                pst_save.setString(53, ot_hrs);
                pst_save.setString(54, String.format("%.1f", day2_duty));
                pst_save.execute();

                //data got from emp_atten_main
                Empno = "";
                Rank = "";
                Loc = "";
                DayDuty = "";
                NightDuty = "";
                DayRate = "";
                NightRate = "";
                OThours = "";
                OTRate = "0";
                Company = "0";
                Meal = "0";
                Rental = "0";
                HavingGross = "0";
                ComCode = "0";

                //data got from employee_reg
                EmpName = "0";
                PayType = "0";
                EPFno = "0";
                emp_gross_salary = "0";
                emp_basic_salary = "0";
                emp_bra_salary = "0";
                isExtraShiftAllowed = "0";
                EPFActive = "0";
                MaxShiftsforGross = "0";
                emp_def_loc = "0";
                Bank = "0";

                //data got from salary_rates
                MaxShiftForBasic = "0";
                MaxShiftForBRA = "0";
                perDayBasic = "0";
                perDayBRA = "0";
                Welfare = "0.00";
                ExtraShiftRate = "0";
                AttnAllow = "0";
                MaxShiftForAttnAllow = "0";

                //data from emp_attn_summery
                ExtraShifts = "0";

                //data from salary manual earnings
                SundayAmount = "0";
                PoyaDayAmount = "0";
                Sundays = "0";
                Poyadays = "0";
                MachineAllow = "0";
                AttenAlolw = "0";
                OtherAlolw = "0";
                SpecialAlolw = "0";

                //input doubles
                day_duty = 0.00;
                day2_duty = 0.00;
                night_duty = 0.00;
                extra_duty = 0.00;
                ot_hours = 0.00;
                day_rate = 0.00;
                night_rate = 0.00;
                extra_rate = 0.00;
                ot_rate = 0.00;
                max_days_for_basic = 0.00;
                per_day_basic = 0.00;
                max_days_for_bra = 0.00;
                per_day_bra = 0.00;
                sunday = 0.00;
                poyaday = 0.00;
                sunday_rate = 0.00;
                poya_rate = 0.00;

                //total doubles
                total_day_amount = 0.00;
                total_night_amount = 0.00;
                total_ot_amount = 0.00;
                total_extra_duty_amount = 0.00;
                total_duty = 0.00;
                total_duty_amount = 0.00;
                bra = 0.00;
                basic_salary = 0.00;
                total_sunday_amount = 0.00;
                total_poya_amount = 0.00;
                Attn_Incentive = 0.00;
                Site_Incentive = 0.00;
                salary_for_epf = 0.00;
                aa_amount = 0.00;
                gross_salary = 0.00;
                epf8 = 0.00;
                epf12 = 0.00;
                etf3 = 0.00;
                //Final Outputs
                TotalDayAmount = "";
                TotalNightAmount = "";
                TotalDutyAmount = "";
                FinalOTAmount = "";
                FinalBasic = "";
                FinalBRA = "";
                FinalGross = "";
                FinalAttnIncentive = "";

                TotalExtraDutyAmount = "";
                TotalSundayAmount = "";
                TotalPoyadayAmount = "";
            }//rs

            String sql_del = "delete from salary_final_site_employees where  Status='OLD' and SalaryType='" + SalaryType + "' and Month='" + month + "' and Year='" + year + "' ";
            PreparedStatement pst_del = con.prepareStatement(sql_del);
            pst_del.execute();

//            //data got from emp_atten_main
//            Empno = "";
//            Rank = "";
//            Loc = "";
//            DayDuty = "";
//            NightDuty = "";
//            DayRate = "";
//            NightRate = "";
//            OThours = "";
//            OTRate = "0";
//            Company = "0";
//            Meal = "0";
//            Rental = "0";
//            HavingGross = "0";
//
//            //data got from employee_reg
//            EmpName = "0";
//            PayType = "0";
//            EPFno = "0";
//            emp_gross_salary = "0";
//            emp_basic_salary = "0";
//            emp_bra_salary = "0";
//            isExtraShiftAllowed = "0";
//            EPFActive = "0";
//            MaxShiftsforGross = "0";
//            emp_def_loc = "0";
//            Bank = "0";
//
//            //data got from salary_rates
//            MaxShiftForBasic = "0";
//            MaxShiftForBRA = "0";
//            perDayBasic = "0";
//            perDayBRA = "0";
//            Welfare = "0.00";
//            ExtraShiftRate = "0";
//            AttnAllow = "0";
//            MaxShiftForAttnAllow = "0";
//
//            //data from emp_attn_summery
//            ExtraShifts = "0";
//
//            //data from salary manual earnings
//            SundayAmount = "0";
//            PoyaDayAmount = "0";
//            Sundays = "0";
//            Poyadays = "0";
//            MachineAllow = "0";
//            AttenAlolw = "0";
//            OtherAlolw = "0";
//            SpecialAlolw = "0";
//
//            //input doubles
//            day_duty = 0.00;
//            night_duty = 0.00;
//            extra_duty = 0.00;
//            ot_hours = 0.00;
//            day_rate = 0.00;
//            night_rate = 0.00;
//            extra_rate = 0.00;
//            ot_rate = 0.00;
//            max_days_for_basic = 0.00;
//            per_day_basic = 0.00;
//            max_days_for_bra = 0.00;
//            per_day_bra = 0.00;
//            sunday = 0.00;
//            poyaday = 0.00;
//            sunday_rate = 0.00;
//            poya_rate = 0.00;
//
//            //total doubles
//            total_day_amount = 0.00;
//            total_night_amount = 0.00;
//            total_ot_amount = 0.00;
//            total_extra_duty_amount = 0.00;
//            total_duty = 0.00;
//            total_duty_amount = 0.00;
//            bra = 0.00;
//            basic_salary = 0.00;
//            total_sunday_amount = 0.00;
//            total_poya_amount = 0.00;
//            Attn_Incentive = 0.00;
//            Site_Incentive = 0.00;
//            salary_for_epf = 0.00;
//            aa_amount = 0.00;
//            gross_salary = 0.00;
//            epf8 = 0.00;
//            epf12 = 0.00;
//            etf3 = 0.00;
//            //Final Outputs
//            TotalDayAmount = "";
//            TotalNightAmount = "";
//            TotalDutyAmount = "";
//            FinalOTAmount = "";
//            FinalBasic = "";
//            FinalBRA = "";
//            FinalGross = "";
//            FinalAttnIncentive = "";
//
//            TotalExtraDutyAmount = "";
//            TotalSundayAmount = "";
//            TotalPoyadayAmount = "";
            lbl_atten.setText("Updating R-List...");
            updat_Rlist();

            JOptionPane.showMessageDialog(rootPane, "Salary Processed Complete...!");
            lbl_atten.setText("Salary  Processed  Succesfully...!");
            lbl_atten.setForeground(Color.GREEN);
            lbl_atten.setVisible(true);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "<html>  Employee Salary Processing Error :-<br> ER1258_DOTEx </html> " + e);
        }

    }

    private void updat_Rlist() {

        try {

            String month = cmb_month.getSelectedItem().toString();
            String year = cmb_year.getSelectedItem().toString();

            Connection con = DbConnection.getconnection();
            PreparedStatement pst = con.prepareStatement("select * from salary_stop_payment where Month='" + month + "' and Year='" + year + "'");
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {

                String emp = rs.getString("EMPno");
                String stat = rs.getString("Status");

                if (stat.equals("on-going")) {

                } else {
                    PreparedStatement pst1 = con.prepareStatement("update salary_final_site_employees set Status='RList',PayType='Hand' where EMPno='" + emp + "' and  Month='" + month + "' and Year='" + year + "'");
                    pst1.execute();
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

}
