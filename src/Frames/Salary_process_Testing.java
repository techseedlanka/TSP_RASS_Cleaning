/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

//import static Frames.MAIN.lbl_current_date;
//import com.sun.org.glassfish.external.arc.Taxonomy;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sapu
 */
public class Salary_process_Testing extends javax.swing.JFrame {

    /**
     * Creates new form Salary_process
     */
    public Salary_process_Testing() {
        initComponents();
        Date d = new Date();
        SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
        lbl_current_date.setText("" + ft.format(d));

        lbl_atten.setVisible(false);

    }

    Double max_days = null;
    Double regular_shift = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_SSS_salary_process = new javax.swing.JButton();
        cmb_year = new javax.swing.JComboBox();
        cmb_month = new javax.swing.JComboBox();
        lbl_current_date = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel33 = new javax.swing.JLabel();
        lbl_atten2 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel34 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        lbl_atten = new javax.swing.JLabel();
        btn_SIKURA_salary_process = new javax.swing.JButton();
        btn_Office_salary_process = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btn_Tempory_salary_process = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_SSS_salary_process.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        btn_SSS_salary_process.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Workflow-48.png"))); // NOI18N
        btn_SSS_salary_process.setText("SSS Guards");
        btn_SSS_salary_process.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_SSS_salary_processMousePressed(evt);
            }
        });
        btn_SSS_salary_process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SSS_salary_processActionPerformed(evt);
            }
        });
        getContentPane().add(btn_SSS_salary_process, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 170, 50));

        cmb_year.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        cmb_year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2016", "2017", "2018", "2019", "2020" }));
        cmb_year.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_yearPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_year, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 60, -1, -1));

        cmb_month.setFont(new java.awt.Font("Georgia", 0, 15)); // NOI18N
        cmb_month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        cmb_month.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_monthPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_month, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, 110, -1));

        lbl_current_date.setText("jLabel1");
        getContentPane().add(lbl_current_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 110, -1));

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        jLabel1.setText("Salary Process");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 400, 40));
        getContentPane().add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, 460, 10));

        jLabel33.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel33.setText("Pay Date  :-");
        getContentPane().add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, -1, 20));

        lbl_atten2.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        lbl_atten2.setForeground(new java.awt.Color(153, 0, 51));
        lbl_atten2.setText("**Make sure you selected the correct Month & Year");
        getContentPane().add(lbl_atten2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 300, 20));
        getContentPane().add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 450, 10));

        jButton2.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jButton2.setText("Employee wise Pay Slip");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 190, 40));

        jButton3.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Print.png"))); // NOI18N
        jButton3.setText("SSS Guards Pay Slips");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 390, 210, -1));
        getContentPane().add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 450, 10));

        jLabel34.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel34.setText("Effective Salary Month / Year  :-");
        getContentPane().add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 20));

        jDateChooser1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        getContentPane().add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 130, 25));

        lbl_atten.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        lbl_atten.setForeground(new java.awt.Color(0, 153, 51));
        lbl_atten.setText("                 Salary  Processed  Succesfully...!");
        lbl_atten.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Status:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Georgia", 0, 12))); // NOI18N
        getContentPane().add(lbl_atten, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 450, 50));

        btn_SIKURA_salary_process.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        btn_SIKURA_salary_process.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Workflow-48.png"))); // NOI18N
        btn_SIKURA_salary_process.setText("Sikura Guards");
        btn_SIKURA_salary_process.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_SIKURA_salary_processMousePressed(evt);
            }
        });
        btn_SIKURA_salary_process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SIKURA_salary_processActionPerformed(evt);
            }
        });
        getContentPane().add(btn_SIKURA_salary_process, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 190, 210, 50));

        btn_Office_salary_process.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        btn_Office_salary_process.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Workflow-48.png"))); // NOI18N
        btn_Office_salary_process.setText("Office Staff ");
        btn_Office_salary_process.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_Office_salary_processMousePressed(evt);
            }
        });
        btn_Office_salary_process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Office_salary_processActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Office_salary_process, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 170, 50));

        jButton4.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Print.png"))); // NOI18N
        jButton4.setText("Office Staff Pay Slips");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, -1, -1));

        btn_Tempory_salary_process.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        btn_Tempory_salary_process.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Workflow-48.png"))); // NOI18N
        btn_Tempory_salary_process.setText("Tempory Guards");
        btn_Tempory_salary_process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Tempory_salary_processActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Tempory_salary_process, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 260, 210, 50));

        jLabel2.setText(" ");
        jLabel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Salary Process", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Georgia", 0, 18), new java.awt.Color(0, 0, 204))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 450, 180));

        jButton5.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Print.png"))); // NOI18N
        jButton5.setText("Sikura Guards Pay Slips");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 440, 210, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_SSS_salary_processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SSS_salary_processActionPerformed
        long start = System.currentTimeMillis();

        Date Date = jDateChooser1.getDate();

        if (Date == null) {

            JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");

        } else {

            salary_ReSet();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

//Earnings
            String Final_Basic = "0.00";
            String Final_BR = "0.00";
            String Final_TaxEarn = "0.00";
            String Final_OThrsAmt = "0.00";
            String Final_SiteIntensive = "0.00";
            String ShiftIntensive = "0.00";

            String NoOfSundays = "0.00";
            String AmtperSunday = "0.00";
            String TotalAmtSunday = "0.00";
            String Poyaday = "0.00";
            String MC = "0.00";
            String Other = "0.00";

            String Final_Gross = "0.00";

            //Deductions
            String Final_Loan_Rental = "0.00";
            String Final_Loan02_Rental = "0.00";
            String Final_Advance01_Rental = "0.00";
            String Final_Advance02_Rental = "0.00";
            String Final_FestivalAdvance_Rental = "0.00";
            String Final_Uniform_Rental = "0.00";
            String Final_Shoe_Rental = "0.00";

            String Final_Welfare = "0.00";
            String Final_Meal = "0.00";
            String Final_Fines = "0.00";
            String Final_Rental = "0.00";
            String Final_LessShift = "0.00";
            String Final_OtherDeductions = "0.00";
            String Final_PaidSalary = "0.00";
            String Final_Insuarance = "0.00";
            String Final_Death = "0.00";

            String Final_Total_Deductions = "0.00";

            //Double
            Double Total_Deductions = 0.00;
            Double gross = 0.00;

            //EFP & ETF
            String Final_Employee_EPF = "0.00";
            String Final_Employer_ETF = "0.00";
            String Final_Employer_EPF = "0.00";

            Double etf_employer = 0.00;
            Double epf_employer = 0.00;
            Double epf_employee = 0.00;

            //
            String Final_Net_Salary = "0.00";
            String Final_OT_HOURS = "0.00";
            String Final_GrandTotal = "0.00";
            String Distress_BalanceAmt = "0.00";
            String Distress_BalanceAmt02 = "0.00";

            String TotalShitsWorked = "0.00";
            String EmpName = "";
            String EmpRank = "";
            String EmpLocation = "";
            String EmpCompany = "";
            String ComAddress = "";
            String ComName = "";
            String LocType = "";

//            Double RC__shift_tot = 0.00;
//            Double normal_shift_total = 0.00;
            Double WorkedShiftAmount = 0.00;

            Double Welfare = 0.00;
            String EpfNo = "";

            Double MCAllowance = 0.00;
//            String mcAllow = "";

            try {

                Statement st_main = DbConnection.getconnection().createStatement();
                ResultSet rs_main = st_main.executeQuery("Select * from emp_atten_main where Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' and Status= 'processed' and SalaryStatus='salary_pending' and Company='SSS' group by EPFno");
                while (rs_main.next()) {
                    EpfNo = rs_main.getString("EPFno");

                    Statement st = DbConnection.getconnection().createStatement();
                    ResultSet rs = st.executeQuery("Select *,SUM(DayShift+NightShift),SUM(HalfDayShift),SUM(EffectiveRate) from emp_atten_main where Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' and Status= 'processed' and SalaryStatus='salary_pending' and EPFno='" + EpfNo + "'");

                    while (rs.next()) {

                        // String sum = rs.getString("SUM(DayShift+NightShift)");
                        Double full = Double.parseDouble(rs.getString("SUM(DayShift+NightShift)"));
                        Double half = Double.parseDouble(rs.getString("SUM(HalfDayShift)"));

                        //rate changed shift details                 
                        Statement st3 = DbConnection.getconnection().createStatement();
                        ResultSet rs3 = st3.executeQuery("select * , COUNT(*),SUM(TotalAmount),SUM(TotalShifts) from emp_atten_rate_change_shift_summery where EPFno='" + EpfNo + "' and Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' ");
                        while (rs3.next()) {

                            int coun = Integer.parseInt(rs3.getString("COUNT(*)"));

                            if (coun == 0) {
                                WorkedShiftAmount = 0.00;

                            } else {
                                WorkedShiftAmount = Double.parseDouble(rs3.getString("SUM(TotalAmount)"));

                            }
                        }
                        Double totalShifts = full + (half / 2);
                        TotalShitsWorked = Double.toString(totalShifts);

                        System.out.println("******************Total Shifts= " + EpfNo + " " + totalShifts);

//                    normal_shift_total = totalShifts - RC__shift_tot;
                        System.out.println("total Shift" + totalShifts);

                        if (totalShifts >= 26) {
                            //***************** Total Shifts More Than 26*************************                  
                            System.out.println("more than 26");

                            Statement st1 = DbConnection.getconnection().createStatement();
                            ResultSet rs1 = st1.executeQuery("SELECT * FROM employee_reg WHERE EPFno = '" + EpfNo + "' ");

                            while (rs1.next()) {

                                String basic = rs1.getString("BasicSalary");
                                String br = rs1.getString("BRAllowance");
                                String shiftRate = rs1.getString("ShiftRate");
                                //NameWithInitials Designation DefCompany  DefLocation
                                EmpName = rs1.getString("NameWithInitials");
                                EmpRank = rs1.getString("Designation");
                                EmpCompany = rs1.getString("DefCompany");
                                EmpLocation = rs1.getString("DefLocation");
                                String ActiveEPF = rs1.getString("ActiveEPF");

                                Welfare = Double.parseDouble(rs1.getString("Welfare"));
                                Final_Welfare = String.format("%.2f", Welfare);

                                MCAllowance = Double.parseDouble(rs1.getString("MCAllowance"));
                                System.out.println(EpfNo + "EMP's MC ALLo IS =" + rs1.getString(47));

                                //Get Company Address
                                Statement st5 = DbConnection.getconnection().createStatement();
                                ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                                while (rs5.next()) {
                                    ComAddress = rs5.getString("ComAddress");
                                    ComName = rs5.getString("ComName");
                                }
                                //Get Posted Location Details
                                Statement st6 = DbConnection.getconnection().createStatement();
                                ResultSet rs6 = st6.executeQuery("SELECT * FROM location_reg WHERE LocCode = '" + EmpLocation + "' ");
                                while (rs6.next()) {
                                    LocType = rs6.getString("LocType");

                                }

                                System.out.println(basic + "  " + br);

                                Double Bsalary = Double.parseDouble(basic);
                                Double brallo = Double.parseDouble(br);

                                //Basic
                                Final_Basic = String.format("%.2f", Bsalary);

                                //BR Allowance
                                Final_BR = String.format("%.2f", brallo);

                                //TaxEarn
                                Double D_Final_TaxEarn = Double.parseDouble(basic);
                                Final_TaxEarn = basic;
                                System.out.println("TAXEARN" + Final_TaxEarn);

                                if (ActiveEPF.equals("1")) {
                                    //EPF_Employee 8%
                                    epf_employee = ((D_Final_TaxEarn + brallo)) * 0.08;
                                    Final_Employee_EPF = String.format("%.2f", epf_employee);

                                    //ETF_Employer 3%
                                    etf_employer = ((D_Final_TaxEarn + brallo)) * 0.03;
                                    Final_Employer_ETF = String.format("%.2f", etf_employer);

                                    //EPF_Employer 12%
                                    epf_employer = ((D_Final_TaxEarn + brallo)) * 0.12;
                                    Final_Employer_EPF = String.format("%.2f", epf_employer);

                                } else {

                                    Final_Employee_EPF = "0.00";
                                    Final_Employer_ETF = "0.00";
                                    Final_Employer_EPF = "0.00";

                                }

                                //OT Calc
                                Double x = ((((Bsalary + brallo) / 200) * 1.5) * 4) * totalShifts;
                                Final_OThrsAmt = String.format("%.2f", x);

                                //OT HRS
                                Double a = totalShifts * 4;
                                Final_OT_HOURS = Double.toString(a);

                                //Site Intensive
                                Double Shift = Double.parseDouble(shiftRate);
                                Double u = (WorkedShiftAmount) - (Bsalary + brallo + x);
                                Final_SiteIntensive = String.format("%.2f", u);

                                //Manual Earnings
                                Statement st2 = DbConnection.getconnection().createStatement();
                                ResultSet rs2 = st2.executeQuery("SELECT * FROM salary_manual_earnings WHERE EPFno = '" + EpfNo + "' and Month='" + cmb_month.getSelectedItem().toString() + "'and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                                Double noOfsun = 0.00;
                                Double perSunDay = 0.00;
                                Double TotalSun = 0.00;
                                Double poya = 0.00;
                                Double mc = 0.00;
                                Double other = 0.00;

                                while (rs2.next()) {

                                    noOfsun = Double.parseDouble(rs2.getString(2));
                                    perSunDay = Double.parseDouble(rs2.getString(3));
                                    TotalSun = Double.parseDouble(rs2.getString(4));
                                    poya = Double.parseDouble(rs2.getString(5));
                                    mc = Double.parseDouble(rs2.getString(6));
                                    other = Double.parseDouble(rs2.getString(7));

                                    NoOfSundays = String.format("%.2f", noOfsun);
                                    AmtperSunday = String.format("%.2f", perSunDay);
                                    TotalAmtSunday = String.format("%.2f", TotalSun);
                                    Poyaday = String.format("%.2f", poya);
                                    // MC = String.format("%.2f", (mc+MCAllowance));
                                    Other = String.format("%.2f", other);

                                }

                                MC = String.format("%.2f", MCAllowance);
                                System.out.println("MCALLOWANCE=" + MC);

                                //Gross Salary
                                gross = D_Final_TaxEarn + brallo + x + u + TotalSun + poya + mc + MCAllowance + other;
                                Final_Gross = String.format("%.2f", gross);

                                // System.out.println("gross"+Final_Gross);
                                System.out.println(EpfNo + " Gross is " + gross);

                                System.out.println(EpfNo + "  Basic:-" + basic + "  BR:-" + br + "  OT:-" + Final_OThrsAmt + "  Site Inte:-" + Final_SiteIntensive);
//                        System.out.println(EpfNo + "Manual Earnings = " + "noOfSun " + NoOfSundays + " per SunDay:" + AmtperSunday + " TotalSun:" + TotalAmtSunday + "  Poya:" + Poyaday + "  MC:" + MC + "  Other:" + Other);

                            }

                        } else if (totalShifts < 26) {

//***************** Total Shifts LESS Than 26****************************************************************
                            Statement st1 = DbConnection.getconnection().createStatement();
                            ResultSet rs1 = st1.executeQuery("SELECT * FROM employee_reg WHERE EPFno = '" + EpfNo + "' ");

                            while (rs1.next()) {

                                String basic = rs1.getString("BasicSalary");
                                String br = rs1.getString("BRAllowance");
                                String shiftRate = rs1.getString("ShiftRate");

                                EmpName = rs1.getString("NameWithInitials");
                                EmpRank = rs1.getString("Designation");
                                EmpCompany = rs1.getString("DefCompany");
                                EmpLocation = rs1.getString("DefLocation");
                                String ActiveEPF = rs1.getString("ActiveEPF");

                                Welfare = Double.parseDouble(rs1.getString("Welfare"));
                                Final_Welfare = String.format("%.2f", Welfare);

                                MCAllowance = Double.parseDouble(rs1.getString("MCAllowance"));
                                System.out.println(EpfNo + "EMP's MC ALLo IS =" + rs1.getString(47));

                                //Get Company Address
                                Statement st5 = DbConnection.getconnection().createStatement();
                                ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                                while (rs5.next()) {
                                    ComAddress = rs5.getString("ComAddress");
                                    ComName = rs5.getString("ComName");
                                }
                                //Get Posted Location Details
                                Statement st6 = DbConnection.getconnection().createStatement();
                                ResultSet rs6 = st6.executeQuery("SELECT * FROM location_reg WHERE LocCode = '" + EmpLocation + "' ");
                                while (rs6.next()) {
                                    LocType = rs6.getString("LocType");

                                }

                                System.out.println(basic + "  " + br);
                                Double Bsalary = Double.parseDouble(basic);

                                //Basic
                                Final_Basic = String.format("%.2f", Bsalary);

                                //TAx Earn Calc
                                Double D_Final_TaxEarn = (Bsalary / 26) * totalShifts;
                                Final_TaxEarn = String.format("%.2f", D_Final_TaxEarn);
                                System.out.println("TAXEARN" + Final_TaxEarn);

                                //BR Allowance Calc
                                Double brallo = Double.parseDouble(br);
                                Double D_Final_BR_Allo = (brallo / 26) * totalShifts;
                                Final_BR = String.format("%.2f", D_Final_BR_Allo);
                                System.out.println(Final_BR);

                                if (ActiveEPF.equals("1")) {
                                    //EPF_Employee 8%
                                    epf_employee = ((D_Final_TaxEarn + D_Final_BR_Allo)) * 0.08;
                                    Final_Employee_EPF = String.format("%.2f", epf_employee);
                                    System.out.println("ETF_Employee 8%" + Final_Employee_EPF);

                                    //ETF_Employer 3%
                                    etf_employer = ((D_Final_TaxEarn + D_Final_BR_Allo)) * 0.03;
                                    Final_Employer_ETF = String.format("%.2f", etf_employer);
                                    System.out.println("ETF_Employer 3%" + Final_Employer_ETF);

                                    //EPF_Employer 12%
                                    epf_employer = ((D_Final_TaxEarn + D_Final_BR_Allo)) * 0.12;
                                    Final_Employer_EPF = String.format("%.2f", epf_employer);
                                    System.out.println("EPF_Employer 12%" + Final_Employer_EPF);

                                } else {

                                    Final_Employee_EPF = "0.00";
                                    Final_Employer_ETF = "0.00";
                                    Final_Employer_EPF = "0.00";

                                }

                                //OT Calc
                                Double D_Final_OT = ((((Bsalary + brallo) / 200) * 1.5) * 4) * totalShifts;
                                Final_OThrsAmt = String.format("%.2f", D_Final_OT);

                                //OT HRS
                                Double a = totalShifts * 4;
                                Final_OT_HOURS = Double.toString(a);

                                //Site Intensive
                                Double Shift = Double.parseDouble(shiftRate);
                                Double D_Final_Site_Intensive = (WorkedShiftAmount) - (D_Final_TaxEarn + D_Final_BR_Allo + D_Final_OT);
                                Final_SiteIntensive = String.format("%.2f", D_Final_Site_Intensive);

                                //Manual Earnings
                                Statement st2 = DbConnection.getconnection().createStatement();
                                ResultSet rs2 = st2.executeQuery("SELECT *,COUNT(EPFno) FROM salary_manual_earnings WHERE EPFno = '" + EpfNo + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                                Double noOfsun = 0.00;
                                Double perSunDay = 0.00;
                                Double TotalSun = 0.00;
                                Double poya = 0.00;
                                Double mc = 0.00;
                                Double other = 0.00;

                                while (rs2.next()) {

                                    int count = Integer.parseInt(rs2.getString("COUNT(EPFno)"));

                                    if (count == 0) {

                                        noOfsun = 0.00;
                                        perSunDay = 0.00;
                                        TotalSun = 0.00;
                                        poya = 0.00;
                                        mc = 0.00;
                                        other = 0.00;

                                    } else {

                                        noOfsun = Double.parseDouble(rs2.getString(2));
                                        perSunDay = Double.parseDouble(rs2.getString(3));
                                        TotalSun = Double.parseDouble(rs2.getString(4));
                                        poya = Double.parseDouble(rs2.getString(5));
                                        mc = Double.parseDouble(rs2.getString(6));
                                        other = Double.parseDouble(rs2.getString(7));

                                        NoOfSundays = String.format("%.2f", noOfsun);
                                        AmtperSunday = String.format("%.2f", perSunDay);
                                        TotalAmtSunday = String.format("%.2f", TotalSun);
                                        Poyaday = String.format("%.2f", poya);
                                        //MC = String.format("%.2f", (mc+MCAllowance));
                                        Other = String.format("%.2f", other);

                                    }
                                }

                                MC = String.format("%.2f", MCAllowance);
                                System.out.println("MCALLOWANCE=" + MC);

                                //Gross Salary
                                gross = D_Final_TaxEarn + D_Final_BR_Allo + D_Final_OT + D_Final_Site_Intensive + TotalSun + poya + mc + other + MCAllowance;
                                Final_Gross = String.format("%.2f", gross);

                                System.out.println(EpfNo + " Gross:" + gross);

                                System.out.println(EpfNo + "  Basic:-" + Final_TaxEarn + "  BR:-" + Final_BR + "  OT:-" + Final_OThrsAmt + "  Site Inte:-" + Final_SiteIntensive);
                                // System.out.println(EpfNo + "Manual Earnings = " + "noOfSun " + NoOfSundays + " per SunDay:" + AmtperSunday + " TotalSun:" + TotalAmtSunday + "  Poya:" + Poyaday + "  MC:" + MC + "  Other:" + Other);

                            }

                        }

                        //Employee Deduction Details**********************************************************************************
                        Double Loan02_Rental = 0.00;
                        Double Loan_Rental = 0.00;
                        Double Advance01_Rental = 0.00;
                        Double Advance02_Rental = 0.00;
                        Double FestivalAdvance_Rental = 0.00;
                        Double Uniform_Rental = 0.00;
                        Double Shoe_Rental = 0.00;

                        //Get details OF Distress_Loan_01
                        Statement Loan_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (Loan_rs.next()) {

                            String Ref = Loan_rs.getString("LoanReference");
                            String Rent = Loan_rs.getString("Rental");

                            Loan_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                            Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                            while (Loan_settle_rs.next()) {

                                int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan_Rental + bal);
                                    Distress_BalanceAmt = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                            //Save data to Loan_01 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Distress_Loan_02
                        Statement Loan02_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (Loan02_rs.next()) {

                            String Ref = Loan02_rs.getString("LoanReference");
                            String Rent = Loan02_rs.getString("Rental");

                            Loan02_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                            Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                            while (Loan02_settle_rs.next()) {

                                int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                    Distress_BalanceAmt02 = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                            //Save data to Loan_02 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Advance01
                        Statement Ad1_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (Ad1_rs.next()) {
                            String Ref = null;
                            String Rent = "0";
                            if (Ad1_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad1_rs.getString("Reference");
                                Rent = Ad1_rs.getString("SUM(Amount)");

                                Advance01_Rental = Double.parseDouble(Rent);
                                Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
                            }

                            //Save data to Advance01 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                        }

                        //Get details OF Advance02
                        Statement Ad2_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (Ad2_rs.next()) {

                            String Ref = null;
                            String Rent = "0";

                            if (Ad2_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad2_rs.getString("Reference");
                                Rent = Ad2_rs.getString("SUM(Amount)");

                                Advance02_Rental = Double.parseDouble(Rent);
                                Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                            }

                            //Save data to Advance02 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get details OF Festival Advance 
                        Statement fes_st = DbConnection.getconnection().createStatement();
                        ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (fes_rs.next()) {

                            String Ref = fes_rs.getString("Reference");
                            String Rent = fes_rs.getString("Rental");

                            FestivalAdvance_Rental = Double.parseDouble(Rent);
                            Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                            //Save data to Festival Advance  Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get details OF Uniform Issue 
                        Statement uni_st = DbConnection.getconnection().createStatement();
                        ResultSet uni_rs = uni_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM uniform_issue WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (uni_rs.next()) {

                            int count = Integer.parseInt(uni_rs.getString("COUNT(*)"));

                            if (count == 0) {

                                Uniform_Rental = 0.00;

                            } else {

                                String epf = uni_rs.getString("EPFno");
                                String issueDate = uni_rs.getString("IssueOn");

                                String Ref = epf + "/" + issueDate;
                                String Rent = uni_rs.getString("SUM(Rental)");

                                Uniform_Rental = Double.parseDouble(Rent);
                                Final_Uniform_Rental = String.format("%.2f", Uniform_Rental);

                                //Save data to Uniform Issue  Settlement Table
                                Statement st1 = DbConnection.getconnection().createStatement();
                                st1.executeUpdate("insert into uniform_issue_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            }

                        }

                        //Get details OF Shoe Issue 
                        Statement shoe_st = DbConnection.getconnection().createStatement();
                        ResultSet shoe_rs = shoe_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM shoes_issue WHERE EPFno = '" + EpfNo + "' and Status = 'on-going' ");
                        while (shoe_rs.next()) {

                            int count = Integer.parseInt(shoe_rs.getString("COUNT(*)"));

                            if (count == 0) {
                                Shoe_Rental = 0.00;
                            } else {

                                String epf = shoe_rs.getString("EPFno");
                                String issueDate = shoe_rs.getString("IssueOn");

                                String Ref = epf + "/" + issueDate;

                                String Rent = shoe_rs.getString("SUM(Rental)");

                                Shoe_Rental = Double.parseDouble(Rent);
                                Final_Shoe_Rental = String.format("%.2f", Shoe_Rental);

                                //Save data to Shoe Issue  Settlement Table
                                Statement st1 = DbConnection.getconnection().createStatement();
                                st1.executeUpdate("insert into shoe_issue_settlement values('" + Ref + "','" + EpfNo + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            }

                        }

                        //Manual Deductions
                        String SMeal = "0.00";
                        String SFines = "0.00";
                        String SRental = "0.00";
                        String SLessShift = "0.00";
                        String SOtherDeductions = "0.00";
                        String SPaidSalary = "0.00";
                        String SInsuarance = "0.00";
                        String SDeath = "0.00";
                        Double Meal = 0.00;
                        Double Fines = 0.00;
                        Double Rental = 0.00;
                        Double LessShift = 0.00;
                        Double OtherDeductions = 0.00;
                        Double PaidSalary = 0.00;
                        Double Insuarance = 0.00;
                        Double Death = 0.00;

                        //Get details OF Manual Salary Adjustments- Deductions 
                        Statement manual_st = DbConnection.getconnection().createStatement();
                        ResultSet manual_rs = manual_st.executeQuery("SELECT *,COUNT(*),SUM(Fines),SUM(Meal),SUM(Rental),SUM(OtherDeduc),SUM(LessShift),SUM(DeathDonation),SUM(Insuarance),SUM(PaidSalary10th) FROM salary_manual_deductions WHERE EPFno = '" + EpfNo + "' and Month = '" + cmb_month.getSelectedItem().toString() + "' and year = '" + cmb_year.getSelectedItem().toString() + "' ");
                        while (manual_rs.next()) {

                            int i = Integer.parseInt(manual_rs.getString("COUNT(*)"));

                            if (i == 0) {

                            } else {

                                SMeal = manual_rs.getString("SUM(Meal)");
                                SFines = manual_rs.getString("SUM(Fines)");
                                SRental = manual_rs.getString("SUM(Rental)");
                                SLessShift = manual_rs.getString("SUM(LessShift)");
                                SOtherDeductions = manual_rs.getString("SUM(OtherDeduc)");
                                SPaidSalary = manual_rs.getString("SUM(PaidSalary10th)");
                                SInsuarance = manual_rs.getString("SUM(Insuarance)");
                                SDeath = manual_rs.getString("SUM(DeathDonation)");

                                System.out.println("Meal:" + SMeal);
                                System.out.println("SFines:" + SFines);
                                System.out.println("SRentalal:" + SRental);
                                System.out.println("SLessShift:" + SLessShift);

                                  //Meal = Double.parseDouble(SMeal);
                            Meal = Double.parseDouble(SMeal);
                            Fines = Double.parseDouble(SFines);
                            Rental = Double.parseDouble(SRental);
                            LessShift = Double.parseDouble(SLessShift);
                            OtherDeductions = Double.parseDouble(SOtherDeductions);
                            PaidSalary = Double.parseDouble(SPaidSalary);
                            Insuarance = Double.parseDouble(SInsuarance);
                            Death = Double.parseDouble(SDeath);
                                Final_Meal = String.format("%.2f", Meal);
                                Final_Fines = String.format("%.2f", Fines);
                                Final_Rental = String.format("%.2f", Rental);
                                Final_LessShift = String.format("%.2f", LessShift);
                                Final_OtherDeductions = String.format("%.2f", OtherDeductions);
                                Final_PaidSalary = String.format("%.2f", PaidSalary);
                                Final_Insuarance = String.format("%.2f", Insuarance);
                                Final_Death = String.format("%.2f", Death);

                            }

                        }

                        Total_Deductions = (Loan02_Rental + Loan_Rental + Advance01_Rental + Advance02_Rental + FestivalAdvance_Rental + Uniform_Rental + Shoe_Rental + Welfare + Meal + Fines + Rental + LessShift + OtherDeductions + PaidSalary + Insuarance + Death + epf_employee);
                        Final_Total_Deductions = String.format("%.2f", Total_Deductions);

                        Double netSalary = gross - Total_Deductions;
                        Final_Net_Salary = String.format("%.2f", netSalary);

                        Double grandTotal = (gross + etf_employer + epf_employer);
                        Final_GrandTotal = String.format("%.2f", grandTotal);

                        String CalculatedShiftRate = String.format("%.2f", WorkedShiftAmount / totalShifts);

//                        Statement sal_st1 = DbConnection.getconnection().createStatement();
//                        ResultSet sal_rs1 = sal_st1.executeQuery("select  COUNT(EPFno) from salary_final  where EPFno='" + EpfNo + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
//                        while (sal_rs1.next()) {
//
//                            int epf_count = Integer.parseInt(sal_rs1.getString("COUNT(EPFno)"));
                        Statement sal_st = DbConnection.getconnection().createStatement();

//                            if (epf_count == 0) {
                        sal_st.executeUpdate("insert into salary_final values('" + EpfNo + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','" + Final_OT_HOURS + "','" + Final_OThrsAmt + "','" + Final_SiteIntensive + "','" + NoOfSundays + "','" + TotalAmtSunday + "','" + Poyaday + "','" + ShiftIntensive + "','" + MC + "','" + Other + "','" + Final_Gross + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','" + Final_Fines + "','" + Final_LessShift + "','" + Final_Rental + "','" + Final_Death + "','" + Final_OtherDeductions + "','" + Final_Insuarance + "','" + Final_Shoe_Rental + "','" + Final_Uniform_Rental + "','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','" + Final_PaidSalary + "','" + Final_Employee_EPF + "','" + Final_Total_Deductions + "','" + Final_Net_Salary + "','" + Final_Employer_EPF + "','" + Final_Employer_ETF + "','" + Final_GrandTotal + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + EmpName + "','" + EmpRank + "','" + TotalShitsWorked + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "','" + LocType + "','" + CalculatedShiftRate + "')");

                        sal_st.executeUpdate("update emp_atten_main set SalaryStatus='salary_processed' where EPFno='" + EpfNo + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
                        // sal_st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_processed' where EMPID='" + EpfNo + "'  and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");

                        Final_Basic = "0.00";
                        Final_BR = "0.00";
                        Final_TaxEarn = "0.00";
                        Final_OThrsAmt = "0.00";
                        Final_SiteIntensive = "0.00";
                        ShiftIntensive = "0.00";
                        NoOfSundays = "0.00";
                        AmtperSunday = "0.00";
                        TotalAmtSunday = "0.00";
                        Poyaday = "0.00";
                        MC = "0.00";
                        Other = "0.00";
                        Final_Gross = "0.00";
                        Final_Loan_Rental = "0.00";
                        Final_Loan02_Rental = "0.00";
                        Final_Advance01_Rental = "0.00";
                        Final_Advance02_Rental = "0.00";
                        Final_FestivalAdvance_Rental = "0.00";
                        Final_Uniform_Rental = "0.00";
                        Final_Shoe_Rental = "0.00";
                        Final_Welfare = "0.00";
                        Final_Meal = "0.00";
                        Final_Fines = "0.00";
                        Final_Rental = "0.00";
                        Final_LessShift = "0.00";
                        Final_OtherDeductions = "0.00";
                        Final_PaidSalary = "0.00";
                        Final_Insuarance = "0.00";
                        Final_Death = "0.00";
                        Final_Total_Deductions = "0.00";
                        Total_Deductions = 0.00;
                        gross = 0.00;
                        Final_Employee_EPF = "0.00";
                        Final_Employer_ETF = "0.00";
                        Final_Employer_EPF = "0.00";
                        etf_employer = 0.00;
                        epf_employer = 0.00;
                        Final_Net_Salary = "0.00";
                        Final_OT_HOURS = "0.00";
                        Final_GrandTotal = "0.00";
                        Distress_BalanceAmt = "0.00";
                        Distress_BalanceAmt02 = "0.00";
                        TotalShitsWorked = "0.00";
                        EmpName = "0.00";
                        EmpRank = "0.00";
                        EmpLocation = "0.00";
                        EmpCompany = "0.00";
                        ComAddress = "0.00";
                        ComName = "0.00";
                        LocType = "";
                        WorkedShiftAmount = 0.00;
                        Welfare = 0.00;
                        MCAllowance = 0.00;

                        epf_employee = 0.00;

//                            } else {
//
//                                sal_st.executeUpdate(" update salary_final set Basic='" + Final_Basic + "',BRAllowance='" + Final_BR + "',TaxEarn='" + Final_TaxEarn + "',OThrs='" + Final_OT_HOURS + "',OThrsAmt='" + Final_OThrsAmt + "',AttendanceIntensive='" + Final_SiteIntensive + "',NoOfSundays='" + NoOfSundays + "',TotalAmtSunday='" + TotalAmtSunday + "',Poyaday='" + Poyaday + "',ShiftIntensive='" + ShiftIntensive + "',MCAllowance='" + MC + "',OtherAllowance='" + Other + "',GrossEarning='" + Final_Gross + "',Welfare='" + Final_Welfare + "',Advance01='" + Final_Advance01_Rental + "',Advance02='" + Final_Advance02_Rental + "',FestivalAdvance='" + Final_FestivalAdvance_Rental + "',Meal='" + Final_Meal + "',Fines='" + Final_Fines + "',LessShift='" + Final_LessShift + "',Rental='" + Final_Rental + "',DeathDonations='" + Final_Death + "',OtherDeductions='" + Final_OtherDeductions + "',Insuarance='" + Final_Insuarance + "',ShoeDeductions='" + Final_Shoe_Rental + "',UniformDeductions='" + Final_Uniform_Rental + "',DistressLoan='" + Final_Loan_Rental + "',DistressLoanBalance='" + Distress_BalanceAmt + "',PaidSalary10th='" + Final_PaidSalary + "',Employee_EPF_8='" + Final_Employee_EPF + "',TotalDeductions='" + Final_Total_Deductions + "',NetSalary='" + Final_Net_Salary + "',Employer_EPF_12='" + Final_Employer_EPF + "',Employer_ETF_3='" + Final_Employer_ETF + "',GrandTotal='" + Final_GrandTotal + "',SalaryProcessedDate='" + date + "',Name='" + EmpName + "',Rank='" + EmpRank + "',TotalShifts='" + TotalShitsWorked + "',EmpLocation='" + EmpLocation + "',EmpCompany='" + EmpCompany + "',CompanyAddress='" + ComAddress + "',ComName='" + ComName + "',CurrentDate='" + lbl_current_date.getText() + "',DistressLoan02='" + Final_Loan02_Rental + "',DistressLoan02Balance='" + Distress_BalanceAmt02 + "' where EPFno='" + EpfNo + "' and  Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "',LocationType='" + LocType + "'");
//
//                                sal_st.executeUpdate("update emp_atten_main set SalaryStatus='salary_processed' where EPFno='" + EpfNo + "'");
//                                sal_st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_processed' where EMPID='" + EpfNo + "'");
//                            }
//                        }
//
//                    Statement sal_st = DbConnection.getconnection().createStatement();
//                    sal_st.executeUpdate("insert into salary_final values('" + EpfNo + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','" + Final_OT_HOURS + "','" + Final_OThrsAmt + "','" + Final_SiteIntensive + "','" + NoOfSundays + "','" + TotalAmtSunday + "','" + Poyaday + "','" + ShiftIntensive + "','" + MC + "','" + Other + "','" + Final_Gross + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','" + Final_Fines + "','" + Final_LessShift + "','" + Final_Rental + "','" + Final_Death + "','" + Final_OtherDeductions + "','" + Final_Insuarance + "','" + Final_Shoe_Rental + "','" + Final_Uniform_Rental + "','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','" + Final_PaidSalary + "','" + Final_Employee_EPF + "','" + Final_Total_Deductions + "','" + Final_Net_Salary + "','" + Final_Employer_EPF + "','" + Final_Employer_ETF + "','" + Final_GrandTotal + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + lbl_current_date.getText() + "','" + EmpName + "','" + EmpRank + "','" + TotalShitsWorked + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + date + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "')");
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, e);
            }

            lbl_atten.setText("    SSS Guards Salary Procssed...!");
            Color cl = new Color(0, 153, 51);
            lbl_atten.setForeground(cl);
            lbl_atten.setVisible(true);

            delete_null_data_in_settelsment_tables();

            long duration = System.currentTimeMillis() - start;

            DateFormat df = new SimpleDateFormat("HH 'Hours', mm 'Min(s),' ss 'Second(s)'");
            df.setTimeZone(TimeZone.getTimeZone("GMT+0"));
            System.out.println(df.format(new Date(duration)));
            JOptionPane.showMessageDialog(rootPane, "Process Completed in " + df.format(new Date(duration)));

            btn_SSS_salary_process.setEnabled(false);

        }

    }//GEN-LAST:event_btn_SSS_salary_processActionPerformed

    private void cmb_yearPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_yearPopupMenuWillBecomeInvisible
        days_per_month();

//        int month = 0;
//        month = cmb_month.getSelectedIndex();
//        String year = cmb_year.getSelectedItem().toString();
//
//        if (month == 11) {
//
//            month = 0;
//            //            Object m1 = cmb_month.getItemAt(month);
//            //            System.out.println(m1);
//            //            System.out.println("0" + (month + 1));
//
//            int x = Integer.parseInt(year);
//            int nextYear = x + 1;
//
//            lbl_startDate.setText(nextYear + "-" + ("0" + (month + 1)) + "-" + "01");
//            lbl_endDate.setText(nextYear + "-" + ("0" + (month + 1)) + "-" + "10");
//
//        } else {
//            int next = month + 2;
//            String nextM = Integer.toString(next);
//            int len = nextM.length();
//
//            //            Object mm = cmb_month.getItemAt(month + 1);
//            //            System.out.println(mm);
//            if (len == 1) {
//                //                System.out.println("0" + nextM);
//
//                lbl_startDate.setText(year + "-" + ("0" + (nextM)) + "-" + "01");
//                lbl_endDate.setText(year + "-" + ("0" + (nextM)) + "-" + "10");
//
//            } else {
//                //                System.out.println(nextM);
//                lbl_startDate.setText(year + "-" + ((nextM)) + "-" + "01");
//                lbl_endDate.setText(year + "-" + ((nextM)) + "-" + "10");
//
//            }
//
//        }
    }//GEN-LAST:event_cmb_yearPopupMenuWillBecomeInvisible

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {

            Connection conn = (Connection) DbConnection.getconnection();

            JasperDesign jd = JRXmlLoader.load("Reports\\PaySlip.jrxml");
            String sql = "SELECT * FROM salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year ='" + cmb_year.getSelectedItem().toString() + "'";
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            jd.setQuery(newQuery);

            JasperReport jr = JasperCompileManager.compileReport(jd);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
            JasperViewer.viewReport(jp, false);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        RPT_Pay_Slip pay = new RPT_Pay_Slip();
        pay.setVisible(true);
        // this.dispose();


    }//GEN-LAST:event_jButton2ActionPerformed

    private void btn_SIKURA_salary_processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SIKURA_salary_processActionPerformed

        String EPF = null;
        String Name = null;
        String ActiveEPF = null;
        String EmpRank = null;
        String ComAddress = null;
        String ComName = null;
        String EmpCompany = null;
        String EmpLocation = null;
        String LocType = null;

        String Distress_BalanceAmt = "0.00";
        String Distress_BalanceAmt02 = "0.00";

        String NoOfSundays = "0.00";
        String AmtperSunday = "0.00";
        String TotalAmtSunday = "0.00";
        String Poyaday = "0.00";
        String MC = "0.00";
        String Other = "0.00";

        Double WorkedShifts = 0.00;
        Double ExtraShifts = 0.00;
        Double NoPay = 0.00;
        Double AdditionalShifts = 0.00;
        Double Attendance = 0.00;
        Double Performance = 0.00;
        Double ShiftIncentive = 0.00;

        Double BasicSalary = 0.00;
        Double GrossSalary = 0.00;
        Double BR_Allo = 0.00;
        Double Welfare = 0.00;

        Double PoyaDay = 0.00;
        Double MCAllo = 0.00;
        Double OtherAllo = 0.00;

        Double EPF8 = 0.00;
        Double EPF12 = 0.00;
        Double ETF3 = 0.00;

        Double Total_Deductions = 0.00;

        //Final Data
        String Final_Basic = "0.00";
        String Final_BR = "0.00";

        String Final_EPF12 = "0.00";
        String Final_EPF8 = "0.00";
        String Final_ETF3 = "0.00";

        String Final_Poya = "0.00";
        String Final_MCAllow = "0.00";
        String Final_OtherAllow = "0.00";

        String Final_Welfare = "0.00";
        String Final_Attendance = "0.00";
        String Final_Perfomance = "0.00";
        String Final_ShiftIncentive = "0.00";

        String Final_Gross_Salary = "0.00";
        String Final_Total_Deductions = "0.00";
        String Final_Net_Salary = "0.00";

        String Final_Loan_Rental = "0.00";
        String Final_Loan02_Rental = "0.00";
        String Final_Advance01_Rental = "0.00";
        String Final_Advance02_Rental = "0.00";
        String Final_FestivalAdvance_Rental = "0.00";
        String Final_Uniform_Rental = "0.00";
        String Final_Shoe_Rental = "0.00";

        String Final_Meal = "0.00";
        String Final_Fines = "0.00";
        String Final_Rental = "0.00";
        String Final_LessShift = "0.00";
        String Final_OtherDeductions = "0.00";
        String Final_PaidSalary = "0.00";
        String Final_Insuarance = "0.00";
        String Final_Death = "0.00";

        String Final_WorkedShifts = "0.00";
        String Final_NoPayDays = "0.00";
        String Final_NoPayAmount = "0.00";

        String ShiftRate = "0.00";
        String SikuraEmpShiftrateBasisSalary = "0";

        long start = System.currentTimeMillis();

//CODE
        if (jDateChooser1.getDate() == null) {

        } else {

            try {

                salary_ReSet_Sikura_Staff();

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date = sdf.format(jDateChooser1.getDate());

                //Get EPF no of SIKURA Employees who are having Attendance Details
                Statement st_main = DbConnection.getconnection().createStatement();
                ResultSet rs_main = st_main.executeQuery("select * from emp_atten_main where Month= '" + cmb_month.getSelectedItem().toString() + "' and Year= '" + cmb_year.getSelectedItem().toString() + "' and Status= 'processed' and SalaryStatus='salary_pending' and Company='SIKURA' group by EPFno");
                while (rs_main.next()) {
                    EPF = rs_main.getString("EPFno");

                    //Get the no of worked shifts of above employees
                    Statement st2 = DbConnection.getconnection().createStatement();
                    ResultSet rs2 = st2.executeQuery("select *,SUM(DayShift+NightShift+(HalfDayShift/2)) from emp_atten_main where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
                    while (rs2.next()) {
                        WorkedShifts = Double.parseDouble(rs2.getString("SUM(DayShift+NightShift+(HalfDayShift/2))"));
                        Final_WorkedShifts = String.format("%.2f", WorkedShifts);
                    }

// Getting NoPay days / No. of ExtraShifts  and Additional Shifts
                    if ((WorkedShifts > regular_shift) & (WorkedShifts <= max_days)) {

                        ExtraShifts = WorkedShifts - regular_shift;

                    } else if ((WorkedShifts > regular_shift) & (WorkedShifts > max_days)) {

                        ExtraShifts = max_days - regular_shift;

                    } else if (WorkedShifts < regular_shift) {

                        NoPay = regular_shift - WorkedShifts;

                    } else {

                        ExtraShifts = 0.0;
                    }

                    if (WorkedShifts > max_days) {

                        AdditionalShifts = WorkedShifts - max_days;
                    } //                        else if (WorkedShifts < max_days) {
                    //                        
                    //                        NoPay = max_days - WorkedShifts; 
                    //                        
                    //    }
                    else {

                        AdditionalShifts = 0.0;
                    }

                    Final_NoPayDays = String.format("%.2f", NoPay);

                    System.out.println(EPF + " Extra Shift " + ExtraShifts + " nopay Days: " + NoPay + " workedDays: " + WorkedShifts + " regularShift: " + regular_shift);

                    // Getting Details from Employee's Personal File
                    Statement st3 = DbConnection.getconnection().createStatement();
                    ResultSet rs3 = st3.executeQuery("select * from employee_reg where EPFno ='" + EPF + "'");
                    while (rs3.next()) {

                        EPF = rs3.getString("EPFno");
                        Name = rs3.getString("NameWithInitials");
                        ActiveEPF = rs3.getString("ActiveEPF");
                        EmpCompany = rs3.getString("DefCompany");
                        EmpLocation = rs3.getString("DefLocation");
                        EmpRank = rs3.getString("Designation");
                        ShiftRate = rs3.getString("ShiftRate");
                        SikuraEmpShiftrateBasisSalary = rs3.getString("SikuraEmpShiftrateBasisSalary");

                        BasicSalary = Double.parseDouble(rs3.getString("BasicSalary"));
                        BR_Allo = Double.parseDouble(rs3.getString("BRAllowance"));
                        Welfare = Double.parseDouble(rs3.getString("Welfare"));

                        Final_Welfare = String.format("%.2f", Welfare);
                        Final_Basic = String.format("%.2f", BasicSalary);
                        Final_BR = String.format("%.2f", BR_Allo);

                    }

                    Double NoPayAmount = 0.00;
                    Double TaxEarn = 0.00;
                    String Final_TaxEarn = "0.00";
                    Double RSOT = 0.00;
                    Double ESOT = 0.00;
                    Double ES = 0.00;
                    Double AdditionalShiftAmount = 0.00;
                    Double TRavelling = 0.00;

                    Double Shiftrate = 0.00;

                    if (SikuraEmpShiftrateBasisSalary.equals("1")) {

                        TaxEarn = (BasicSalary + BR_Allo);
                        Final_TaxEarn = String.format("%.2f", TaxEarn);

                        Shiftrate = Double.parseDouble(ShiftRate);
                        Double Full_Gross = Shiftrate * WorkedShifts;

                        ESOT = (Full_Gross - TaxEarn) * 0.43;
                        RSOT = (Full_Gross - TaxEarn) * 0.37;
                        ES = (Full_Gross - TaxEarn) * 0.20;

                    } else {

                        NoPayAmount = ((BasicSalary + BR_Allo) / regular_shift) * NoPay;

                        TaxEarn = (BasicSalary + BR_Allo) - NoPayAmount;
                        Final_TaxEarn = String.format("%.2f", TaxEarn);

                        RSOT = ((TaxEarn) / 200) * 1.5 * 3 * (regular_shift - NoPay);

                        ESOT = ((TaxEarn) / 200) * 1.5 * 3 * ExtraShifts;

                        ES = ((TaxEarn) / (regular_shift)) * ExtraShifts;

                        AdditionalShiftAmount = AdditionalShifts * 600;

                        TRavelling = (((TaxEarn) / 200) * 1.5) * ((regular_shift - NoPay) + ExtraShifts);

                    }

                    System.out.println(EPF + " RSOT " + RSOT + " ESOT " + ESOT + " ES " + ES + " AdditinalShiftAMT " + AdditionalShiftAmount + " Travelling " + TRavelling);

                    if (ActiveEPF.equals("1")) {

                        EPF12 = ((BasicSalary + BR_Allo) - NoPayAmount) * 0.12;
                        EPF8 = ((BasicSalary + BR_Allo) - NoPayAmount) * 0.08;
                        ETF3 = ((BasicSalary + BR_Allo) - NoPayAmount) * 0.03;
                    } else {

                        EPF12 = 0.0;
                        EPF8 = 0.0;
                        ETF3 = 0.0;
                    }

                    Attendance = ESOT + AdditionalShiftAmount;
                    Performance = RSOT;
                    ShiftIncentive = ES + TRavelling;

                    Final_Attendance = String.format("%.2f", Attendance);
                    Final_Perfomance = String.format("%.2f", Performance);
                    Final_ShiftIncentive = String.format("%.2f", ShiftIncentive);
                    Final_NoPayAmount = String.format("%.2f", NoPayAmount);

                    Final_EPF12 = String.format("%.2f", EPF12);
                    Final_EPF8 = String.format("%.2f", EPF8);
                    Final_ETF3 = String.format("%.2f", ETF3);

                    //Employee Deduction Details**********************************************************************************
                    Double Loan02_Rental = 0.00;
                    Double Loan_Rental = 0.00;
                    Double Advance01_Rental = 0.00;
                    Double Advance02_Rental = 0.00;
                    Double FestivalAdvance_Rental = 0.00;
                    Double Uniform_Rental = 0.00;
                    Double Shoe_Rental = 0.00;

                    //Get details OF Distress_Loan_01
                    Statement Loan_st = DbConnection.getconnection().createStatement();
                    ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                    while (Loan_rs.next()) {

                        String Ref = Loan_rs.getString("LoanReference");
                        String Rent = Loan_rs.getString("Rental");

                        Loan_Rental = Double.parseDouble(Rent);

                        Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                        Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                        while (Loan_settle_rs.next()) {

                            int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                            Double bal = 0.00;
                            if (count == 0) {
                                bal = 0.00;
                            } else {

                                bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                Double bal1 = LoanAmount - (Loan_Rental + bal);
                                Distress_BalanceAmt = String.format("%.2f", bal1);
                            }

                        }

                        Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                        //Save data to Loan_01 Settlement Table
                        Statement st1 = DbConnection.getconnection().createStatement();
                        st1.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                    }

                    //Get details OF Distress_Loan_02
                    Statement Loan02_st = DbConnection.getconnection().createStatement();
                    ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                    while (Loan02_rs.next()) {

                        String Ref = Loan02_rs.getString("LoanReference");
                        String Rent = Loan02_rs.getString("Rental");

                        Loan02_Rental = Double.parseDouble(Rent);

                        Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                        Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                        while (Loan02_settle_rs.next()) {

                            int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                            Double bal = 0.00;
                            if (count == 0) {
                                bal = 0.00;
                            } else {

                                bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                Distress_BalanceAmt02 = String.format("%.2f", bal1);
                            }

                        }

                        Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                        //Save data to Loan_02 Settlement Table
                        Statement st1 = DbConnection.getconnection().createStatement();
                        st1.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                    }

                    //Get details OF Advance01
                    Statement Ad1_st = DbConnection.getconnection().createStatement();
                    ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                    while (Ad1_rs.next()) {
                        String Ref = null;
                        String Rent = "0";
                        if (Ad1_rs.getString("EPFno") == null) {

                        } else {

                            Ref = Ad1_rs.getString("Reference");
                            Rent = Ad1_rs.getString("SUM(Amount)");

                            Advance01_Rental = Double.parseDouble(Rent);
                            Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);

                            //Save data to Advance01 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                        }

                    }

                    //Get details OF Advance02
                    Statement Ad2_st = DbConnection.getconnection().createStatement();
                    ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                    while (Ad2_rs.next()) {

                        String Ref = null;
                        String Rent = "0";

                        if (Ad2_rs.getString("EPFno") == null) {

                        } else {

                            Ref = Ad2_rs.getString("Reference");
                            Rent = Ad2_rs.getString("SUM(Amount)");

                            Advance02_Rental = Double.parseDouble(Rent);
                            Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                            //Save data to Advance02 Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st1.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");

                        }

                    }

                    //Get details OF Festival Advance 
                    Statement fes_st = DbConnection.getconnection().createStatement();
                    ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                    while (fes_rs.next()) {

                        String Ref = fes_rs.getString("Reference");
                        String Rent = fes_rs.getString("Rental");

                        FestivalAdvance_Rental = Double.parseDouble(Rent);
                        Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                        //Save data to Festival Advance  Settlement Table
                        Statement st1 = DbConnection.getconnection().createStatement();
                        st1.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                        st1.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                    }

                    //Get details OF Uniform Issue 
                    Statement uni_st = DbConnection.getconnection().createStatement();
                    ResultSet uni_rs = uni_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM uniform_issue WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                    while (uni_rs.next()) {

                        int count = Integer.parseInt(uni_rs.getString("COUNT(*)"));

                        if (count == 0) {

                            Uniform_Rental = 0.00;

                        } else {

                            String Ref = uni_rs.getString("EPFno");
                            String Rent = uni_rs.getString("SUM(Rental)");

                            Uniform_Rental = Double.parseDouble(Rent);
                            Final_Uniform_Rental = String.format("%.2f", Uniform_Rental);

                            //Save data to Uniform Issue  Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into uniform_issue_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                        }

                    }

                    //Get details OF Shoe Issue 
                    Statement shoe_st = DbConnection.getconnection().createStatement();
                    ResultSet shoe_rs = shoe_st.executeQuery("SELECT *,SUM(Rental),COUNT(*) FROM shoes_issue WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                    while (shoe_rs.next()) {

                        int count = Integer.parseInt(shoe_rs.getString("COUNT(*)"));

                        if (count == 0) {
                            Shoe_Rental = 0.00;
                        } else {

                            String Ref = shoe_rs.getString("EPFno");
                            String Rent = shoe_rs.getString("SUM(Rental)");

                            Shoe_Rental = Double.parseDouble(Rent);
                            Final_Shoe_Rental = String.format("%.2f", Shoe_Rental);

                            //Save data to Shoe Issue  Settlement Table
                            Statement st1 = DbConnection.getconnection().createStatement();
                            st1.executeUpdate("insert into shoe_issue_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                        }

                    }

                    //Manual Deductions
                    Double Meal = 0.00;
                    Double Fines = 0.00;
                    Double Rental = 0.00;
                    Double LessShift = 0.00;
                    Double OtherDeductions = 0.00;
                    Double PaidSalary = 0.00;
                    Double Insuarance = 0.00;
                    Double Death = 0.00;

                    //Get details OF Manual Salary Adjustments- Deductions 
                    Statement manual_st = DbConnection.getconnection().createStatement();
                    ResultSet manual_rs = manual_st.executeQuery("SELECT * FROM salary_manual_deductions WHERE EPFno = '" + EPF + "' and Month = '" + cmb_month.getSelectedItem().toString() + "' and year = '" + cmb_year.getSelectedItem().toString() + "' ");
                    while (manual_rs.next()) {

                        Meal = Double.parseDouble(manual_rs.getString("Meal"));
                        Fines = Double.parseDouble(manual_rs.getString("Fines"));
                        Rental = Double.parseDouble(manual_rs.getString("Rental"));
                        LessShift = Double.parseDouble(manual_rs.getString("LessShift"));
                        OtherDeductions = Double.parseDouble(manual_rs.getString("OtherDeduc"));
                        PaidSalary = Double.parseDouble(manual_rs.getString("PaidSalary10th"));
                        Insuarance = Double.parseDouble(manual_rs.getString("Insuarance"));
                        Death = Double.parseDouble(manual_rs.getString("DeathDonation"));

                        Final_Meal = String.format("%.2f", Meal);
                        Final_Fines = String.format("%.2f", Fines);
                        Final_Rental = String.format("%.2f", Rental);
                        Final_LessShift = String.format("%.2f", LessShift);
                        Final_OtherDeductions = String.format("%.2f", OtherDeductions);
                        Final_PaidSalary = String.format("%.2f", PaidSalary);
                        Final_Insuarance = String.format("%.2f", Insuarance);
                        Final_Death = String.format("%.2f", Death);

                    }

                    Total_Deductions = (Loan02_Rental + Loan_Rental + Advance01_Rental + Advance02_Rental + FestivalAdvance_Rental + Uniform_Rental + Shoe_Rental + Welfare + Meal + Fines + Rental + LessShift + OtherDeductions + PaidSalary + Insuarance + Death + EPF8);
                    Final_Total_Deductions = String.format("%.2f", Total_Deductions);

//                    Double TaxEarn = (BasicSalary + BR_Allo) - NoPayAmount;
//                    String Final_TaxEarn = String.format("%.2f", TaxEarn);
                    //SIKURA Salary ADJUSTMENT
                    Double Salary_Adjust = 0.00;

                    Statement st_sal_adjust = DbConnection.getconnection().createStatement();
                    ResultSet rs_sal_adjust = st_sal_adjust.executeQuery("select * from sikura_salary_adjustment where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

                    while (rs_sal_adjust.next()) {

                        Salary_Adjust = Double.parseDouble(rs_sal_adjust.getString("Amount"));
                        System.out.println(EPF + "  sal adj " + Salary_Adjust);

                    }

                    //Manual Earnings
                    Statement st12 = DbConnection.getconnection().createStatement();
                    ResultSet rs12 = st12.executeQuery("SELECT * FROM salary_manual_earnings WHERE EPFno = '" + EPF + "' ");

                    Double noOfsun = 0.00;
                    Double perSunDay = 0.00;
                    Double TotalSun = 0.00;
                    Double poya = 0.00;
                    Double mc = 0.00;
                    Double other = 0.00;

                    while (rs12.next()) {

                        noOfsun = Double.parseDouble(rs12.getString(2));
                        perSunDay = Double.parseDouble(rs12.getString(3));
                        TotalSun = Double.parseDouble(rs12.getString(4));
                        poya = Double.parseDouble(rs12.getString(5));
                        mc = Double.parseDouble(rs12.getString(6));
                        other = Double.parseDouble(rs12.getString("Other"));
                        System.out.println(EPF + "Other Allow :" + rs12.getString("Other"));
                    }

                    NoOfSundays = String.format("%.2f", noOfsun);
                    AmtperSunday = String.format("%.2f", perSunDay);
                    TotalAmtSunday = String.format("%.2f", TotalSun);
                    Poyaday = String.format("%.2f", poya);
                    MC = String.format("%.2f", mc);
                    Other = String.format("%.2f", (other + Salary_Adjust));

                    System.out.println("Sal Adjust :" + Salary_Adjust);

                    System.out.println(EPF + "other " + Other);

                    GrossSalary = TaxEarn + TotalSun + poya + mc + other + Salary_Adjust + Attendance + Performance + ShiftIncentive;
                    Final_Gross_Salary = String.format("%.2f", GrossSalary);

                    Double NetSal = GrossSalary - Total_Deductions;
                    Final_Net_Salary = String.format("%.2f", NetSal);

                    //Get Company Address
                    Statement st5 = DbConnection.getconnection().createStatement();
                    ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = 'SSS' ");
                    while (rs5.next()) {
                        ComAddress = rs5.getString("ComAddress");
                        ComName = rs5.getString("ComName");
                    }

                    //Get Posted Location Details
                    Statement st6 = DbConnection.getconnection().createStatement();
                    ResultSet rs6 = st6.executeQuery("SELECT * FROM location_reg WHERE LocCode = '" + EmpLocation + "' ");
                    while (rs6.next()) {
                        LocType = rs6.getString("LocType");

                    }

                    Statement sal_st = DbConnection.getconnection().createStatement();
                    sal_st.executeUpdate("insert into salary_final_sikura_staff values('" + EPF + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','0.00','" + Final_Perfomance + "','" + Final_Attendance + "','" + NoOfSundays + "','" + TotalAmtSunday + "','" + Poyaday + "','" + Final_ShiftIncentive + "','" + MC + "','" + Other + "','" + Final_Gross_Salary + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','" + Final_Fines + "','" + Final_LessShift + "','" + Final_Rental + "','" + Final_Death + "','" + Final_OtherDeductions + "','" + Final_Insuarance + "','" + Final_Shoe_Rental + "','" + Final_Uniform_Rental + "','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','" + Final_PaidSalary + "','" + Final_EPF8 + "','" + Final_Total_Deductions + "','" + Final_Net_Salary + "','" + Final_EPF12 + "','" + Final_ETF3 + "','0.00','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + Name + "','" + EmpRank + "','" + Final_WorkedShifts + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "','" + LocType + "','" + Final_NoPayDays + "','" + Final_NoPayAmount + "')");
                    sal_st.executeUpdate("update emp_atten_main set SalaryStatus='salary_processed' where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

                    EPF = null;
                    Name = null;
                    ActiveEPF = null;
                    EmpRank = null;
                    ComAddress = null;
                    ComName = null;
                    EmpCompany = null;
                    EmpLocation = null;
                    LocType = null;

                    Distress_BalanceAmt = "0.00";
                    Distress_BalanceAmt02 = "0.00";

                    NoOfSundays = "0.00";
                    AmtperSunday = "0.00";
                    TotalAmtSunday = "0.00";
                    Poyaday = "0.00";
                    MC = "0.00";
                    Other = "0.00";

                    WorkedShifts = 0.00;
                    ExtraShifts = 0.00;
                    NoPay = 0.00;
                    AdditionalShifts = 0.00;
                    Attendance = 0.00;
                    Performance = 0.00;
                    ShiftIncentive = 0.00;

                    BasicSalary = 0.00;
                    GrossSalary = 0.00;
                    BR_Allo = 0.00;
                    Welfare = 0.00;

                    PoyaDay = 0.00;
                    MCAllo = 0.00;
                    OtherAllo = 0.00;

                    EPF8 = 0.00;
                    EPF12 = 0.00;
                    ETF3 = 0.00;

                    Total_Deductions = 0.00;

                    //Final Data
                    Final_Basic = "0.00";
                    Final_BR = "0.00";

                    Final_EPF12 = "0.00";
                    Final_EPF8 = "0.00";
                    Final_ETF3 = "0.00";

                    Final_Poya = "0.00";
                    Final_MCAllow = "0.00";
                    Final_OtherAllow = "0.00";

                    Final_Welfare = "0.00";
                    Final_Attendance = "0.00";
                    Final_Perfomance = "0.00";
                    Final_ShiftIncentive = "0.00";
                    Final_NoPayDays = "0.00";

                    Final_Gross_Salary = "0.00";
                    Final_Net_Salary = "0.00";

                    Final_Loan_Rental = "0.00";
                    Final_Loan02_Rental = "0.00";
                    Final_Advance01_Rental = "0.00";
                    Final_Advance02_Rental = "0.00";
                    Final_FestivalAdvance_Rental = "0.00";
                    Final_Uniform_Rental = "0.00";
                    Final_Shoe_Rental = "0.00";

                    Final_Meal = "0.00";
                    Final_Fines = "0.00";
                    Final_Rental = "0.00";
                    Final_LessShift = "0.00";
                    Final_OtherDeductions = "0.00";
                    Final_PaidSalary = "0.00";
                    Final_Insuarance = "0.00";
                    Final_Death = "0.00";

                    Final_Total_Deductions = "0.00";
                    Final_WorkedShifts = "0.00";
                    Final_NoPayAmount = "0.00";
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, e);
            }

            lbl_atten.setText(" Sikura Employee Salary Processed Successfully...! ");
            Color cl = new Color(0, 153, 51);
            lbl_atten.setForeground(cl);
            lbl_atten.setVisible(true);

            btn_SIKURA_salary_process.setEnabled(false);

        }

        long duration = System.currentTimeMillis() - start;

        DateFormat df = new SimpleDateFormat("HH 'Hour(s)', mm 'Min(s)', ss 'Second(s)'");
        df.setTimeZone(TimeZone.getTimeZone("GMT+0"));
        System.out.println(df.format(new Date(duration)));
        JOptionPane.showMessageDialog(rootPane, "Process Completed in " + df.format(new Date(duration)));


    }//GEN-LAST:event_btn_SIKURA_salary_processActionPerformed

    private void btn_Office_salary_processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Office_salary_processActionPerformed

//*************NEW CALCULATION BASED ON TOTAL WORKED DAYS*******************************************
        int reply = JOptionPane.showConfirmDialog(rootPane, " Please Enter All Attendance Details of Admin Staff Members before Processing the Salary", null, JOptionPane.OK_CANCEL_OPTION);

        if (reply == JOptionPane.OK_OPTION) {

            int reply2 = JOptionPane.showConfirmDialog(rootPane, " Continue to Admin Staff Salary Process? ", null, JOptionPane.YES_NO_OPTION);

            if (reply2 == JOptionPane.YES_OPTION) {

                //**********No. of Days per Selected Month****************************
                int year = Integer.parseInt(cmb_year.getSelectedItem().toString());
                int MaxDays = 0;

                if (cmb_month.getSelectedItem().toString().equals("January")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("February")) {

                    if (year % 4 == 0) {
                        if (year % 100 == 0) {
                            if (year % 400 == 0) {
                                //System.out.println(year + " Is A LEAP YEAR");
                                MaxDays = 29;
                            } else {
                                //System.out.println(year + " Is NOT LEAP YEAR");
                                MaxDays = 28;
                            }
                        } else {
                            //System.out.println(year + " Is A LEAP YEAR");
                            MaxDays = 29;
                        }
                    } else {
                        //System.out.println(year + " Is NOT LEAP YEAR");
                        MaxDays = 28;
                    }

                } else if (cmb_month.getSelectedItem().toString().equals("March")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("April")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("May")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("June")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("July")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("August")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("September")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("October")) {

                    MaxDays = 31;

                } else if (cmb_month.getSelectedItem().toString().equals("November")) {

                    MaxDays = 30;

                } else if (cmb_month.getSelectedItem().toString().equals("December")) {

                    MaxDays = 31;

                }

                System.out.println(cmb_month.getSelectedItem().toString() + " " + MaxDays);

                //********************************************************************
                String EPF = null;
                String Name = null;
                String ActiveEPF = null;

                String ComAddress = null;
                String ComName = null;
                String EmpCompany = null;
                String EmpLocation = null;
                String EmpRank = null;

                String Distress_BalanceAmt = "0.00";
                String Distress_BalanceAmt02 = "0.00";

                Double BasicSalary = 0.00;
                Double GrossSalary = 0.00;
                Double BR_Allo = 0.00;
                Double TaxEarn = 0.00;
                Double Welfare = 0.00;
                Double Budjet_Allo = 0.00;
                Double Balance_Gross = 0.00;

                Double WorkedDays = 0.00;

                Double PoyaDay = 0.00;
                Double MCAllo = 0.00;
                Double OtherAllo = 0.00;

                Double Meal = 0.00;
                Double Rental = 0.00;
                Double LessShift = 0.00;
                Double OtherDeduc = 0.00;
                Double DeathDonation = 0.00;
                Double Insuarance = 0.00;

                Double EPF8 = 0.00;
                Double EPF12 = 0.00;
                Double ETF3 = 0.00;

                Double Loan_Rental = 0.00;
                Double Loan02_Rental = 0.00;
                Double Advance01_Rental = 0.00;
                Double Advance02_Rental = 0.00;
                Double FestivalAdvance_Rental = 0.00;

                Double perfomance = 0.00;
                Double attendance = 0.00;

                //Final Data
                String Final_Basic = "0.00";
                String Final_BR = "0.00";

                String Final_EPF12 = "0.00";
                String Final_EPF8 = "0.00";
                String Final_ETF3 = "0.00";

                String Final_Poya = "0.00";
                String Final_MCAllow = "0.00";
                String Final_OtherAllow = "0.00";

                String Final_Meal = "0.00";
                String Final_Rental = "0.00";
                String Final_LessShift = "0.00";
                String Final_OtherDeduc = "0.00";
                String Final_DeathDonation = "0.00";
                String Final_Insuarance = "0.00";
                String Final_Welfare = "0.00";

                String Final_Attendance = "0.00";
                String Final_Perfomance = "0.00";

                String Final_Loan_Rental = "0.00";
                String Final_Loan02_Rental = "0.00";
                String Final_Advance01_Rental = "0.00";
                String Final_Advance02_Rental = "0.00";
                String Final_FestivalAdvance_Rental = "0.00";

                String Final_Gross_Salary = "0.00";
                String Final_TaxEarn = "0.00";
                String Final_Total_Deducs = "0.00";
                String Final_Net_Salary = "0.00";

                Double MCAllowance = 0.00;

                if (jDateChooser1.getDate() == null) {

                    JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");
                } else {
                    salary_ReSet_Admin_Staff();

                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String date = sdf.format(jDateChooser1.getDate());

                    try {

                        Statement st_days = DbConnection.getconnection().createStatement();
                        ResultSet rs_days = st_days.executeQuery("select * from emp_atten_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                        while (rs_days.next()) {
                            EPF = rs_days.getString("EPFno");
                            WorkedDays = Double.parseDouble(rs_days.getString("WorkedDays"));

                            // }
                            Statement st = DbConnection.getconnection().createStatement();
                            ResultSet rs = st.executeQuery("select * from employee_reg where RankCategory='Admin Staff' and IsResigned='0' and EPFno='" + EPF + "' ");
                            while (rs.next()) {

                                Name = rs.getString("NameWithInitials");
                                ActiveEPF = rs.getString("ActiveEPF");
                                EmpCompany = rs.getString("DefCompany");
                                EmpLocation = rs.getString("DefLocation");
                                EmpRank = rs.getString("Designation");

                                BasicSalary = Double.parseDouble(rs.getString("BasicSalary"));
                                GrossSalary = Double.parseDouble(rs.getString("GrossSalary"));
                                BR_Allo = Double.parseDouble(rs.getString("BRAllowance"));
                                Welfare = Double.parseDouble(rs.getString("Welfare"));
                                MCAllowance = Double.parseDouble(rs.getString("MCAllowance"));

                                Double perDayAmt = GrossSalary / MaxDays;
                                Double thisMonthSalary = perDayAmt * WorkedDays;

                                System.out.println(EPF + "MAxD: " + MaxDays);
                                System.out.println(EPF + "PerDay: " + perDayAmt);
                                System.out.println(EPF + "Salary: " + thisMonthSalary);

                                if (thisMonthSalary < (BasicSalary + BR_Allo)) {
                                    if (thisMonthSalary < BR_Allo) {
                                        TaxEarn = thisMonthSalary;
                                        Budjet_Allo = 0.00;
                                        Balance_Gross = 0.00;
                                    } else {
                                        TaxEarn = thisMonthSalary - BR_Allo;
                                        Budjet_Allo = BR_Allo;
                                        Balance_Gross = 0.00;
                                    }
                                } else if (thisMonthSalary == (BasicSalary + BR_Allo)) {
                                    TaxEarn = BasicSalary;
                                    Budjet_Allo = BR_Allo;
                                    Balance_Gross = 0.00;
                                } else {
                                    TaxEarn = BasicSalary;
                                    Budjet_Allo = BR_Allo;
                                    Balance_Gross = thisMonthSalary - (BasicSalary + BR_Allo);
                                }

                                System.out.println(EPF + " TaxEarn: " + TaxEarn);
                                System.out.println(EPF + " Budjet_Allo: " + Budjet_Allo);

                                Final_Welfare = String.format("%.2f", Welfare);
                                Final_Basic = String.format("%.2f", BasicSalary);
                                Final_BR = String.format("%.2f", Budjet_Allo);
                                Final_TaxEarn = String.format("%.2f", TaxEarn);
                                //Final_Gross_Salary = String.format("%.2f", GrossSalary);

                                if (ActiveEPF.equals("1")) {

                                    EPF8 = (TaxEarn + Budjet_Allo) * 0.08;
                                    EPF12 = (TaxEarn + Budjet_Allo) * 0.12;
                                    ETF3 = (TaxEarn + Budjet_Allo) * 0.03;

                                    Final_EPF12 = String.format("%.2f", EPF12);
                                    Final_EPF8 = String.format("%.2f", EPF8);
                                    Final_ETF3 = String.format("%.2f", ETF3);

                                } else {
                                    Final_EPF12 = "0.00";
                                    Final_EPF8 = "0.00";
                                    Final_ETF3 = "0.00";
                                }

                                //Earnings Details
                                Statement st1 = DbConnection.getconnection().createStatement();
                                ResultSet rs1 = st1.executeQuery("select * from salary_manual_earnings where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                                while (rs1.next()) {

                                    PoyaDay = Double.parseDouble(rs1.getString("PoyaDay"));
                                    MCAllo = Double.parseDouble(rs1.getString("MCAllowance"));
                                    OtherAllo = Double.parseDouble(rs1.getString("Other"));

                                    Final_Poya = String.format("%.2f", PoyaDay);
                                    //Final_MCAllow = String.format("%.2f", MCAllo);
                                    Final_OtherAllow = String.format("%.2f", OtherAllo);
                                    System.out.println(EPF + "  " + Final_OtherAllow);

                                }

                                Final_MCAllow = String.format("%.2f", (MCAllo + MCAllowance));

                                perfomance = Balance_Gross * 0.52;
                                attendance = Balance_Gross * 0.48;

                                Double Final_Gross = (TaxEarn + Budjet_Allo + PoyaDay + MCAllo + OtherAllo + MCAllowance + attendance + perfomance);

                                Final_Gross_Salary = String.format("%.2f", Final_Gross);

                                System.out.println(EPF + " poya:" + PoyaDay + " mc:" + MCAllo + " other: " + OtherAllo + "FinalGross: " + Final_Gross + " Perfo: " + perfomance + " atten: " + attendance);

                                Final_Perfomance = String.format("%.2f", perfomance);
                                Final_Attendance = String.format("%.2f", attendance);

                                //Deductions Details
                                Statement st2 = DbConnection.getconnection().createStatement();
                                ResultSet rs2 = st2.executeQuery("select * from salary_manual_deductions where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                                while (rs2.next()) {

                                    Meal = Double.parseDouble(rs2.getString("Meal"));
                                    Rental = Double.parseDouble(rs2.getString("Rental"));
                                    LessShift = Double.parseDouble(rs2.getString("LessShift"));
                                    OtherDeduc = Double.parseDouble(rs2.getString("OtherDeduc"));
                                    DeathDonation = Double.parseDouble(rs2.getString("DeathDonation"));
                                    Insuarance = Double.parseDouble(rs2.getString("Insuarance"));

                                    Final_Meal = String.format("%.2f", Meal);
                                    Final_Rental = String.format("%.2f", Rental);
                                    Final_LessShift = String.format("%.2f", LessShift);
                                    Final_OtherDeduc = String.format("%.2f", OtherDeduc);
                                    Final_DeathDonation = String.format("%.2f", DeathDonation);
                                    Final_Insuarance = String.format("%.2f", Insuarance);

                                }
                                // ******************
                                //Get details OF Distress_Loan_01
                                Statement Loan_st = DbConnection.getconnection().createStatement();
                                ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Loan_rs.next()) {

                                    String Ref = Loan_rs.getString("LoanReference");
                                    String Rent = Loan_rs.getString("Rental");

                                    Loan_Rental = Double.parseDouble(Rent);

                                    Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                                    Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                                    ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                                    while (Loan_settle_rs.next()) {

                                        int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                                        Double bal = 0.00;
                                        if (count == 0) {
                                            bal = 0.00;
                                        } else {

                                            bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                            Double bal1 = LoanAmount - (Loan_Rental + bal);
                                            Distress_BalanceAmt = String.format("%.2f", bal1);
                                        }

                                    }

                                    Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                                    //Save data to Loan_01 Settlement Table
                                    Statement st3 = DbConnection.getconnection().createStatement();
                                    st3.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                                }

                                //Get details OF Distress_Loan_02
                                Statement Loan02_st = DbConnection.getconnection().createStatement();
                                ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Loan02_rs.next()) {

                                    String Ref = Loan02_rs.getString("LoanReference");
                                    String Rent = Loan02_rs.getString("Rental");

                                    Loan02_Rental = Double.parseDouble(Rent);

                                    Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                                    Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                                    ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                                    while (Loan02_settle_rs.next()) {

                                        int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                                        Double bal = 0.00;
                                        if (count == 0) {
                                            bal = 0.00;
                                        } else {

                                            bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                            Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                            Distress_BalanceAmt02 = String.format("%.2f", bal1);
                                        }

                                    }

                                    Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                                    //Save data to Loan_02 Settlement Table
                                    Statement st4 = DbConnection.getconnection().createStatement();
                                    st4.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                                }

                                //Get details OF Advance01
                                Statement Ad1_st = DbConnection.getconnection().createStatement();
                                ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Ad1_rs.next()) {
                                    String Ref = null;
                                    String Rent = "0";
                                    if (Ad1_rs.getString("EPFno") == null) {

                                    } else {

                                        Ref = Ad1_rs.getString("Reference");
                                        Rent = Ad1_rs.getString("SUM(Amount)");

                                        Advance01_Rental = Double.parseDouble(Rent);
                                        Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
                                    }

                                    //Save data to Advance01 Settlement Table
                                    Statement st5 = DbConnection.getconnection().createStatement();
                                    st5.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                                    st5.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                                }

                                //Get details OF Advance02
                                Statement Ad2_st = DbConnection.getconnection().createStatement();
                                ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (Ad2_rs.next()) {

                                    String Ref = null;
                                    String Rent = "0";

                                    if (Ad2_rs.getString("EPFno") == null) {

                                    } else {

                                        Ref = Ad2_rs.getString("Reference");
                                        Rent = Ad2_rs.getString("SUM(Amount)");

                                        Advance02_Rental = Double.parseDouble(Rent);
                                        Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                                    }

                                    //Save data to Advance02 Settlement Table
                                    Statement st6 = DbConnection.getconnection().createStatement();

                                    st6.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                                    st6.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
                                }

                                //Get details OF Festival Advance 
                                Statement fes_st = DbConnection.getconnection().createStatement();
                                ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                                while (fes_rs.next()) {

                                    String Ref = fes_rs.getString("Reference");
                                    String Rent = fes_rs.getString("Rental");

                                    FestivalAdvance_Rental = Double.parseDouble(Rent);
                                    Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                                    //Save data to Festival Advance  Settlement Table
                                    Statement st7 = DbConnection.getconnection().createStatement();

                                    st7.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                                    st7.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                                }

                                //Get Company Address
                                Statement st5 = DbConnection.getconnection().createStatement();
                                ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                                while (rs5.next()) {
                                    ComAddress = rs5.getString("ComAddress");
                                    ComName = rs5.getString("ComName");
                                }

                                Double Total_Deductions = FestivalAdvance_Rental + Advance02_Rental + Advance01_Rental + Loan02_Rental + Loan_Rental + Welfare + Meal + Rental + LessShift + OtherDeduc + DeathDonation + Insuarance + EPF8;
                                Final_Total_Deducs = String.format("%.2f", Total_Deductions);

                                Double Net_Sal = Final_Gross - Total_Deductions;
                                Final_Net_Salary = String.format("%.2f", Net_Sal);
                                //*******************

                                String TotalShifts = Double.toString(WorkedDays);

                                //SAVE SALARY
                                Statement sal_st = DbConnection.getconnection().createStatement();
                                sal_st.executeUpdate("insert into salary_final_admin_staff values('" + EPF + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','0.00','" + Final_Attendance + "','" + Final_Perfomance + "','0.00','0.00','" + Final_Poya + "','0.00','" + Final_MCAllow + "','" + Final_OtherAllow + "','" + Final_Gross_Salary + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','0.00','" + Final_LessShift + "','" + Final_Rental + "','" + Final_DeathDonation + "','" + Final_OtherDeduc + "','" + Final_Insuarance + "','0.00','0.00','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','0.00','" + Final_EPF8 + "','" + Final_Total_Deducs + "','" + Final_Net_Salary + "','" + Final_EPF12 + "','" + Final_ETF3 + "','" + Final_Net_Salary + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + Name + "','" + EmpRank + "','" + TotalShifts + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "',' ')");

                                EPF = null;
                                Name = null;
                                ActiveEPF = null;
                                thisMonthSalary = 0.00;
                                perDayAmt = 0.00;

                                ComAddress = null;
                                ComName = null;
                                EmpCompany = null;
                                EmpLocation = null;
                                EmpRank = null;

                                Distress_BalanceAmt = "0.00";
                                Distress_BalanceAmt02 = "0.00";

                                BasicSalary = 0.00;
                                GrossSalary = 0.00;
                                BR_Allo = 0.00;
                                Welfare = 0.00;

                                PoyaDay = 0.00;
                                MCAllo = 0.00;
                                OtherAllo = 0.00;

                                Meal = 0.00;
                                Rental = 0.00;
                                LessShift = 0.00;
                                OtherDeduc = 0.00;
                                DeathDonation = 0.00;
                                Insuarance = 0.00;

                                EPF8 = 0.00;
                                EPF12 = 0.00;
                                ETF3 = 0.00;

                                Loan_Rental = 0.00;
                                Loan02_Rental = 0.00;
                                Advance01_Rental = 0.00;
                                Advance02_Rental = 0.00;
                                FestivalAdvance_Rental = 0.00;

                                perfomance = 0.00;
                                attendance = 0.00;

                                //Final Data
                                Final_Basic = "0.00";
                                Final_BR = "0.00";

                                Final_EPF12 = "0.00";
                                Final_EPF8 = "0.00";
                                Final_ETF3 = "0.00";

                                Final_Poya = "0.00";
                                Final_MCAllow = "0.00";
                                Final_OtherAllow = "0.00";

                                Final_Meal = "0.00";
                                Final_Rental = "0.00";
                                Final_LessShift = "0.00";
                                Final_OtherDeduc = "0.00";
                                Final_DeathDonation = "0.00";
                                Final_Insuarance = "0.00";
                                Final_Welfare = "0.00";

                                Final_Attendance = "0.00";
                                Final_Perfomance = "0.00";

                                Final_Loan_Rental = "0.00";
                                Final_Loan02_Rental = "0.00";
                                Final_Advance01_Rental = "0.00";
                                Final_Advance02_Rental = "0.00";
                                Final_FestivalAdvance_Rental = "0.00";

                                Final_Gross_Salary = "0.00";
                                Final_Total_Deducs = "0.00";
                                Final_Net_Salary = "0.00";

                                MCAllowance = 0.00;

                            }

                            //MaxDays = 0;
                            WorkedDays = 0.0;

                        }

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, e);
                        e.printStackTrace();

                    }
                    delete_null_data_in_settelsment_tables();
                    lbl_atten.setText(" Office Staff Salary  Processed  Succesfully...!");
                    Color cl = new Color(0, 153, 51);
                    lbl_atten.setForeground(cl);
                    lbl_atten.setVisible(true);
                    btn_Office_salary_process.setEnabled(false);

                }

            } else {

            }
        } else {

        }

//*************** END OF NEW CALCULATION****************************************
//************************** OLD CALCULATION - WORKED DAYS EXCULDED *****************************
//        String EPF = null;
//        String Name = null;
//        String ActiveEPF = null;
//
//        String ComAddress = null;
//        String ComName = null;
//        String EmpCompany = null;
//        String EmpLocation = null;
//        String EmpRank = null;
//
//        String Distress_BalanceAmt = "0.00";
//        String Distress_BalanceAmt02 = "0.00";
//
//        Double BasicSalary = 0.00;
//        Double GrossSalary = 0.00;
//        Double BR_Allo = 0.00;
//        Double Welfare = 0.00;
//
//        Double PoyaDay = 0.00;
//        Double MCAllo = 0.00;
//        Double OtherAllo = 0.00;
//
//        Double Meal = 0.00;
//        Double Rental = 0.00;
//        Double LessShift = 0.00;
//        Double OtherDeduc = 0.00;
//        Double DeathDonation = 0.00;
//        Double Insuarance = 0.00;
//
//        Double EPF8 = 0.00;
//        Double EPF12 = 0.00;
//        Double ETF3 = 0.00;
//
//        Double Loan_Rental = 0.00;
//        Double Loan02_Rental = 0.00;
//        Double Advance01_Rental = 0.00;
//        Double Advance02_Rental = 0.00;
//        Double FestivalAdvance_Rental = 0.00;
//
//        Double perfomance = 0.00;
//        Double attendance = 0.00;
//
//        //Final Data
//        String Final_Basic = "0.00";
//        String Final_BR = "0.00";
//
//        String Final_EPF12 = "0.00";
//        String Final_EPF8 = "0.00";
//        String Final_ETF3 = "0.00";
//
//        String Final_Poya = "0.00";
//        String Final_MCAllow = "0.00";
//        String Final_OtherAllow = "0.00";
//
//        String Final_Meal = "0.00";
//        String Final_Rental = "0.00";
//        String Final_LessShift = "0.00";
//        String Final_OtherDeduc = "0.00";
//        String Final_DeathDonation = "0.00";
//        String Final_Insuarance = "0.00";
//        String Final_Welfare = "0.00";
//
//        String Final_Attendance = "0.00";
//        String Final_Perfomance = "0.00";
//
//        String Final_Loan_Rental = "0.00";
//        String Final_Loan02_Rental = "0.00";
//        String Final_Advance01_Rental = "0.00";
//        String Final_Advance02_Rental = "0.00";
//        String Final_FestivalAdvance_Rental = "0.00";
//
//        String Final_Gross_Salary = "0.00";
//        String Final_Total_Deducs = "0.00";
//        String Final_Net_Salary = "0.00";
//
//        Double MCAllowance = 0.00;
//
//        if (jDateChooser1.getDate() == null) {
//
//            JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");
//        } else {
//            salary_ReSet_Admin_Staff();
//
//            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//            String date = sdf.format(jDateChooser1.getDate());
//
//            try {
//
//                Statement st = DbConnection.getconnection().createStatement();
//                ResultSet rs = st.executeQuery("select * from employee_reg where RankCategory='Admin Staff' and IsResigned='1' ");
//                while (rs.next()) {
//                    EPF = rs.getString("EPFno");
//                    Name = rs.getString("NameWithInitials");
//                    ActiveEPF = rs.getString("ActiveEPF");
//                    EmpCompany = rs.getString("DefCompany");
//                    EmpLocation = rs.getString("DefLocation");
//                    EmpRank = rs.getString("Designation");
//
//                    BasicSalary = Double.parseDouble(rs.getString("BasicSalary"));
//                    GrossSalary = Double.parseDouble(rs.getString("GrossSalary"));
//                    BR_Allo = Double.parseDouble(rs.getString("BRAllowance"));
//                    Welfare = Double.parseDouble(rs.getString("Welfare"));
//                    MCAllowance = Double.parseDouble(rs.getString("MCAllowance"));
//
//                    Final_Welfare = String.format("%.2f", Welfare);
//                    Final_Basic = String.format("%.2f", BasicSalary);
//                    Final_BR = String.format("%.2f", BR_Allo);
//                    Final_Gross_Salary = String.format("%.2f", GrossSalary);
//
//                    if (ActiveEPF.equals("1")) {
//
//                        EPF8 = (BasicSalary + BR_Allo) * 0.08;
//                        EPF12 = (BasicSalary + BR_Allo) * 0.12;
//                        ETF3 = (BasicSalary + BR_Allo) * 0.03;
//
//                        Final_EPF12 = String.format("%.2f", EPF12);
//                        Final_EPF8 = String.format("%.2f", EPF8);
//                        Final_ETF3 = String.format("%.2f", ETF3);
//
//                    } else {
//                        Final_EPF12 = "0.00";
//                        Final_EPF8 = "0.00";
//                        Final_ETF3 = "0.00";
//
//                    }
//
//                    //Earnings Details
//                    Statement st1 = DbConnection.getconnection().createStatement();
//                    ResultSet rs1 = st1.executeQuery("select * from salary_manual_earnings where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
//                    while (rs1.next()) {
//
//                        PoyaDay = Double.parseDouble(rs1.getString("PoyaDay"));
//                        MCAllo = Double.parseDouble(rs1.getString("MCAllowance"));
//                        OtherAllo = Double.parseDouble(rs1.getString("Other"));
//
//                        Final_Poya = String.format("%.2f", PoyaDay);
//                        //Final_MCAllow = String.format("%.2f", MCAllo);
//                        Final_OtherAllow = String.format("%.2f", OtherAllo);
//                        System.out.println(EPF + "  " + Final_OtherAllow);
//
//                    }
//
//                    Final_MCAllow = String.format("%.2f", (MCAllo + MCAllowance));
//
//                    Double Balance_Salary = (GrossSalary - (BasicSalary + BR_Allo + PoyaDay + MCAllo + OtherAllo + MCAllowance));
//                    perfomance = Balance_Salary * 0.52;
//                    attendance = Balance_Salary * 0.48;
//
//                    System.out.println(EPF + " poya:" + PoyaDay + " mc:" + MCAllo + " other: " + OtherAllo + "balanceSal: " + Balance_Salary + " Perfo: " + perfomance + " atten: " + attendance);
//
//                    Final_Perfomance = String.format("%.2f", perfomance);
//                    Final_Attendance = String.format("%.2f", attendance);
//
//                    //Deductions Details
//                    Statement st2 = DbConnection.getconnection().createStatement();
//                    ResultSet rs2 = st2.executeQuery("select * from salary_manual_deductions where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
//                    while (rs2.next()) {
//
//                        Meal = Double.parseDouble(rs2.getString("Meal"));
//                        Rental = Double.parseDouble(rs2.getString("Rental"));
//                        LessShift = Double.parseDouble(rs2.getString("LessShift"));
//                        OtherDeduc = Double.parseDouble(rs2.getString("OtherDeduc"));
//                        DeathDonation = Double.parseDouble(rs2.getString("DeathDonation"));
//                        Insuarance = Double.parseDouble(rs2.getString("Insuarance"));
//
//                        Final_Meal = String.format("%.2f", Meal);
//                        Final_Rental = String.format("%.2f", Rental);
//                        Final_LessShift = String.format("%.2f", LessShift);
//                        Final_OtherDeduc = String.format("%.2f", OtherDeduc);
//                        Final_DeathDonation = String.format("%.2f", DeathDonation);
//                        Final_Insuarance = String.format("%.2f", Insuarance);
//
//                    }
//                    // ******************
//                    //Get details OF Distress_Loan_01
//                    Statement Loan_st = DbConnection.getconnection().createStatement();
//                    ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (Loan_rs.next()) {
//
//                        String Ref = Loan_rs.getString("LoanReference");
//                        String Rent = Loan_rs.getString("Rental");
//
//                        Loan_Rental = Double.parseDouble(Rent);
//
//                        Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));
//
//                        Statement Loan_settle_st = DbConnection.getconnection().createStatement();
//                        ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
//                        while (Loan_settle_rs.next()) {
//
//                            int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
//                            Double bal = 0.00;
//                            if (count == 0) {
//                                bal = 0.00;
//                            } else {
//
//                                bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
//                                Double bal1 = LoanAmount - (Loan_Rental + bal);
//                                Distress_BalanceAmt = String.format("%.2f", bal1);
//                            }
//
//                        }
//
//                        Final_Loan_Rental = String.format("%.2f", Loan_Rental);
//
//                        //Save data to Loan_01 Settlement Table
//                        Statement st3 = DbConnection.getconnection().createStatement();
//                        st3.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
//                    }
//
//                    //Get details OF Distress_Loan_02
//                    Statement Loan02_st = DbConnection.getconnection().createStatement();
//                    ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (Loan02_rs.next()) {
//
//                        String Ref = Loan02_rs.getString("LoanReference");
//                        String Rent = Loan02_rs.getString("Rental");
//
//                        Loan02_Rental = Double.parseDouble(Rent);
//
//                        Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));
//
//                        Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
//                        ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
//                        while (Loan02_settle_rs.next()) {
//
//                            int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
//                            Double bal = 0.00;
//                            if (count == 0) {
//                                bal = 0.00;
//                            } else {
//
//                                bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
//                                Double bal1 = LoanAmount - (Loan02_Rental + bal);
//                                Distress_BalanceAmt02 = String.format("%.2f", bal1);
//                            }
//
//                        }
//
//                        Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);
//
//                        //Save data to Loan_02 Settlement Table
//                        Statement st4 = DbConnection.getconnection().createStatement();
//                        st4.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
//                    }
//
//                    //Get details OF Advance01
//                    Statement Ad1_st = DbConnection.getconnection().createStatement();
//                    ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (Ad1_rs.next()) {
//                        String Ref = null;
//                        String Rent = "0";
//                        if (Ad1_rs.getString("EPFno") == null) {
//
//                        } else {
//
//                            Ref = Ad1_rs.getString("Reference");
//                            Rent = Ad1_rs.getString("SUM(Amount)");
//
//                            Advance01_Rental = Double.parseDouble(Rent);
//                            Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
//                        }
//
//                        //Save data to Advance01 Settlement Table
//                        Statement st5 = DbConnection.getconnection().createStatement();
//                        st5.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
//                        st5.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
//
//                    }
//
//                    //Get details OF Advance02
//                    Statement Ad2_st = DbConnection.getconnection().createStatement();
//                    ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (Ad2_rs.next()) {
//
//                        String Ref = null;
//                        String Rent = "0";
//
//                        if (Ad2_rs.getString("EPFno") == null) {
//
//                        } else {
//
//                            Ref = Ad2_rs.getString("Reference");
//                            Rent = Ad2_rs.getString("SUM(Amount)");
//
//                            Advance02_Rental = Double.parseDouble(Rent);
//                            Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);
//
//                        }
//
//                        //Save data to Advance02 Settlement Table
//                        Statement st6 = DbConnection.getconnection().createStatement();
//
//                        st6.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
//
//                        st6.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
//                    }
//
//                    //Get details OF Festival Advance 
//                    Statement fes_st = DbConnection.getconnection().createStatement();
//                    ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
//                    while (fes_rs.next()) {
//
//                        String Ref = fes_rs.getString("Reference");
//                        String Rent = fes_rs.getString("Rental");
//
//                        FestivalAdvance_Rental = Double.parseDouble(Rent);
//                        Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);
//
//                        //Save data to Festival Advance  Settlement Table
//                        Statement st7 = DbConnection.getconnection().createStatement();
//
//                        st7.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
//
//                        st7.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
//                    }
//
//                    //Get Company Address
//                    Statement st5 = DbConnection.getconnection().createStatement();
//                    ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
//                    while (rs5.next()) {
//                        ComAddress = rs5.getString("ComAddress");
//                        ComName = rs5.getString("ComName");
//                    }
//
//                    Double Total_Deductions = FestivalAdvance_Rental + Advance02_Rental + Advance01_Rental + Loan02_Rental + Loan_Rental + Welfare + Meal + Rental + LessShift + OtherDeduc + DeathDonation + Insuarance + EPF8;
//                    Final_Total_Deducs = String.format("%.2f", Total_Deductions);
//
//                    Double Net_Sal = GrossSalary - Total_Deductions;
//                    Final_Net_Salary = String.format("%.2f", Net_Sal);
//                    //*******************
//
//                    //SAVE SALARY
//                    Statement sal_st = DbConnection.getconnection().createStatement();
//                    sal_st.executeUpdate("insert into salary_final_admin_staff values('" + EPF + "','" + Final_Basic + "','" + Final_BR + "','" + Final_Basic + "','0.00','" + Final_Attendance + "','" + Final_Perfomance + "','0.00','0.00','" + Final_Poya + "','0.00','" + Final_MCAllow + "','" + Final_OtherAllow + "','" + Final_Gross_Salary + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','0.00','" + Final_LessShift + "','" + Final_Rental + "','" + Final_DeathDonation + "','" + Final_OtherDeduc + "','" + Final_Insuarance + "','0.00','0.00','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','0.00','" + Final_EPF8 + "','" + Final_Total_Deducs + "','" + Final_Net_Salary + "','" + Final_EPF12 + "','" + Final_ETF3 + "','" + Final_Net_Salary + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + Name + "','" + EmpRank + "','0','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "',' ')");
//
//                    EPF = null;
//                    Name = null;
//                    ActiveEPF = null;
//
//                    ComAddress = null;
//                    ComName = null;
//                    EmpCompany = null;
//                    EmpLocation = null;
//                    EmpRank = null;
//
//                    Distress_BalanceAmt = "0.00";
//                    Distress_BalanceAmt02 = "0.00";
//
//                    BasicSalary = 0.00;
//                    GrossSalary = 0.00;
//                    BR_Allo = 0.00;
//                    Welfare = 0.00;
//
//                    PoyaDay = 0.00;
//                    MCAllo = 0.00;
//                    OtherAllo = 0.00;
//
//                    Meal = 0.00;
//                    Rental = 0.00;
//                    LessShift = 0.00;
//                    OtherDeduc = 0.00;
//                    DeathDonation = 0.00;
//                    Insuarance = 0.00;
//
//                    EPF8 = 0.00;
//                    EPF12 = 0.00;
//                    ETF3 = 0.00;
//
//                    Loan_Rental = 0.00;
//                    Loan02_Rental = 0.00;
//                    Advance01_Rental = 0.00;
//                    Advance02_Rental = 0.00;
//                    FestivalAdvance_Rental = 0.00;
//
//                    perfomance = 0.00;
//                    attendance = 0.00;
//
//                    //Final Data
//                    Final_Basic = "0.00";
//                    Final_BR = "0.00";
//
//                    Final_EPF12 = "0.00";
//                    Final_EPF8 = "0.00";
//                    Final_ETF3 = "0.00";
//
//                    Final_Poya = "0.00";
//                    Final_MCAllow = "0.00";
//                    Final_OtherAllow = "0.00";
//
//                    Final_Meal = "0.00";
//                    Final_Rental = "0.00";
//                    Final_LessShift = "0.00";
//                    Final_OtherDeduc = "0.00";
//                    Final_DeathDonation = "0.00";
//                    Final_Insuarance = "0.00";
//                    Final_Welfare = "0.00";
//
//                    Final_Attendance = "0.00";
//                    Final_Perfomance = "0.00";
//
//                    Final_Loan_Rental = "0.00";
//                    Final_Loan02_Rental = "0.00";
//                    Final_Advance01_Rental = "0.00";
//                    Final_Advance02_Rental = "0.00";
//                    Final_FestivalAdvance_Rental = "0.00";
//
//                    Final_Gross_Salary = "0.00";
//                    Final_Total_Deducs = "0.00";
//                    Final_Net_Salary = "0.00";
//
//                    MCAllowance = 0.00;
//
//                }
//
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(rootPane, e);
//                e.printStackTrace();
//
//            }
//            delete_null_data_in_settelsment_tables();
//            lbl_atten.setText(" Office Staff Salary  Processed  Succesfully...!");
//            Color cl = new Color(0, 153, 51);
//            lbl_atten.setForeground(cl);
//            lbl_atten.setVisible(true);
//            btn_Office_salary_process.setEnabled(false);
//
//        }
//*****************END OF OLD CALCULATION******************************************

    }//GEN-LAST:event_btn_Office_salary_processActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        MAIN.jMenuItem10.setEnabled(true);    // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {

            Connection conn = (Connection) DbConnection.getconnection();

            JasperDesign jd = JRXmlLoader.load("Reports\\PaySlip.jrxml");
            String sql = "SELECT * FROM salary_final_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year ='" + cmb_year.getSelectedItem().toString() + "'";
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            jd.setQuery(newQuery);

            JasperReport jr = JasperCompileManager.compileReport(jd);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
            JasperViewer.viewReport(jp, false);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btn_Tempory_salary_processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Tempory_salary_processActionPerformed

        //**********No. of Days per Selected Month****************************
        int year = Integer.parseInt(cmb_year.getSelectedItem().toString());
        int MaxDays = 0;

        if (cmb_month.getSelectedItem().toString().equals("January")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("February")) {

            if (year % 4 == 0) {
                if (year % 100 == 0) {
                    if (year % 400 == 0) {
                        //System.out.println(year + " Is A LEAP YEAR");
                        MaxDays = 29;
                    } else {
                        //System.out.println(year + " Is NOT LEAP YEAR");
                        MaxDays = 28;
                    }
                } else {
                    //System.out.println(year + " Is A LEAP YEAR");
                    MaxDays = 29;
                }
            } else {
                //System.out.println(year + " Is NOT LEAP YEAR");
                MaxDays = 28;
            }

        } else if (cmb_month.getSelectedItem().toString().equals("March")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("April")) {

            MaxDays = 30;

        } else if (cmb_month.getSelectedItem().toString().equals("May")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("June")) {

            MaxDays = 30;

        } else if (cmb_month.getSelectedItem().toString().equals("July")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("August")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("September")) {

            MaxDays = 30;

        } else if (cmb_month.getSelectedItem().toString().equals("October")) {

            MaxDays = 31;

        } else if (cmb_month.getSelectedItem().toString().equals("November")) {

            MaxDays = 30;

        } else if (cmb_month.getSelectedItem().toString().equals("December")) {

            MaxDays = 31;

        }

        System.out.println(cmb_month.getSelectedItem().toString() + " " + MaxDays);

        //********************************************************************
        String EPF = null;
        String Name = null;
        String ActiveEPF = null;

        String ComAddress = null;
        String ComName = null;
        String EmpCompany = null;
        String EmpLocation = null;
        String EmpRank = null;

        String Distress_BalanceAmt = "0.00";
        String Distress_BalanceAmt02 = "0.00";

        Double BasicSalary = 0.00;
        Double GrossSalary = 0.00;
        Double BR_Allo = 0.00;
        Double TaxEarn = 0.00;
        Double Welfare = 0.00;
        Double Budjet_Allo = 0.00;
        Double Balance_Gross = 0.00;

        Double WorkedDays = 0.00;

        Double PoyaDay = 0.00;
        Double MCAllo = 0.00;
        Double OtherAllo = 0.00;

        Double Meal = 0.00;
        Double Rental = 0.00;
        Double LessShift = 0.00;
        Double OtherDeduc = 0.00;
        Double DeathDonation = 0.00;
        Double Insuarance = 0.00;

        Double EPF8 = 0.00;
        Double EPF12 = 0.00;
        Double ETF3 = 0.00;

        Double Loan_Rental = 0.00;
        Double Loan02_Rental = 0.00;
        Double Advance01_Rental = 0.00;
        Double Advance02_Rental = 0.00;
        Double FestivalAdvance_Rental = 0.00;

        Double perfomance = 0.00;
        Double attendance = 0.00;

        //Final Data
        String Final_Basic = "0.00";
        String Final_BR = "0.00";

        String Final_EPF12 = "0.00";
        String Final_EPF8 = "0.00";
        String Final_ETF3 = "0.00";

        String Final_Poya = "0.00";
        String Final_MCAllow = "0.00";
        String Final_OtherAllow = "0.00";

        String Final_Meal = "0.00";
        String Final_Rental = "0.00";
        String Final_LessShift = "0.00";
        String Final_OtherDeduc = "0.00";
        String Final_DeathDonation = "0.00";
        String Final_Insuarance = "0.00";
        String Final_Welfare = "0.00";

        String Final_Attendance = "0.00";
        String Final_Perfomance = "0.00";

        String Final_Loan_Rental = "0.00";
        String Final_Loan02_Rental = "0.00";
        String Final_Advance01_Rental = "0.00";
        String Final_Advance02_Rental = "0.00";
        String Final_FestivalAdvance_Rental = "0.00";

        String Final_Gross_Salary = "0.00";
        String Final_TaxEarn = "0.00";
        String Final_Total_Deducs = "0.00";
        String Final_Net_Salary = "0.00";

        Double MCAllowance = 0.00;

        if (jDateChooser1.getDate() == null) {

            JOptionPane.showMessageDialog(rootPane, " Please select a Date to Proceed ");
        } else {
            salary_ReSet_Admin_Staff();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

            try {

                Statement st_days = DbConnection.getconnection().createStatement();
                ResultSet rs_days = st_days.executeQuery("select * from emp_atten_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                while (rs_days.next()) {
                    EPF = rs_days.getString("EPFno");
                    WorkedDays = Double.parseDouble(rs_days.getString("WorkedDays"));

                    // }
                    Statement st = DbConnection.getconnection().createStatement();
                    ResultSet rs = st.executeQuery("select * from employee_reg where RankCategory='Admin Staff' and IsResigned='0' and EPFno='" + EPF + "' ");
                    while (rs.next()) {

                        Name = rs.getString("NameWithInitials");
                        ActiveEPF = rs.getString("ActiveEPF");
                        EmpCompany = rs.getString("DefCompany");
                        EmpLocation = rs.getString("DefLocation");
                        EmpRank = rs.getString("Designation");

                        BasicSalary = Double.parseDouble(rs.getString("BasicSalary"));
                        GrossSalary = Double.parseDouble(rs.getString("GrossSalary"));
                        BR_Allo = Double.parseDouble(rs.getString("BRAllowance"));
                        Welfare = Double.parseDouble(rs.getString("Welfare"));
                        MCAllowance = Double.parseDouble(rs.getString("MCAllowance"));

                        Double perDayAmt = GrossSalary / MaxDays;
                        Double thisMonthSalary = perDayAmt * WorkedDays;

                        System.out.println(EPF + "MAxD: " + MaxDays);
                        System.out.println(EPF + "PerDay: " + perDayAmt);
                        System.out.println(EPF + "Salary: " + thisMonthSalary);

                        if (thisMonthSalary < (BasicSalary + BR_Allo)) {
                            if (thisMonthSalary < BR_Allo) {
                                TaxEarn = thisMonthSalary;
                                Budjet_Allo = 0.00;
                                Balance_Gross = 0.00;
                            } else {
                                TaxEarn = thisMonthSalary - BR_Allo;
                                Budjet_Allo = BR_Allo;
                                Balance_Gross = 0.00;
                            }
                        } else if (thisMonthSalary == (BasicSalary + BR_Allo)) {
                            TaxEarn = BasicSalary;
                            Budjet_Allo = BR_Allo;
                            Balance_Gross = 0.00;
                        } else {
                            TaxEarn = BasicSalary;
                            Budjet_Allo = BR_Allo;
                            Balance_Gross = thisMonthSalary - (BasicSalary + BR_Allo);
                        }

                        System.out.println(EPF + " TaxEarn: " + TaxEarn);
                        System.out.println(EPF + " Budjet_Allo: " + Budjet_Allo);

                        Final_Welfare = String.format("%.2f", Welfare);
                        Final_Basic = String.format("%.2f", BasicSalary);
                        Final_BR = String.format("%.2f", Budjet_Allo);
                        Final_TaxEarn = String.format("%.2f", TaxEarn);
                        //Final_Gross_Salary = String.format("%.2f", GrossSalary);

                        if (ActiveEPF.equals("1")) {

                            EPF8 = (TaxEarn + Budjet_Allo) * 0.08;
                            EPF12 = (TaxEarn + Budjet_Allo) * 0.12;
                            ETF3 = (TaxEarn + Budjet_Allo) * 0.03;

                            Final_EPF12 = String.format("%.2f", EPF12);
                            Final_EPF8 = String.format("%.2f", EPF8);
                            Final_ETF3 = String.format("%.2f", ETF3);

                        } else {
                            Final_EPF12 = "0.00";
                            Final_EPF8 = "0.00";
                            Final_ETF3 = "0.00";
                        }

                        //Earnings Details
                        Statement st1 = DbConnection.getconnection().createStatement();
                        ResultSet rs1 = st1.executeQuery("select * from salary_manual_earnings where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                        while (rs1.next()) {

                            PoyaDay = Double.parseDouble(rs1.getString("PoyaDay"));
                            MCAllo = Double.parseDouble(rs1.getString("MCAllowance"));
                            OtherAllo = Double.parseDouble(rs1.getString("Other"));

                            Final_Poya = String.format("%.2f", PoyaDay);
                            //Final_MCAllow = String.format("%.2f", MCAllo);
                            Final_OtherAllow = String.format("%.2f", OtherAllo);
                            System.out.println(EPF + "  " + Final_OtherAllow);

                        }

                        Final_MCAllow = String.format("%.2f", (MCAllo + MCAllowance));

                        perfomance = Balance_Gross * 0.52;
                        attendance = Balance_Gross * 0.48;

                        Double Final_Gross = (TaxEarn + Budjet_Allo + PoyaDay + MCAllo + OtherAllo + MCAllowance + attendance + perfomance);

                        Final_Gross_Salary = String.format("%.2f", Final_Gross);

                        System.out.println(EPF + " poya:" + PoyaDay + " mc:" + MCAllo + " other: " + OtherAllo + "FinalGross: " + Final_Gross + " Perfo: " + perfomance + " atten: " + attendance);

                        Final_Perfomance = String.format("%.2f", perfomance);
                        Final_Attendance = String.format("%.2f", attendance);

                        //Deductions Details
                        Statement st2 = DbConnection.getconnection().createStatement();
                        ResultSet rs2 = st2.executeQuery("select * from salary_manual_deductions where EPFno='" + EPF + "' and Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' ");
                        while (rs2.next()) {

                            Meal = Double.parseDouble(rs2.getString("Meal"));
                            Rental = Double.parseDouble(rs2.getString("Rental"));
                            LessShift = Double.parseDouble(rs2.getString("LessShift"));
                            OtherDeduc = Double.parseDouble(rs2.getString("OtherDeduc"));
                            DeathDonation = Double.parseDouble(rs2.getString("DeathDonation"));
                            Insuarance = Double.parseDouble(rs2.getString("Insuarance"));

                            Final_Meal = String.format("%.2f", Meal);
                            Final_Rental = String.format("%.2f", Rental);
                            Final_LessShift = String.format("%.2f", LessShift);
                            Final_OtherDeduc = String.format("%.2f", OtherDeduc);
                            Final_DeathDonation = String.format("%.2f", DeathDonation);
                            Final_Insuarance = String.format("%.2f", Insuarance);

                        }
                        // ******************
                        //Get details OF Distress_Loan_01
                        Statement Loan_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan_rs = Loan_st.executeQuery("SELECT * FROM distress_loan WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (Loan_rs.next()) {

                            String Ref = Loan_rs.getString("LoanReference");
                            String Rent = Loan_rs.getString("Rental");

                            Loan_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan_rs.getString("LoanAmount"));

                            Statement Loan_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan_settle_rs = Loan_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment WHERE LoanReference = '" + Ref + "' ");
                            while (Loan_settle_rs.next()) {

                                int count = Integer.parseInt(Loan_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan_Rental + bal);
                                    Distress_BalanceAmt = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan_Rental = String.format("%.2f", Loan_Rental);

                            //Save data to Loan_01 Settlement Table
                            Statement st3 = DbConnection.getconnection().createStatement();
                            st3.executeUpdate("insert into distress_loan_settelment values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Distress_Loan_02
                        Statement Loan02_st = DbConnection.getconnection().createStatement();
                        ResultSet Loan02_rs = Loan02_st.executeQuery("SELECT * FROM distress_loan_02 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (Loan02_rs.next()) {

                            String Ref = Loan02_rs.getString("LoanReference");
                            String Rent = Loan02_rs.getString("Rental");

                            Loan02_Rental = Double.parseDouble(Rent);

                            Double LoanAmount = Double.parseDouble(Loan02_rs.getString("LoanAmount"));

                            Statement Loan02_settle_st = DbConnection.getconnection().createStatement();
                            ResultSet Loan02_settle_rs = Loan02_settle_st.executeQuery("SELECT *,SUM(ReceivedAmount),COUNT(*) FROM distress_loan_settelment_02 WHERE LoanReference = '" + Ref + "' ");
                            while (Loan02_settle_rs.next()) {

                                int count = Integer.parseInt(Loan02_settle_rs.getString("COUNT(*)"));
                                Double bal = 0.00;
                                if (count == 0) {
                                    bal = 0.00;
                                } else {

                                    bal = Double.parseDouble(Loan02_settle_rs.getString("SUM(ReceivedAmount)"));
                                    Double bal1 = LoanAmount - (Loan02_Rental + bal);
                                    Distress_BalanceAmt02 = String.format("%.2f", bal1);
                                }

                            }

                            Final_Loan02_Rental = String.format("%.2f", Loan02_Rental);

                            //Save data to Loan_02 Settlement Table
                            Statement st4 = DbConnection.getconnection().createStatement();
                            st4.executeUpdate("insert into distress_loan_settelment_02 values('" + Ref + "','" + EPF + "','" + Rent + "','" + date + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','salary_deduction') ");
                        }

                        //Get details OF Advance01
                        Statement Ad1_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad1_rs = Ad1_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_1 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (Ad1_rs.next()) {
                            String Ref = null;
                            String Rent = "0";
                            if (Ad1_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad1_rs.getString("Reference");
                                Rent = Ad1_rs.getString("SUM(Amount)");

                                Advance01_Rental = Double.parseDouble(Rent);
                                Final_Advance01_Rental = String.format("%.2f", Advance01_Rental);
                            }

                            //Save data to Advance01 Settlement Table
                            Statement st5 = DbConnection.getconnection().createStatement();
                            st5.executeUpdate("insert into salary_advance_1_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");
                            st5.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");

                        }

                        //Get details OF Advance02
                        Statement Ad2_st = DbConnection.getconnection().createStatement();
                        ResultSet Ad2_rs = Ad2_st.executeQuery("SELECT *,SUM(Amount) FROM salary_advance_2 WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (Ad2_rs.next()) {

                            String Ref = null;
                            String Rent = "0";

                            if (Ad2_rs.getString("EPFno") == null) {

                            } else {

                                Ref = Ad2_rs.getString("Reference");
                                Rent = Ad2_rs.getString("SUM(Amount)");

                                Advance02_Rental = Double.parseDouble(Rent);
                                Final_Advance02_Rental = String.format("%.2f", Advance02_Rental);

                            }

                            //Save data to Advance02 Settlement Table
                            Statement st6 = DbConnection.getconnection().createStatement();

                            st6.executeUpdate("insert into salary_advance_2_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                            st6.executeUpdate("update salary_advance_2 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get details OF Festival Advance 
                        Statement fes_st = DbConnection.getconnection().createStatement();
                        ResultSet fes_rs = fes_st.executeQuery("SELECT * FROM salary_advance_festival WHERE EPFno = '" + EPF + "' and Status = 'on-going' ");
                        while (fes_rs.next()) {

                            String Ref = fes_rs.getString("Reference");
                            String Rent = fes_rs.getString("Rental");

                            FestivalAdvance_Rental = Double.parseDouble(Rent);
                            Final_FestivalAdvance_Rental = String.format("%.2f", FestivalAdvance_Rental);

                            //Save data to Festival Advance  Settlement Table
                            Statement st7 = DbConnection.getconnection().createStatement();

                            st7.executeUpdate("insert into salary_advance_festival_settlement values('" + Ref + "','" + EPF + "','" + Rent + "','" + lbl_current_date.getText() + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','Deduct from relevent Months Salary') ");

                            st7.executeUpdate("update salary_advance_1 set Status='settled' where Reference = '" + Ref + "' ");
                        }

                        //Get Company Address
                        Statement st5 = DbConnection.getconnection().createStatement();
                        ResultSet rs5 = st5.executeQuery("SELECT * FROM company_reg WHERE ComCode = '" + EmpCompany + "' ");
                        while (rs5.next()) {
                            ComAddress = rs5.getString("ComAddress");
                            ComName = rs5.getString("ComName");
                        }

                        Double Total_Deductions = FestivalAdvance_Rental + Advance02_Rental + Advance01_Rental + Loan02_Rental + Loan_Rental + Welfare + Meal + Rental + LessShift + OtherDeduc + DeathDonation + Insuarance + EPF8;
                        Final_Total_Deducs = String.format("%.2f", Total_Deductions);

                        Double Net_Sal = Final_Gross - Total_Deductions;
                        Final_Net_Salary = String.format("%.2f", Net_Sal);
                        //*******************

                        String TotalShifts = Double.toString(WorkedDays);

                        //SAVE SALARY
                        Statement sal_st = DbConnection.getconnection().createStatement();
                        sal_st.executeUpdate("insert into salary_final_admin_staff values('" + EPF + "','" + Final_Basic + "','" + Final_BR + "','" + Final_TaxEarn + "','0.00','" + Final_Attendance + "','" + Final_Perfomance + "','0.00','0.00','" + Final_Poya + "','0.00','" + Final_MCAllow + "','" + Final_OtherAllow + "','" + Final_Gross_Salary + "','" + Final_Welfare + "','" + Final_Advance01_Rental + "','" + Final_Advance02_Rental + "','" + Final_FestivalAdvance_Rental + "','" + Final_Meal + "','0.00','" + Final_LessShift + "','" + Final_Rental + "','" + Final_DeathDonation + "','" + Final_OtherDeduc + "','" + Final_Insuarance + "','0.00','0.00','" + Final_Loan_Rental + "','" + Distress_BalanceAmt + "','0.00','" + Final_EPF8 + "','" + Final_Total_Deducs + "','" + Final_Net_Salary + "','" + Final_EPF12 + "','" + Final_ETF3 + "','" + Final_Net_Salary + "','" + cmb_month.getSelectedItem().toString() + "','" + cmb_year.getSelectedItem().toString() + "','" + date + "','" + Name + "','" + EmpRank + "','" + TotalShifts + "','" + EmpLocation + "','" + EmpCompany + "','" + ComAddress + "','" + ComName + "','" + lbl_current_date.getText() + "','" + Final_Loan02_Rental + "','" + Distress_BalanceAmt02 + "',' ')");

                        EPF = null;
                        Name = null;
                        ActiveEPF = null;
                        thisMonthSalary = 0.00;
                        perDayAmt = 0.00;

                        ComAddress = null;
                        ComName = null;
                        EmpCompany = null;
                        EmpLocation = null;
                        EmpRank = null;

                        Distress_BalanceAmt = "0.00";
                        Distress_BalanceAmt02 = "0.00";

                        BasicSalary = 0.00;
                        GrossSalary = 0.00;
                        BR_Allo = 0.00;
                        Welfare = 0.00;

                        PoyaDay = 0.00;
                        MCAllo = 0.00;
                        OtherAllo = 0.00;

                        Meal = 0.00;
                        Rental = 0.00;
                        LessShift = 0.00;
                        OtherDeduc = 0.00;
                        DeathDonation = 0.00;
                        Insuarance = 0.00;

                        EPF8 = 0.00;
                        EPF12 = 0.00;
                        ETF3 = 0.00;

                        Loan_Rental = 0.00;
                        Loan02_Rental = 0.00;
                        Advance01_Rental = 0.00;
                        Advance02_Rental = 0.00;
                        FestivalAdvance_Rental = 0.00;

                        perfomance = 0.00;
                        attendance = 0.00;

                        //Final Data
                        Final_Basic = "0.00";
                        Final_BR = "0.00";

                        Final_EPF12 = "0.00";
                        Final_EPF8 = "0.00";
                        Final_ETF3 = "0.00";

                        Final_Poya = "0.00";
                        Final_MCAllow = "0.00";
                        Final_OtherAllow = "0.00";

                        Final_Meal = "0.00";
                        Final_Rental = "0.00";
                        Final_LessShift = "0.00";
                        Final_OtherDeduc = "0.00";
                        Final_DeathDonation = "0.00";
                        Final_Insuarance = "0.00";
                        Final_Welfare = "0.00";

                        Final_Attendance = "0.00";
                        Final_Perfomance = "0.00";

                        Final_Loan_Rental = "0.00";
                        Final_Loan02_Rental = "0.00";
                        Final_Advance01_Rental = "0.00";
                        Final_Advance02_Rental = "0.00";
                        Final_FestivalAdvance_Rental = "0.00";

                        Final_Gross_Salary = "0.00";
                        Final_Total_Deducs = "0.00";
                        Final_Net_Salary = "0.00";

                        MCAllowance = 0.00;

                    }

                    //MaxDays = 0;
                    WorkedDays = 0.0;

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e);
                e.printStackTrace();

            }
            delete_null_data_in_settelsment_tables();
            lbl_atten.setText(" Office Staff Salary  Processed  Succesfully...!");
            Color cl = new Color(0, 153, 51);
            lbl_atten.setForeground(cl);
            lbl_atten.setVisible(true);
            btn_Office_salary_process.setEnabled(false);

        }

    }//GEN-LAST:event_btn_Tempory_salary_processActionPerformed

    private void cmb_monthPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_monthPopupMenuWillBecomeInvisible
        days_per_month();        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_monthPopupMenuWillBecomeInvisible

    private void btn_Office_salary_processMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_Office_salary_processMousePressed
        lbl_atten.setText(" Office Staff Salary Processing.... Please Wait...!");
        lbl_atten.setForeground(Color.red);
        lbl_atten.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_btn_Office_salary_processMousePressed

    private void btn_SSS_salary_processMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SSS_salary_processMousePressed
        lbl_atten.setText(" SSS Employees' Salary Processing.... Please Wait...!");
        lbl_atten.setForeground(Color.red);
        lbl_atten.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_btn_SSS_salary_processMousePressed

    private void btn_SIKURA_salary_processMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SIKURA_salary_processMousePressed
        lbl_atten.setText(" Sikura Employees' Salary Processing.... Please Wait...!");
        lbl_atten.setForeground(Color.red);
        lbl_atten.setVisible(true);
    }//GEN-LAST:event_btn_SIKURA_salary_processMousePressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {

            Connection conn = (Connection) DbConnection.getconnection();

            JasperDesign jd = JRXmlLoader.load("Reports\\PaySlip_SIKURA.jrxml");
            String sql = "SELECT * FROM salary_final_sikura_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year ='" + cmb_year.getSelectedItem().toString() + "'";
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            jd.setQuery(newQuery);

            JasperReport jr = JasperCompileManager.compileReport(jd);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
            JasperViewer.viewReport(jp, false);

        } catch (Exception e) {
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void days_per_month() {
        if (cmb_month.getSelectedIndex() == 0) {//jan
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 1) {//feb
            max_days = 28.0;
            regular_shift = 26.0;
        }
        if (cmb_month.getSelectedIndex() == 2) {//mar
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 3) {//apr
            max_days = 30.0;
            regular_shift = 26.0;
        }
        if (cmb_month.getSelectedIndex() == 4) {//may
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 5) {//jun
            max_days = 30.0;
            regular_shift = 26.0;
        }
        if (cmb_month.getSelectedIndex() == 6) {//jul
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 7) {//aug
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 8) {//sep
            max_days = 30.0;
            regular_shift = 26.0;
        }
        if (cmb_month.getSelectedIndex() == 9) {//oct
            max_days = 31.0;
            regular_shift = 27.0;
        }
        if (cmb_month.getSelectedIndex() == 10) {//nov
            max_days = 30.0;
            regular_shift = 26.0;
        }
        if (cmb_month.getSelectedIndex() == 11) {//dec
            max_days = 31.0;
            regular_shift = 27.0;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Salary_process_Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Salary_process_Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Salary_process_Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Salary_process_Testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Salary_process_Testing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Office_salary_process;
    private javax.swing.JButton btn_SIKURA_salary_process;
    private javax.swing.JButton btn_SSS_salary_process;
    private javax.swing.JButton btn_Tempory_salary_process;
    private javax.swing.JComboBox cmb_month;
    private javax.swing.JComboBox cmb_year;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JLabel lbl_atten;
    private javax.swing.JLabel lbl_atten2;
    private javax.swing.JLabel lbl_current_date;
    // End of variables declaration//GEN-END:variables

    private void salary_ReSet() {

        try {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

            Statement st1 = DbConnection.getconnection().createStatement();
            ResultSet rs = st1.executeQuery("select * from salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

            while (rs.next()) {

                String EPF = rs.getString("EPFno");

                //Step-01 ==> Deleting Previously Processed Salary
                Statement st = DbConnection.getconnection().createStatement();
//            st.executeUpdate("delete from salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

                //Resetting Loan Tables
                st.executeUpdate("update `distress_loan` set Status='on-going' WHERE LastInstallment = '" + date + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `distress_loan_02` set Status='on-going' WHERE LastInstallment = '" + date + "' and EPFno='" + EPF + "'");

                //Resetting Advance Tables
                st.executeUpdate("update `salary_advance_festival` set Status='on-going' WHERE LastIns >= '" + date + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("update `salary_advance_1` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `salary_advance_2` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");

                //Deleting settlement tables
                st.executeUpdate("delete  from distress_loan_settelment where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from distress_loan_settelment_02 where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("delete  from salary_advance_festival_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_1_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_2_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");

                //Update Attendance_Tables
                st.executeUpdate("update emp_atten_main set SalaryStatus='salary_pending' where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'  ");
                // st.executeUpdate("update emp_atten_rate_changed_shift_details set SalaryStatus='salary_pending' where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");
            }

            // Deleting Previously Processed Salary
            Statement st_del = DbConnection.getconnection().createStatement();
            st_del.executeUpdate("delete from salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    private void delete_null_data_in_settelsment_tables() {

        try {

            Statement st = DbConnection.getconnection().createStatement();
            st.executeUpdate("delete from salary_advance_1_settlement where Reference='null'");
            st.executeUpdate("delete from salary_advance_2_settlement where Reference='null'");

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void salary_ReSet_Admin_Staff() {

        try {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

            Statement st1 = DbConnection.getconnection().createStatement();
            ResultSet rs = st1.executeQuery("select * from salary_final_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

            while (rs.next()) {

                String EPF = rs.getString("EPFno");

                //Step-01 ==> Deleting Previously Processed Salary
                Statement st = DbConnection.getconnection().createStatement();
//            st.executeUpdate("delete from salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

                //Resetting Loan Tables
                st.executeUpdate("update `distress_loan` set Status='on-going' WHERE LastInstallment >= '" + date + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `distress_loan_02` set Status='on-going' WHERE LastInstallment >= '" + date + "' and EPFno='" + EPF + "'");

                //Resetting Advance Tables
                st.executeUpdate("update `salary_advance_festival` set Status='on-going' WHERE LastIns >= '" + date + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("update `salary_advance_1` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `salary_advance_2` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");

                //Deleting settlement tables
                st.executeUpdate("delete  from distress_loan_settelment where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from distress_loan_settelment_02 where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("delete  from salary_advance_festival_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_1_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_2_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");

            }

            // Deleting Previously Processed Salary
            Statement st_del = DbConnection.getconnection().createStatement();
            st_del.executeUpdate("delete from salary_final_admin_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    private void salary_ReSet_Sikura_Staff() {

        try {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser1.getDate());

            Statement st1 = DbConnection.getconnection().createStatement();
            ResultSet rs = st1.executeQuery("select * from salary_final_sikura_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

            while (rs.next()) {

                String EPF = rs.getString("EPFno");

                //Step-01 ==> Deleting Previously Processed Salary
                Statement st = DbConnection.getconnection().createStatement();
//            st.executeUpdate("delete from salary_final where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

                //Resetting Loan Tables
                st.executeUpdate("update `distress_loan` set Status='on-going' WHERE LastInstallment >= '" + date + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `distress_loan_02` set Status='on-going' WHERE LastInstallment >= '" + date + "' and EPFno='" + EPF + "'");

                //Resetting Advance Tables
                st.executeUpdate("update `salary_advance_festival` set Status='on-going' WHERE LastIns >= '" + date + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("update `salary_advance_1` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("update `salary_advance_2` set Status='on-going' WHERE PayMonth='" + cmb_month.getSelectedItem().toString() + "' and PayYear='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");

                //Deleting settlement tables
                st.executeUpdate("delete  from distress_loan_settelment where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from distress_loan_settelment_02 where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "'");
                st.executeUpdate("delete  from salary_advance_festival_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_1_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");
                st.executeUpdate("delete  from salary_advance_2_settlement where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' and EPFno='" + EPF + "' ");

                //Update Attendance_Tables
                st.executeUpdate("update emp_atten_main set SalaryStatus='salary_pending' where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'  ");

            }

            // Deleting Previously Processed Salary
            Statement st_del = DbConnection.getconnection().createStatement();
            st_del.executeUpdate("delete from salary_final_sikura_staff where Month='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "'");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

}
