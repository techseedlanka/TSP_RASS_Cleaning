/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sapu
 */
public class Advance_generate extends javax.swing.JFrame {

    /**
     * Creates new form Advance_generate
     */
    public Advance_generate() {
        initComponents();
        table_properties();

        jTable1.getTableHeader().setDefaultRenderer(new Allowances.HeaderColor());

        //jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }

    private void table_properties() {

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(75);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(70);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(75);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(70);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);

    }

    private void Get_Total_TableAmount() {
        int nrow = jTable1.getModel().getRowCount();

        if (nrow == 0) {

        } else {
            Double Stotal = 0.00;
            for (int i = 0; nrow > i; i++) {

                String amount = jTable1.getModel().getValueAt(i, 3).toString();

                Double sum_total = Double.parseDouble(amount);
                Stotal += sum_total;

            }
            String Gtotal = String.format("%.2f", (Stotal));
            txt_Total_advance.setText(Gtotal);

        }

    }

    private void Get_Total_Employees_inTable() {
        int nrow = jTable1.getModel().getRowCount();

        if (nrow == 0) {

        } else {

            String total = Integer.toString(nrow);
            txt_no_of_emp.setText(total);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_to = new javax.swing.JLabel();
        txt_Total_advance = new javax.swing.JTextField();
        cmb_month = new javax.swing.JComboBox();
        cmb_year = new javax.swing.JComboBox();
        cmb_advanceType = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        lbl_from = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txt_no_of_emp = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_to.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        lbl_to.setText("to");
        getContentPane().add(lbl_to, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 130, 20));

        txt_Total_advance.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_Total_advance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_Total_advanceFocusLost(evt);
            }
        });
        txt_Total_advance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_Total_advanceKeyPressed(evt);
            }
        });
        getContentPane().add(txt_Total_advance, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 460, 100, -1));

        cmb_month.setFont(new java.awt.Font("Georgia", 0, 15)); // NOI18N
        cmb_month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        getContentPane().add(cmb_month, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 60, 100, -1));

        cmb_year.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        cmb_year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015", "2016", "2017", "2018", "2019", "2020" }));
        cmb_year.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_yearPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_year, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, -1, -1));

        cmb_advanceType.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        cmb_advanceType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "20th (Bank Only)", "30th (All)" }));
        cmb_advanceType.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_advanceTypePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_advanceType, new org.netbeans.lib.awtextra.AbsoluteConstraints(547, 60, 140, -1));

        jLabel18.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel18.setText("Advance Effective Month / Year :-");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, 20));

        jButton1.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/In Progress-48.png"))); // NOI18N
        jButton1.setText("Generate Advances");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, 230, 50));

        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EPFno", "Name", "Rank", "Amount", "Location", "Location Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTable1.setRowHeight(20);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 550, 260));

        jLabel19.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel19.setText("Advance Total :-");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 460, -1, 20));

        lbl_from.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        lbl_from.setText("from");
        getContentPane().add(lbl_from, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 110, 20));

        jLabel1.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        jLabel1.setText("Advance Auto Generate");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 240, 40));
        getContentPane().add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, 700, 10));

        jLabel20.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel20.setText("Advance Type :-");
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 60, -1, 20));

        jLabel21.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel21.setText("No. of Employees:-");
        getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, -1, 20));

        txt_no_of_emp.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_no_of_emp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_no_of_empFocusLost(evt);
            }
        });
        txt_no_of_emp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_no_of_empKeyPressed(evt);
            }
        });
        getContentPane().add(txt_no_of_emp, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 460, 100, -1));

        jButton2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Minus-30.png"))); // NOI18N
        jButton2.setText("Remove  ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 280, -1, -1));

        jButton3.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/save 1.png"))); // NOI18N
        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 200, -1, -1));

        jButton4.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Refresh.png"))); // NOI18N
        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 360, 110, 40));
        getContentPane().add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 700, 10));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_Total_advanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_Total_advanceFocusLost
        //        String code = txt_LocCode.getText();
        //
        //        try {
        //            Statement st = DbConnection.getconnection().createStatement();
        //            ResultSet rs = st.executeQuery("select * from location_reg");
        //
        //            while (rs.next()) {
        //                String LocCode = rs.getString("LocCode");
        //
        //                if (code.equals(LocCode)) {
        //                    btn_LocSave.setEnabled(false);
        //                } else {
        //
        //                }
        //            }
        //
        //        } catch (Exception e) {
        //        }
    }//GEN-LAST:event_txt_Total_advanceFocusLost

    private void txt_Total_advanceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_Total_advanceKeyPressed
//        //(evt.getKeyCode() == KeyEvent.VK_F1  && evt.isControlDown()
//
//            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//
//                String code = txt_LocCode.getText();
//
//                try {
//                    Statement st = DbConnection.getconnection().createStatement();
//                    ResultSet rs = st.executeQuery("select * from location_reg");
//
//                    while (rs.next()) {
//                        String LocCode = rs.getString("LocCode");
//
//                        if (code.equals(LocCode)) {
//                            btn_LocSave.setEnabled(false);
//
//                            txt_LocName.setText(rs.getString("LocName"));
//                            txt_LocAddress.setText(rs.getString("LocAddress"));
//                            txt_LocTel1.setText(rs.getString("Tel1"));
//                            txt_LocTel2.setText(rs.getString("Tel2"));
//                            txt_LocTel3.setText(rs.getString("Tel3"));
//                            txt_LocCity.setText(rs.getString("City"));
//                            txt_LocDistrict.setText(rs.getString("District"));
//                            txt_LocIncharge.setText(rs.getString("LocInchargeName"));
//                            txt_LocOwnerName.setText(rs.getString("LocOwnerName"));
//                            txt_LocOwnerTel.setText(rs.getString("LocOwnerTel"));
//                            txt_ShiftRate.setText(rs.getString("LocOwnerMobile"));
//                            cmb_locType.setSelectedItem(rs.getString("LocType"));
//
//                        } else {
//
//                        }
//                    }
//                    DefaultTableModel dtm = (DefaultTableModel) jTable3.getModel();
//                    dtm.setRowCount(0);
//
//                    Statement st1 = DbConnection.getconnection().createStatement();
//                    ResultSet rs1 = st1.executeQuery("select * from location_shift_rates where LocCode = '" + txt_LocCode.getText() + "'");
//
//                    while (rs1.next()) {
//
//                        Vector v = new Vector();
//                        v.add(rs1.getString("Rank"));
//                        v.add(rs1.getString("ShiftRate"));
//
//                        dtm.addRow(v);
//                    }
//
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//
//            }
    }//GEN-LAST:event_txt_Total_advanceKeyPressed

    private void cmb_yearPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_yearPopupMenuWillBecomeInvisible
        set_date_range();


    }//GEN-LAST:event_cmb_yearPopupMenuWillBecomeInvisible

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//20th (Bank Only), 30th (All)
        if (cmb_advanceType.getSelectedIndex() == 0) {

            advance_Type_01_20th();
            Get_Total_TableAmount();
            Get_Total_Employees_inTable();

        } else if (cmb_advanceType.getSelectedIndex() == 1) {

            advance_Type_02_30th();
            Get_Total_TableAmount();
            Get_Total_Employees_inTable();

        } else {

        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmb_advanceTypePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_advanceTypePopupMenuWillBecomeInvisible
        set_date_range();        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_advanceTypePopupMenuWillBecomeInvisible

    private void txt_no_of_empFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_no_of_empFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_no_of_empFocusLost

    private void txt_no_of_empKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_no_of_empKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_no_of_empKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int select_row = jTable1.getSelectedRowCount();

        if (select_row == 0) {
        } else {

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.removeRow(jTable1.getSelectedRow());

            txt_Total_advance.setText("0.00");
            txt_no_of_emp.setText("0");

            Get_Total_TableAmount();
            Get_Total_Employees_inTable();

        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked


    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int nrow = jTable1.getModel().getRowCount();

        if (nrow == 0) {

        } else {
            for (int i = 0; nrow > i; i++) {

                String epf = jTable1.getModel().getValueAt(i, 0).toString();
                String name = jTable1.getModel().getValueAt(i, 1).toString();
                String rank = jTable1.getModel().getValueAt(i, 2).toString();
                String amount = jTable1.getModel().getValueAt(i, 3).toString();
                String location = jTable1.getModel().getValueAt(i, 4).toString();
                String loc_type = jTable1.getModel().getValueAt(i, 5).toString();

                String year = cmb_year.getSelectedItem().toString();
                String month = cmb_month.getSelectedItem().toString();
                String adv_type = cmb_advanceType.getSelectedItem().toString();
                String ref20 = "AA/20th" + epf + "/" + month + "/" + year;
                String ref30 = "AA/300th" + epf + "/" + month + "/" + year;

                try {
                    if (adv_type.equals("20th (Bank Only)")) {

                        Statement st = DbConnection.getconnection().createStatement();
                        st.executeUpdate("insert into salary_advance_1 values('" + epf + "','" + name + "','" + rank + "','" + lbl_to.getText() + "','" + amount + "','" + adv_type + "','0','" + ref20 + "','on-going','" + location + "','" + loc_type + "')");

                    } else if (adv_type.equals("30th (All)")) {

                        Statement st = DbConnection.getconnection().createStatement();
                        st.executeUpdate("insert into salary_advance_2 values('" + epf + "','" + name + "','" + rank + "','" + lbl_to.getText() + "','" + amount + "','" + adv_type + "','0','" + ref30 + "','on-going','" + location + "','" + loc_type + "')");

                    } else {

                    }

                } catch (Exception e) {

                    e.printStackTrace();
                }

            }
            JOptionPane.showMessageDialog(rootPane, " Advances Successfully Saved...  ");

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);

        lbl_from.setText("");
        lbl_to.setText("");

        txt_Total_advance.setText("");
        txt_no_of_emp.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Advance_generate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Advance_generate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Advance_generate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Advance_generate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Advance_generate().setVisible(true);
            }
        });
    }

    private void set_date_range() {

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);

        int month = 0;
        month = cmb_month.getSelectedIndex();
        String year = cmb_year.getSelectedItem().toString();

        if (cmb_advanceType.getSelectedIndex() == 0) {

            if (month == 11) {

                month = 0;

                int x = Integer.parseInt(year);
                int nextYear = x + 1;

                lbl_from.setText(nextYear + "-" + ("0" + (month + 1)) + "-" + "01");
                lbl_to.setText(nextYear + "-" + ("0" + (month + 1)) + "-" + "18");

            } else {
                int next = month + 1;
                String nextM = Integer.toString(next);
                int len = nextM.length();

                if (len == 1) {

                    lbl_from.setText(year + "-" + ("0" + (nextM)) + "-" + "01");
                    lbl_to.setText(year + "-" + ("0" + (nextM)) + "-" + "18");

                } else {

                    lbl_from.setText(year + "-" + ((nextM)) + "-" + "01");
                    lbl_to.setText(year + "-" + ((nextM)) + "-" + "18");

                }

            }

        } else if (cmb_advanceType.getSelectedIndex() == 1) {

            if (month == 11) {

                month = 0;

                int x = Integer.parseInt(year);
                int nextYear = x + 1;

                lbl_from.setText(nextYear + "-" + ("0" + (month + 1)) + "-" + "01");
                lbl_to.setText(nextYear + "-" + ("0" + (month + 1)) + "-" + "28");

            } else {
                int next = month + 1;
                String nextM = Integer.toString(next);
                int len = nextM.length();

                if (len == 1) {

                    lbl_from.setText(year + "-" + ("0" + (nextM)) + "-" + "01");
                    lbl_to.setText(year + "-" + ("0" + (nextM)) + "-" + "28");

                } else {

                    lbl_from.setText(year + "-" + ((nextM)) + "-" + "01");
                    lbl_to.setText(year + "-" + ((nextM)) + "-" + "28");

                }

            }
        }

    }

    private void advance_Type_01_20th() {
        try {

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
//            dtm.setRowCount(0);

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("select *,SUM(DayShift+NightShift),SUM(HalfDayShift) from emp_atten_main where Date BETWEEN '" + lbl_from.getText() + "' and '" + lbl_to.getText() + "' AND Month ='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' group by EPFno");
            while (rs.next()) {

                Double x = Double.parseDouble(rs.getString("SUM(HalfDayShift)"));
                Double half_shifts = x / 2;

                Double day_shifts = Double.parseDouble(rs.getString("SUM(DayShift+NightShift)"));

                Double total_shifts = half_shifts + day_shifts;
                
                System.out.println("");

                if (total_shifts > 10) {

                    String epf = rs.getString("EPFno");
                    
                    System.out.println(epf);
                    
                    //****get employee details
                    Statement st1 = DbConnection.getconnection().createStatement();
                    ResultSet rs1 = st1.executeQuery("select * from employee_reg where  EPFno = '" + epf + "' ");
                    while (rs1.next()) {

                        String emp_rank = rs1.getString("Designation");
                        String emp_loc = rs1.getString("DefLocation");
                        String emp_name = rs1.getString("NameWithInitials");

                        Statement st2 = DbConnection.getconnection().createStatement();
                        ResultSet rs2 = st2.executeQuery("select * from location_reg where  LocCode='" + emp_loc + "' ");
                        while (rs2.next()) {

                            String loc_type = rs2.getString("LocType");

                            if (loc_type.equals("Bank")) {

                                Statement st3 = DbConnection.getconnection().createStatement();
                                ResultSet rs3 = st3.executeQuery("select * from advance_bank_employee where  Rank='" + emp_rank + "' ");
                                while (rs3.next()) {

                                    //String adv_amt = rs3.getString("20thAMT");
                                    Double advance = Double.parseDouble(rs3.getString("20thAMT"));
                                    String adv_amt = String.format("%.2f", advance);

                                    // DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                                    Vector v = new Vector();
                                    
                                    System.out.println(epf+" "+adv_amt);

                                    v.add(epf);
                                    v.add(emp_name);
                                    v.add(emp_rank);
                                    v.add(adv_amt);
                                    v.add(emp_loc);
                                    v.add(loc_type);

                                    dtm.addRow(v);

                                    // System.out.println(epf + " Rank:" + emp_rank + " TotalShifts:" + total_shifts + " Loc:" + emp_loc + loc_type + " AMT:" + adv_amt);
                                }

                            } else {
                                //System.out.println(epf + " Rank:" + emp_rank + " TotalShifts:" + total_shifts + " Loc:" + emp_loc + loc_type);

                            }

                        }

                    }
                } else {
                    //**********total_shifts < 10
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void advance_Type_02_30th() {

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);

        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("select *,SUM(DayShift+NightShift),SUM(HalfDayShift) from emp_atten_main where Date BETWEEN '" + lbl_from.getText() + "' and '" + lbl_to.getText() + "' AND Month ='" + cmb_month.getSelectedItem().toString() + "' and Year='" + cmb_year.getSelectedItem().toString() + "' group by EPFno");
            while (rs.next()) {

                Double x = Double.parseDouble(rs.getString("SUM(HalfDayShift)"));
                Double half_shifts = x / 2;

                Double day_shifts = Double.parseDouble(rs.getString("SUM(DayShift+NightShift)"));

                Double total_shifts = half_shifts + day_shifts;

                if (total_shifts > 15) {

                    String epf = rs.getString("EPFno");

                    //****get employee details
                    Statement st1 = DbConnection.getconnection().createStatement();
                    ResultSet rs1 = st1.executeQuery("select * from employee_reg where  EPFno = '" + epf + "' ");
                    while (rs1.next()) {

                        String emp_rank = rs1.getString("Designation");
                        String emp_loc = rs1.getString("DefLocation");
                        String emp_name = rs1.getString("NameWithInitials");

                        Statement st2 = DbConnection.getconnection().createStatement();
                        ResultSet rs2 = st2.executeQuery("select * from location_reg where  LocCode='" + emp_loc + "' ");
                        while (rs2.next()) {

                            String loc_type = rs2.getString("LocType");

                            if (loc_type.equals("Bank")) {

                                Statement st3 = DbConnection.getconnection().createStatement();
                                ResultSet rs3 = st3.executeQuery("select * from advance_bank_employee where  Rank='" + emp_rank + "' ");
                                while (rs3.next()) {

                                    //String advance = rs3.getString("30thAMT");
                                    Double advance = Double.parseDouble(rs3.getString("30thAMT"));
                                    String adv_amt = String.format("%.2f", advance);

                                    // DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                                    Vector v = new Vector();

                                    v.add(epf);
                                    v.add(emp_name);
                                    v.add(emp_rank);
                                    v.add(adv_amt);
                                    v.add(emp_loc);
                                    v.add(loc_type);

                                    dtm.addRow(v);

                                    // System.out.println(epf + " Rank:" + emp_rank + " TotalShifts:" + total_shifts + " Loc:" + emp_loc + loc_type + " AMT:" + adv_amt);
                                }

                            } else if (loc_type.equals("Other")) {

                                Statement st4 = DbConnection.getconnection().createStatement();
                                ResultSet rs4 = st4.executeQuery("select * from advance_other_employee where  Rank='" + emp_rank + "' ");
                                while (rs4.next()) {

                                    // String advance = rs4.getString("30thAMT");
                                    Double advance = Double.parseDouble(rs4.getString("30thAMT"));
                                    String adv_amt = String.format("%.2f", advance);

//                                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                                    Vector v = new Vector();

                                    v.add(epf);
                                    v.add(emp_name);
                                    v.add(emp_rank);
                                    v.add(adv_amt);
                                    v.add(emp_loc);
                                    v.add(loc_type);

                                    dtm.addRow(v);

                                    //System.out.println(epf + " Rank:" + emp_rank + " TotalShifts:" + total_shifts + " Loc:" + emp_loc + loc_type + " AMT:" + adv_amt);
                                }
                            }

                        }

                    }
                } else {
                    //**********total_shifts < 10
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmb_advanceType;
    private javax.swing.JComboBox cmb_month;
    private javax.swing.JComboBox cmb_year;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbl_from;
    private javax.swing.JLabel lbl_to;
    private javax.swing.JTextField txt_Total_advance;
    private javax.swing.JTextField txt_no_of_emp;
    // End of variables declaration//GEN-END:variables

    static public class HeaderColor extends DefaultTableCellRenderer {

        public HeaderColor() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable jTable1, Object value, boolean selected, boolean focused, int row, int column) {
            super.getTableCellRendererComponent(jTable1, value, selected, focused, row, column);
            setFont(new Font("Georgia", Font.PLAIN, 14));
            setForeground(Color.BLUE);
            setBorder(BorderFactory.createBevelBorder(0, Color.lightGray, Color.LIGHT_GRAY));
            setBackground(Color.LIGHT_GRAY);
            return this;

        }

    }

}
