/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Sapu
 */
public class RPT_Deductions_new extends javax.swing.JFrame {

    /**
     * Creates new form RPT_Deductions
     */
    static ArrayList deductions;

    PreparedStatement pst;
    Connection con;
    static ArrayList adv;

    public RPT_Deductions_new() {
        initComponents();
        deductions = new ArrayList();
        get_Location_Details();
        TitleBar();
        jPanel1.setVisible(false);
        adv = new ArrayList();
    }

    private void TitleBar() {
        // this.setTitle("Employee Attendance Entry");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("techseed.png")));
    }

    private void get_Location_Details() {
        try {

            Statement st = DbConnection.getconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * from location_reg order by LocName");
            while (rs.next()) {

                Object name = rs.getString("LocName");
                //Object code = rs.getString("LocCode");

                //cmb_defLocation.addItem(code);
                cmb_locations.addItem(name);
            }

            AutoCompleteDecorator.decorate(cmb_locations);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    String EPFno = null;
    String EmpName = null;
    String Sal_Adv_01 = null;
    String Sal_Adv_02 = null;
    String Loan01 = null;
    String Loan02 = null;
    String Uniform = null;
    String Shoe = null;
    String welfare = null;
    String meal = null;
    String fine = null;
    String rental = null;
    String less_shift = null;
    String other_deduc = null;
    String death = null;
    String paid10 = null;
    String insuarance = null;
    String festival = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator10 = new javax.swing.JSeparator();
        jSeparator11 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        cmb_month1 = new javax.swing.JComboBox();
        cmb_year1 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lbl_PAID_slip = new javax.swing.JLabel();
        lbl_PAID_bank = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lbl_cash = new javax.swing.JLabel();
        lbl_slip = new javax.swing.JLabel();
        lbl_PAID_cash = new javax.swing.JLabel();
        lbl_bank = new javax.swing.JLabel();
        cmb_deduction_type = new javax.swing.JComboBox();
        jButton6 = new javax.swing.JButton();
        cmb_month = new javax.swing.JComboBox();
        cmb_year = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmb_report_type = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        cmb_locations = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jSeparator10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 370, 10));
        getContentPane().add(jSeparator11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 370, 10));

        jLabel20.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel20.setText("Month & Year :");
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 120, 20));

        cmb_month1.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        cmb_month1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        cmb_month1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_month1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_month1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 120, -1));

        cmb_year1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmb_year1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2020", "2021", "2022", "2023", "2024", "2025" }));
        cmb_year1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_year1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_year1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 80, -1));

        jButton3.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Fine Print.png"))); // NOI18N
        jButton3.setText("Veiw Report");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 210, 50));

        lbl_PAID_slip.setText("0.00");
        jPanel1.add(lbl_PAID_slip);

        lbl_PAID_bank.setText("0.00");
        jPanel1.add(lbl_PAID_bank);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EMP", "Name", "Rank", "Amount", "Location", "LocationName", "PayType", "Bank Name", "Status"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1);

        lbl_cash.setText("0.00");
        jPanel1.add(lbl_cash);

        lbl_slip.setText("0.00");
        jPanel1.add(lbl_slip);

        lbl_PAID_cash.setText("0.00");
        jPanel1.add(lbl_PAID_cash);

        lbl_bank.setText("0.00");
        jPanel1.add(lbl_bank);

        cmb_deduction_type.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        cmb_deduction_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Festival Advance" }));
        cmb_deduction_type.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_deduction_typePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(cmb_deduction_type);

        jButton6.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jButton6.setText("Deduction Report");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6);

        cmb_month.setFont(new java.awt.Font("Georgia", 0, 15)); // NOI18N
        cmb_month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        cmb_month.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 102, 204)));
        cmb_month.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_monthPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(cmb_month);

        cmb_year.setFont(new java.awt.Font("Times New Roman", 0, 15)); // NOI18N
        cmb_year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2019", "2020", "2021", "2022", "2023" }));
        cmb_year.setSelectedItem("2017");
        cmb_year.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 102, 204)));
        cmb_year.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_yearPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jPanel1.add(cmb_year);

        jLabel19.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel19.setText("Deduction Type :");
        jPanel1.add(jLabel19);

        jButton2.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Fine Print.png"))); // NOI18N
        jButton2.setText("Veiw Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        jLabel33.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel33.setText("Please Select a Relevent Month / Year  :-");
        jPanel1.add(jLabel33);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 110, 20));

        jLabel3.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        jLabel3.setText("Festival Advance Deductions");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 240, 40));

        cmb_report_type.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        cmb_report_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monthly Report", "All on-going Details", "Unit wise Sign Report", "Unit wise Summery" }));
        cmb_report_type.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_report_typePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_report_type, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 210, -1));

        jLabel21.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        jLabel21.setText("Report Type :");
        getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 110, 20));

        cmb_locations.setEditable(true);
        cmb_locations.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        cmb_locations.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "==Location==" }));
        cmb_locations.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_locationsPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        getContentPane().add(cmb_locations, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 320, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmb_monthPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_monthPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_monthPopupMenuWillBecomeInvisible

    private void cmb_yearPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_yearPopupMenuWillBecomeInvisible

    }//GEN-LAST:event_cmb_yearPopupMenuWillBecomeInvisible

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        // String FromDate = sdf.format(date_from.getDate());
        //   String ToDate = sdf.format(date_to.getDate());

        String Month = cmb_month.getSelectedItem().toString();
        String Year = cmb_year.getSelectedItem().toString();

        EPFno = null;
        EmpName = null;
        Sal_Adv_01 = null;
        Sal_Adv_02 = null;
        Loan01 = null;
        Loan02 = null;
        Uniform = null;
        Shoe = null;
        welfare = null;
        meal = null;
        fine = null;
        rental = null;
        less_shift = null;
        other_deduc = null;
        death = null;
        paid10 = null;
        insuarance = null;

        try {

            con = DbConnection.getconnection();

            String sql01 = "select * from employee_reg where IsResigned='0'  order by EPFno";
            pst = con.prepareStatement(sql01);
            ResultSet rst = pst.executeQuery();
            while (rst.next()) {

                EPFno = rst.getString("EPFno");
                //System.out.println("EPF: " + EPFno);
//                pst.close();
//                rst.close();

                String sql02 = "select *,SUM(Amount) from salary_advance_1 where EPFno=? and PayMonth=? and PayYear=?  ";
                pst = con.prepareStatement(sql02);
                pst.setString(1, EPFno);
                pst.setString(2, Month);
                pst.setString(3, Year);

                ResultSet rst2 = pst.executeQuery();
                while (rst2.next()) {
                    Sal_Adv_01 = rst2.getString("SUM(Amount)");
                    //System.out.println(EPFno + " " + Sal_Adv_01);
                }

                String sql03 = "select *,SUM(Amount) from salary_advance_2 where EPFno=? and PayMonth=? and PayYear=?  ";
                pst = con.prepareStatement(sql03);
                pst.setString(1, EPFno);
                pst.setString(2, Month);
                pst.setString(3, Year);

                ResultSet rst3 = pst.executeQuery();
                while (rst3.next()) {
                    Sal_Adv_02 = rst3.getString("SUM(Amount)");
                    //System.out.println(EPFno + " " + "Sal_Adv_02:" + Sal_Adv_02);
                }

                String sql04 = "select *,SUM(Rental) from distress_loan where EPFno=? and   Status='on-going'";
                pst = con.prepareStatement(sql04);
                pst.setString(1, EPFno);

                ResultSet rst4 = pst.executeQuery();
                while (rst4.next()) {
                    Loan01 = rst4.getString("SUM(Rental)");
                    //System.out.println(EPFno + " " + "Loan01:" + Loan01);
                }

                String sql05 = "select *,SUM(Rental) from distress_loan_02 where EPFno=? and   Status='on-going'";
                pst = con.prepareStatement(sql05);
                pst.setString(1, EPFno);

                ResultSet rst5 = pst.executeQuery();
                while (rst5.next()) {
                    Loan02 = rst5.getString("SUM(Rental)");
                    //System.out.println(EPFno + " " + "Loan02:" + Loan02);
                }

                String sql06 = "select *,SUM(Rental) from shoes_issue where EPFno=? and  Status='on-going'";
                pst = con.prepareStatement(sql06);
                pst.setString(1, EPFno);

                ResultSet rst6 = pst.executeQuery();
                while (rst6.next()) {
                    Shoe = rst6.getString("SUM(Rental)");
                    //System.out.println(EPFno + " " + "Shoe:" + Shoe);
                }

                String sql07 = "select *,SUM(Rental) from uniform_issue where EPFno=? and  Status='on-going'";
                pst = con.prepareStatement(sql07);
                pst.setString(1, EPFno);

                ResultSet rst7 = pst.executeQuery();
                while (rst7.next()) {
                    Uniform = rst7.getString("SUM(Rental)");
                    //System.out.println(EPFno + " " + "Shoe:" + Shoe);
                }

                String sql08 = "select * from salary_manual_deductions where EPFno=? and Month=? and Year=? ";
                pst = con.prepareStatement(sql08);
                pst.setString(1, EPFno);
                pst.setString(2, Month);
                pst.setString(3, Year);

                ResultSet rst8 = pst.executeQuery();
                while (rst8.next()) {

                    meal = rst8.getString("Meal");
                    fine = rst8.getString("Fines");
                    rental = rst8.getString("Rental");
                    less_shift = rst8.getString("LessShift");
                    death = rst8.getString("DeathDonation");
                    other_deduc = rst8.getString("OtherDeduc");
                    paid10 = rst8.getString("PaidSalary10th");
                    insuarance = rst8.getString("Insuarance");

                }

                String sql09 = "select * from employee_reg where EPFno=? ";
                pst = con.prepareStatement(sql09);
                pst.setString(1, EPFno);

                ResultSet rst9 = pst.executeQuery();
                while (rst9.next()) {
                    EmpName = rst9.getString("NameWithInitials");
                    welfare = rst9.getString("Welfare");
                    //System.out.println(EPFno + " " + "Shoe:" + Shoe);
                }

                String sql10 = "select *,SUM(Rental) from salary_advance_festival where EPFno=? and  Status='on-going'";
                pst = con.prepareStatement(sql10);
                pst.setString(1, EPFno);

                ResultSet rst10 = pst.executeQuery();
                while (rst10.next()) {
                    festival = rst10.getString("SUM(Rental)");
                    //System.out.println(EPFno + " " + "Shoe:" + Shoe);
                }

                if ((Sal_Adv_01 == null) && (Sal_Adv_02 == null) && (Loan01 == null) && (Loan02 == null) && (Uniform == null) && (Shoe == null) && (meal == null) && (rental == null) && (fine == null) && (less_shift == null) && (other_deduc == null) && (death == null) && (paid10 == null) && (insuarance == null) && (festival == null)) {
                    //  System.out.println(" Epf: "+EPFno+" null");
                } else {

                    bean_deduction bds = new bean_deduction();

                    bds.setEmpname(EmpName);
                    bds.setEpfno(EPFno);
                    bds.setSal_Adv_01(Sal_Adv_01);
                    bds.setSal_Adv_02(Sal_Adv_02);
                    bds.setLoan01(Loan01);
                    bds.setLoan02(Loan02);
                    bds.setUniform(Uniform);
                    bds.setShoe(Shoe);
                    bds.setWelfare(welfare);
                    bds.setMeal(meal);
                    bds.setRental(rental);
                    bds.setFine(fine);
                    bds.setLess_shift(less_shift);
                    bds.setOther_deduc(other_deduc);
                    bds.setDeath(death);
                    bds.setPaid10(paid10);
                    bds.setInsuarance(insuarance);
                    bds.setFestival(festival);
                    bds.setDmonth(Month);
                    bds.setDyear(Year);

                    clear();
                    deductions.add(bds);
                }

                //System.out.println(EPFno + " " + "Sal_Adv_01: " + Sal_Adv_01 + " Sal_Adv_02: " + Sal_Adv_02 + " Loan01: " + Loan01 + " Loan02: " + Loan02 + " Shoe:" + Shoe + " Uniform:" + Uniform);
            }
            clear();
            print();
            deductions.clear();

        } catch (Exception e) {
            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmb_month1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_month1PopupMenuWillBecomeInvisible
        cmb_deduction_type.setSelectedIndex(0);
    }//GEN-LAST:event_cmb_month1PopupMenuWillBecomeInvisible

    private void cmb_year1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_year1PopupMenuWillBecomeInvisible
        cmb_deduction_type.setSelectedIndex(0);        //  days_per_month();
    }//GEN-LAST:event_cmb_year1PopupMenuWillBecomeInvisible

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        print();
    }//GEN-LAST:event_jButton6ActionPerformed
    String location = null;
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        switch (cmb_report_type.getSelectedIndex()) {
            case 0:
                if (cmb_deduction_type.getSelectedIndex() == 0) {

                    System.out.println(cmb_deduction_type.getSelectedIndex());
                    System.out.println(cmb_deduction_type.getSelectedItem().toString());

                    try {

                        if (cmb_locations.getSelectedIndex() == 0) {

                            String type = cmb_deduction_type.getSelectedItem().toString();

                            String sql = null;

                            sql = " select * from salary_advance_festival_monthly join employee_reg on EMPno=EmployeeNo JOIN location_reg on LocCode=DefLocation where \n"
                                    + "            Month='" + cmb_month1.getSelectedItem().toString() + "' and Year='" + cmb_year1.getSelectedItem().toString() + "' ";

                            Connection conn = (Connection) DbConnection.getconnection();

                            JasperDesign jd = JRXmlLoader.load("Reports\\Festival_Deduction_Report_Monthly.jrxml");

                            JRDesignQuery newQuery = new JRDesignQuery();
                            newQuery.setText(sql);
                            jd.setQuery(newQuery);

                            JasperReport jr = JasperCompileManager.compileReport(jd);
                            JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
                            JasperViewer.viewReport(jp, false);
                        } else {
                            //location
                            String sql = null;

                            sql = " select * from salary_advance_festival_monthly   join salary_festival_deductions_summery on salary_festival_deductions_summery.EMPno=salary_advance_festival_monthly.EMPno"
                                    + " join employee_reg on salary_advance_festival_monthly.EMPno=EmployeeNo JOIN location_reg on LocCode=DefLocation where \n"
                                    + "   Unit='" + location + "'    and     Month='" + cmb_month1.getSelectedItem().toString() + "' and Year='" + cmb_year1.getSelectedItem().toString() + "' GROUP BY salary_advance_festival_monthly.EMPno";

                            Connection conn = (Connection) DbConnection.getconnection();

                            JasperDesign jd = JRXmlLoader.load("Reports\\Festival_Deduction_Report_Monthly_UnitWise.jrxml");

                            JRDesignQuery newQuery = new JRDesignQuery();
                            newQuery.setText(sql);
                            jd.setQuery(newQuery);

                            JasperReport jr = JasperCompileManager.compileReport(jd);
                            JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
                            JasperViewer.viewReport(jp, false);

                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
                break;
            case 1:
                try {
                    //JRBeanCollectionDataSource bcds = new JRBeanCollectionDataSource(al);
                    Connection conn = (Connection) DbConnection.getconnection();

                    String path = "Reports\\FestivalAdvanceDetail.jrxml";
                    JasperReport jr = JasperCompileManager.compileReport(path);
                    JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
                    JasperViewer.viewReport(jp, false);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            case 2:
                System.out.println("case2");
                table();
                table_to_ireport();

//                try {
//
//                    String type = cmb_deduction_type.getSelectedItem().toString();
//                    System.out.println(location);
//                    String sql = null;
//
//                    sql = " select * from salary_festival_deductions_summery join employee_reg on EMPno=EmployeeNo  "
//                            + "join location_reg on DefLocation=LocCode where \n"
//                            + "DefLocation='" + location + "'";
//
//                    Connection conn = (Connection) DbConnection.getconnection();
//
//                    JasperDesign jd = JRXmlLoader.load("Reports\\FestivalAdvanceDetail_unitWise.jrxml");
//
//                    JRDesignQuery newQuery = new JRDesignQuery();
//                    newQuery.setText(sql);
//                    jd.setQuery(newQuery);
//
//                    JasperReport jr = JasperCompileManager.compileReport(jd);
//                    JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
//                    JasperViewer.viewReport(jp, false);
//
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
                break;

            case 3:

                try {

                    Connection con = DbConnection.getconnection();
                    PreparedStatement pst;

                    String loc = null;
                    String loc_amt = "0.00";
                    String bank = "0.00";
                    String hand = "0.00";
                    String slip = "0.00";
                    String loc_name = null;

                    String sql_loc = "select *,SUM(LoanAmount) from salary_festival_deductions_summery  where FestivMonth='" + cmb_month1.getSelectedItem().toString() + "' and FestivYear='" + cmb_year1.getSelectedItem().toString() + "' group by Unit";
                    pst = con.prepareStatement(sql_loc);
                    ResultSet rs_loc = pst.executeQuery();
                    while (rs_loc.next()) {

                        loc = rs_loc.getString("Unit");
                        loc_amt = rs_loc.getString("SUM(LoanAmount)");

                        String sql = "select *,SUM(LoanAmount) from salary_festival_deductions_summery   where FestivMonth='" + cmb_month1.getSelectedItem().toString() + "' and FestivYear='" + cmb_year1.getSelectedItem().toString() + "' and Unit='" + loc + "' and PayType='Bank'";
                        pst = con.prepareStatement(sql);
                        ResultSet rs = pst.executeQuery();
                        while (rs.next()) {

                            if ((rs.getString("SUM(LoanAmount)")) == null) {
                                bank = "0.00";
                            } else {
                                bank = (rs.getString("SUM(LoanAmount)"));
                            }

                        }

                        String sql1 = "select *,SUM(LoanAmount) from salary_festival_deductions_summery   where FestivMonth='" + cmb_month1.getSelectedItem().toString() + "' and FestivYear='" + cmb_year1.getSelectedItem().toString() + "' and Unit='" + loc + "' and PayType='Hand'";
                        pst = con.prepareStatement(sql1);
                        ResultSet rs1 = pst.executeQuery();
                        while (rs1.next()) {

                            if ((rs1.getString("SUM(LoanAmount)")) == null) {
                                hand = "0.00";
                            } else {
                                hand = (rs1.getString("SUM(LoanAmount)"));
                            }

                        }

                        String sql2 = "select *,SUM(LoanAmount) from salary_festival_deductions_summery   where FestivMonth='" + cmb_month1.getSelectedItem().toString() + "' and FestivYear='" + cmb_year1.getSelectedItem().toString() + "' and Unit='" + loc + "' and PayType='Slip'";
                        pst = con.prepareStatement(sql2);
                        ResultSet rs2 = pst.executeQuery();
                        while (rs2.next()) {
                            if ((rs2.getString("SUM(LoanAmount)")) == null) {
                                slip = "0.00";
                            } else {
                                slip = (rs2.getString("SUM(LoanAmount)"));
                            }

                        }

                        String sql3 = "select *  from location_reg where LocCode='" + loc + "'";
                        pst = con.prepareStatement(sql3);
                        ResultSet rs3 = pst.executeQuery();
                        while (rs3.next()) {
                            loc_name = (rs3.getString("LocName"));
                        }

                        bean_EMP_Advance bds = new bean_EMP_Advance();
                        bds.setLoc_code(loc);
                        bds.setLoc_name(loc_name);
                        bds.setAmount(Double.parseDouble(loc_amt));
                        bds.setBank_total(Double.parseDouble(bank));
                        bds.setCash_total(Double.parseDouble(hand));
                        bds.setSlip_total(Double.parseDouble(slip));

                        adv.add(bds);

                    }

                    print_sum();
                    adv.clear();

                } catch (Exception e) {
                    e.printStackTrace();
                }

                break;
            default:
                break;
        }

    }//GEN-LAST:event_jButton3ActionPerformed
    void print_sum() {
        try {
            JRBeanCollectionDataSource bcds = new JRBeanCollectionDataSource(adv);
            String path = "Reports\\Emp_Festival_Advance_SUM.jrxml";
            JasperReport jr = JasperCompileManager.compileReport(path);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, bcds);
            JasperViewer.viewReport(jp, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void table() {

        String LocCode = null;
//        String LocName = null;
        String EmpNo = null;
        String EmpName = null;
        String AdvAmount = null;
        String PayType = null;
        String Status = null;
//        String Month = null;
//        String Year = null;
//        String Bank_amount = null;
//        String Cash_Amount = null;
//        String Slip_Amount = null;
//        String BankName = "0";
        String Rank = null;
        try {
            System.out.println(location);
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);

            Connection conn = DbConnection.getconnection();
            String sql = "SELECT * from salary_festival_deductions_summery JOIN employee_reg on EMPno=EmployeeNo WHERE  Unit='" + location + "' and  FestivMonth='" + cmb_month1.getSelectedItem().toString() + "' and  FestivYear='" + cmb_year1.getSelectedItem().toString() + "'";
            PreparedStatement pstt = conn.prepareStatement(sql);
            ResultSet rs = pstt.executeQuery();
            while (rs.next()) {

                LocCode = rs.getString("Unit");
                // LocName = rs.getString("location_reg.LocName");
                EmpNo = rs.getString("EMPno");
                EmpName = rs.getString("NameWithInitials");
                AdvAmount = rs.getString("LoanAmount");
                PayType = rs.getString("PayType");
//                Month = rs.getString("PayMonth");
//                Year = rs.getString("PayYear");
                Rank = rs.getString("Designation");
                Status = "";

                System.out.println(LocCode + " " + EmpNo);

                Vector v = new Vector();
                v.add(EmpNo);
                v.add(EmpName);
                v.add(Rank);
                v.add(AdvAmount);
                v.add(LocCode);
                v.add("");
                v.add(PayType);
                v.add("");
                v.add(Status);

                dtm.addRow(v);

            }

            int nrow = jTable1.getModel().getRowCount();

            if (nrow == 0) {

            } else {
                lbl_bank.setText("0.00");
                lbl_cash.setText("0.00");
                lbl_slip.setText("0.00");

                for (int i = 0; nrow > i; i++) {

                    String loc = jTable1.getModel().getValueAt(i, 4).toString();
                    String epf = jTable1.getModel().getValueAt(i, 0).toString();
                    String pay = jTable1.getModel().getValueAt(i, 6).toString();

                    String sql2 = "SELECT * from location_reg  WHERE  LocCode='" + loc + "' ";
                    PreparedStatement pst2 = conn.prepareStatement(sql2);
                    ResultSet rs2 = pst2.executeQuery();
                    while (rs2.next()) {

                        String loName = rs2.getString("LocName");

                        jTable1.getModel().setValueAt(loName, i, 5);

                    }

                    if (pay.equals("Bank")) {

                        String sql3 = "SELECT * from emp_bank_acc  WHERE  EMPno='" + epf + "' ";
                        PreparedStatement pst3 = conn.prepareStatement(sql3);
                        ResultSet rs3 = pst3.executeQuery();
                        while (rs3.next()) {

                            String bankCode = rs3.getString("Bank");

                            if (bankCode == null) {
                                bankCode = "";
                            } else {
                                String sql4 = "SELECT * from bank_main  WHERE  BankCode='" + bankCode + "' ";
                                PreparedStatement pst4 = conn.prepareStatement(sql4);
                                ResultSet rs4 = pst4.executeQuery();
                                while (rs4.next()) {

                                    String bankname = rs4.getString("BankName");
                                    if (bankname == null) {
                                        bankname = "";
                                    } else {
                                        jTable1.getModel().setValueAt(bankname, i, 7);
                                    }

                                }
                            }

                        }
                    } else {

                    }

//                    String sql3 = "SELECT * from emp_bank_acc  WHERE  EMPno='" + epf + "' ";
//                    PreparedStatement pst3 = con.prepareStatement(sql3);
//                    ResultSet rs3 = pst3.executeQuery();
//                    while (rs3.next()) {
//
//                        String bankCode = rs3.getString("Bank");
//
//                        if (bankCode == null) {
//                            bankCode = "";
//                        } else {
//                            String sql4 = "SELECT * from bank_main  WHERE  BankCode='" + bankCode + "' ";
//                            PreparedStatement pst4 = con.prepareStatement(sql4);
//                            ResultSet rs4 = pst4.executeQuery();
//                            while (rs4.next()) {
//
//                                String bankname = rs4.getString("BankName");
//                                if (bankname == null) {
//                                    bankname = "";
//                                } else {
//                                    jTable1.getModel().setValueAt(bankname, i, 7);
//                                }
//
//                            }
//                        }
//
//                    }
                    Double adv_amt = Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());
//                    String pay = jTable1.getModel().getValueAt(i, 6).toString();

                    if (pay.equals("Bank")) {

                        Double x = Double.parseDouble(lbl_bank.getText());
                        //x += adv_amt;
                        lbl_bank.setText(String.format("%.2f", x += adv_amt));

                    }

                    if (pay.equals("Hand")) {

                        Double x = Double.parseDouble(lbl_cash.getText());
                        //x += adv_amt;
                        lbl_cash.setText(String.format("%.2f", x += adv_amt));

                    }

                    if (pay.equals("Slip")) {

                        Double x = Double.parseDouble(lbl_slip.getText());
                        //x += adv_amt;
                        lbl_slip.setText(String.format("%.2f", x += adv_amt));

                    }

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void table_to_ireport() {
        int nrow = jTable1.getModel().getRowCount();
        if (nrow == 0) {

        } else {
            for (int i = 0; nrow > i; i++) {
                bean_EMP_Advance bds = new bean_EMP_Advance();

                bds.setLoc_code(jTable1.getModel().getValueAt(i, 4).toString());
                bds.setLoc_name(jTable1.getModel().getValueAt(i, 5).toString());
                bds.setEmp_code(jTable1.getModel().getValueAt(i, 0).toString());
                bds.setEmp_name(jTable1.getModel().getValueAt(i, 1).toString());
                bds.setRank(jTable1.getModel().getValueAt(i, 2).toString());
                bds.setAmount(Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString()));
                bds.setMonth(cmb_month1.getSelectedItem().toString());
                bds.setYear(cmb_year1.getSelectedItem().toString());

                if (jTable1.getModel().getValueAt(i, 7) == null) {
                    bds.setBank_Name("");
                } else {
                    bds.setBank_Name(jTable1.getModel().getValueAt(i, 7).toString());
                }

                bds.setPay_Type(jTable1.getModel().getValueAt(i, 6).toString());
                bds.setBank_total(Double.parseDouble(lbl_bank.getText()));
                bds.setCash_total(Double.parseDouble(lbl_cash.getText()));
                bds.setSlip_total(Double.parseDouble(lbl_slip.getText()));
                adv.add(bds);

            }

            print2();
            adv.clear();
        }

    }

    void print2() {
        try {
            JRBeanCollectionDataSource bcds = new JRBeanCollectionDataSource(adv);
            String path = "Reports\\Emp_Monthly_FestivalAdvance.jrxml";
            JasperReport jr = JasperCompileManager.compileReport(path);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, bcds);
            JasperViewer.viewReport(jp, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void cmb_report_typePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_report_typePopupMenuWillBecomeInvisible
        if (cmb_report_type.getSelectedIndex() == 1) {
            cmb_month1.setEnabled(false);
            cmb_year1.setEnabled(false);
            cmb_locations.setEnabled(false);
            jLabel20.setText("Month & Year :");

        } else if (cmb_report_type.getSelectedIndex() == 3) {
            cmb_month1.setEnabled(true);
            cmb_year1.setEnabled(true);
            cmb_locations.setEnabled(false);
            jLabel20.setText("Festival Month:");

        } else {

            cmb_month1.setEnabled(true);
            cmb_year1.setEnabled(true);
            cmb_locations.setEnabled(true);
        }
    }//GEN-LAST:event_cmb_report_typePopupMenuWillBecomeInvisible

    private void cmb_locationsPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_locationsPopupMenuWillBecomeInvisible
        if (cmb_locations.getSelectedItem().equals("==Location==")) {

//            txt_locCode.setText("** Please Select a Location ");
//            txt_locCode.setForeground(Color.red);
        } else {
//            txt_locCode.setForeground(Color.black);
            try {

                Statement st = DbConnection.getconnection().createStatement();
                ResultSet rs = st.executeQuery("SELECT * from location_reg where LocCode= '" + cmb_locations.getSelectedItem().toString() + "' OR LocName= '" + cmb_locations.getSelectedItem().toString() + "' ");
                while (rs.next()) {

                    String code = rs.getString("LocCode");
                    String name = rs.getString("LocName");

                    cmb_locations.setSelectedItem(name);
                    location = (code);
                }

                //  cmb_locations.setEditable(false);
                //                cmb_defLocation.setEnabled(false);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_cmb_locationsPopupMenuWillBecomeInvisible

    private void cmb_deduction_typePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_deduction_typePopupMenuWillBecomeInvisible

    }//GEN-LAST:event_cmb_deduction_typePopupMenuWillBecomeInvisible

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RPT_Deductions_new.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RPT_Deductions_new.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RPT_Deductions_new.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RPT_Deductions_new.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RPT_Deductions_new().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmb_deduction_type;
    private javax.swing.JComboBox cmb_locations;
    private javax.swing.JComboBox cmb_month;
    private javax.swing.JComboBox cmb_month1;
    private javax.swing.JComboBox cmb_report_type;
    private javax.swing.JComboBox cmb_year;
    private javax.swing.JComboBox cmb_year1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbl_PAID_bank;
    private javax.swing.JLabel lbl_PAID_cash;
    private javax.swing.JLabel lbl_PAID_slip;
    private javax.swing.JLabel lbl_bank;
    private javax.swing.JLabel lbl_cash;
    private javax.swing.JLabel lbl_slip;
    // End of variables declaration//GEN-END:variables

    void print() {
        try {
            JRBeanCollectionDataSource bcds = new JRBeanCollectionDataSource(deductions);
            String path = "Reports\\deductions.jrxml";//Attendance_Summery_Single_Loc
            JasperReport jr = JasperCompileManager.compileReport(path);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, bcds);
            JasperViewer.viewReport(jp, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clear() {
        EPFno = null;
        EmpName = null;
        Sal_Adv_01 = null;
        Sal_Adv_02 = null;
        Loan01 = null;
        Loan02 = null;
        Uniform = null;
        Shoe = null;
        welfare = null;
        meal = null;
        fine = null;
        rental = null;
        less_shift = null;
        other_deduc = null;
        death = null;
        paid10 = null;
        insuarance = null;

    }

}
